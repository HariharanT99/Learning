//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    login(loginModel: LoginViewModel , cancelToken?: CancelToken | undefined): Promise<LoggedInModel> {
        let url_ = this.baseUrl + "/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginModel);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<LoggedInModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LoggedInModel.fromJS(resultData200);
            return Promise.resolve<LoggedInModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LoggedInModel>(null as any);
    }

    /**
     * @return OK
     */
    refresh(token: string, refreshToken: string , cancelToken?: CancelToken | undefined): Promise<RefreshTokenDTO> {
        let url_ = this.baseUrl + "/refresh?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined and cannot be null.");
        else
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (refreshToken === undefined || refreshToken === null)
            throw new Error("The parameter 'refreshToken' must be defined and cannot be null.");
        else
            url_ += "refreshToken=" + encodeURIComponent("" + refreshToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: AxiosResponse): Promise<RefreshTokenDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RefreshTokenDTO.fromJS(resultData200);
            return Promise.resolve<RefreshTokenDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefreshTokenDTO>(null as any);
    }

    /**
     * @return OK
     */
    changePassword(user: PasswordViewModel , cancelToken?: CancelToken | undefined): Promise<PasswordViewModel> {
        let url_ = this.baseUrl + "/Account/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<PasswordViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PasswordViewModel.fromJS(resultData200);
            return Promise.resolve<PasswordViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PasswordViewModel>(null as any);
    }

    /**
     * @return OK
     */
    isValidEUVAT(countryCode: string, vatNumber: string , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/VAT/IsValidEUVAT/{countryCode}/{vatNumber}";
        if (countryCode === undefined || countryCode === null)
            throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
        if (vatNumber === undefined || vatNumber === null)
            throw new Error("The parameter 'vatNumber' must be defined.");
        url_ = url_.replace("{vatNumber}", encodeURIComponent("" + vatNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processIsValidEUVAT(_response);
        });
    }

    protected processIsValidEUVAT(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    logout(refreshToken: string, accessToken: string , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Account/Logout?";
        if (refreshToken === undefined || refreshToken === null)
            throw new Error("The parameter 'refreshToken' must be defined and cannot be null.");
        else
            url_ += "refreshToken=" + encodeURIComponent("" + refreshToken) + "&";
        if (accessToken === undefined || accessToken === null)
            throw new Error("The parameter 'accessToken' must be defined and cannot be null.");
        else
            url_ += "accessToken=" + encodeURIComponent("" + accessToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    callback(  cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/account/callback";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCallback(_response);
        });
    }

    protected processCallback(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    updateUserConsentForPrivacy(privacyPolicyVM: PrivacyPolicyVM , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Account/UpdateUserConsentForPrivacy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(privacyPolicyVM);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserConsentForPrivacy(_response);
        });
    }

    protected processUpdateUserConsentForPrivacy(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    activateUser(userActivationToken: string, isPasswordReset: boolean , cancelToken?: CancelToken | undefined): Promise<LoggedInModel> {
        let url_ = this.baseUrl + "/Account/ActivateUser/{userActivationToken}/{isPasswordReset}";
        if (userActivationToken === undefined || userActivationToken === null)
            throw new Error("The parameter 'userActivationToken' must be defined.");
        url_ = url_.replace("{userActivationToken}", encodeURIComponent("" + userActivationToken));
        if (isPasswordReset === undefined || isPasswordReset === null)
            throw new Error("The parameter 'isPasswordReset' must be defined.");
        url_ = url_.replace("{isPasswordReset}", encodeURIComponent("" + isPasswordReset));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processActivateUser(_response);
        });
    }

    protected processActivateUser(response: AxiosResponse): Promise<LoggedInModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LoggedInModel.fromJS(resultData200);
            return Promise.resolve<LoggedInModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LoggedInModel>(null as any);
    }

    /**
     * @return OK
     */
    setPasswordForFirstTimeUser(user: PasswordViewModel , cancelToken?: CancelToken | undefined): Promise<IdentityResult> {
        let url_ = this.baseUrl + "/Account/SetPasswordForFirstTimeUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetPasswordForFirstTimeUser(_response);
        });
    }

    protected processSetPasswordForFirstTimeUser(response: AxiosResponse): Promise<IdentityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IdentityResult.fromJS(resultData200);
            return Promise.resolve<IdentityResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IdentityResult>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getRegisteredEvents(  cancelToken?: CancelToken | undefined): Promise<RegisteredEventViewModel> {
        let url_ = this.baseUrl + "/Dashboard/GetRegisteredEvents";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRegisteredEvents(_response);
        });
    }

    protected processGetRegisteredEvents(response: AxiosResponse): Promise<RegisteredEventViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RegisteredEventViewModel.fromJS(resultData200);
            return Promise.resolve<RegisteredEventViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisteredEventViewModel>(null as any);
    }

    /**
     * @return OK
     */
    getMembershipDocuments(  cancelToken?: CancelToken | undefined): Promise<DocumentMobileViewModel[]> {
        let url_ = this.baseUrl + "/Dashboard/GetMembershipDocuments";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMembershipDocuments(_response);
        });
    }

    protected processGetMembershipDocuments(response: AxiosResponse): Promise<DocumentMobileViewModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentMobileViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DocumentMobileViewModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DocumentMobileViewModel[]>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Dashboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    manualUploadFiles(data: FileUploadDTO , cancelToken?: CancelToken | undefined): Promise<Document> {
        let url_ = this.baseUrl + "/Document/ManualUploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processManualUploadFiles(_response);
        });
    }

    protected processManualUploadFiles(response: AxiosResponse): Promise<Document> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Document.fromJS(resultData200);
            return Promise.resolve<Document>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Document>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Document";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getEvents(size: number, offSet: number , cancelToken?: CancelToken | undefined): Promise<MGetEventsDTO> {
        let url_ = this.baseUrl + "/events/{size}/{offSet}";
        if (size === undefined || size === null)
            throw new Error("The parameter 'size' must be defined.");
        url_ = url_.replace("{size}", encodeURIComponent("" + size));
        if (offSet === undefined || offSet === null)
            throw new Error("The parameter 'offSet' must be defined.");
        url_ = url_.replace("{offSet}", encodeURIComponent("" + offSet));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEvents(_response);
        });
    }

    protected processGetEvents(response: AxiosResponse): Promise<MGetEventsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MGetEventsDTO.fromJS(resultData200);
            return Promise.resolve<MGetEventsDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MGetEventsDTO>(null as any);
    }

    /**
     * @return OK
     */
    getEvent(id: number , cancelToken?: CancelToken | undefined): Promise<InitialDataIndividualDTO> {
        let url_ = this.baseUrl + "/event/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEvent(_response);
        });
    }

    protected processGetEvent(response: AxiosResponse): Promise<InitialDataIndividualDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InitialDataIndividualDTO.fromJS(resultData200);
            return Promise.resolve<InitialDataIndividualDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InitialDataIndividualDTO>(null as any);
    }

    /**
     * @return OK
     */
    uploadFiles(requestedUserId: string, moduleId: number, documentTypeId: number, applicationId: number , cancelToken?: CancelToken | undefined): Promise<Document> {
        let url_ = this.baseUrl + "/event/uploadfiles/{requestedUserId}/{moduleId}/{documentTypeId}/{applicationId}";
        if (requestedUserId === undefined || requestedUserId === null)
            throw new Error("The parameter 'requestedUserId' must be defined.");
        url_ = url_.replace("{requestedUserId}", encodeURIComponent("" + requestedUserId));
        if (moduleId === undefined || moduleId === null)
            throw new Error("The parameter 'moduleId' must be defined.");
        url_ = url_.replace("{moduleId}", encodeURIComponent("" + moduleId));
        if (documentTypeId === undefined || documentTypeId === null)
            throw new Error("The parameter 'documentTypeId' must be defined.");
        url_ = url_.replace("{documentTypeId}", encodeURIComponent("" + documentTypeId));
        if (applicationId === undefined || applicationId === null)
            throw new Error("The parameter 'applicationId' must be defined.");
        url_ = url_.replace("{applicationId}", encodeURIComponent("" + applicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadFiles(_response);
        });
    }

    protected processUploadFiles(response: AxiosResponse): Promise<Document> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Document.fromJS(resultData200);
            return Promise.resolve<Document>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Document>(null as any);
    }

    /**
     * @return OK
     */
    checkTicketStatus(eventRegistration: EventRegistrationViewModel , cancelToken?: CancelToken | undefined): Promise<CheckTicketStatusViewModel> {
        let url_ = this.baseUrl + "/Event/CheckTicketStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventRegistration);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCheckTicketStatus(_response);
        });
    }

    protected processCheckTicketStatus(response: AxiosResponse): Promise<CheckTicketStatusViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CheckTicketStatusViewModel.fromJS(resultData200);
            return Promise.resolve<CheckTicketStatusViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CheckTicketStatusViewModel>(null as any);
    }

    /**
     * @return OK
     */
    getVATDetails(vatDetailsViewModel: VatDetailsViewModel , cancelToken?: CancelToken | undefined): Promise<GetVATDetailsDTO> {
        let url_ = this.baseUrl + "/Event/GetVATDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(vatDetailsViewModel);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVATDetails(_response);
        });
    }

    protected processGetVATDetails(response: AxiosResponse): Promise<GetVATDetailsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetVATDetailsDTO.fromJS(resultData200);
            return Promise.resolve<GetVATDetailsDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetVATDetailsDTO>(null as any);
    }

    /**
     * @return OK
     */
    eventRegistrationForIndividual(eventRegistration: EventRegistrationViewModel , cancelToken?: CancelToken | undefined): Promise<RegistrationViewModel> {
        let url_ = this.baseUrl + "/Event/IndividualRegistration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventRegistration);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEventRegistrationForIndividual(_response);
        });
    }

    protected processEventRegistrationForIndividual(response: AxiosResponse): Promise<RegistrationViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RegistrationViewModel.fromJS(resultData200);
            return Promise.resolve<RegistrationViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegistrationViewModel>(null as any);
    }

    /**
     * @return OK
     */
    getEventArtifactsForUser(eventId: number , cancelToken?: CancelToken | undefined): Promise<EventArtifactsMobileViewModel> {
        let url_ = this.baseUrl + "/Event/GetEventArtifactsForUser/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEventArtifactsForUser(_response);
        });
    }

    protected processGetEventArtifactsForUser(response: AxiosResponse): Promise<EventArtifactsMobileViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EventArtifactsMobileViewModel.fromJS(resultData200);
            return Promise.resolve<EventArtifactsMobileViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EventArtifactsMobileViewModel>(null as any);
    }

    /**
     * @return OK
     */
    downloadPaymentDemand(paymentDemandId: number , cancelToken?: CancelToken | undefined): Promise<DocumentContentViewModel> {
        let url_ = this.baseUrl + "/Event/DownloadPaymentDemand/{paymentDemandId}";
        if (paymentDemandId === undefined || paymentDemandId === null)
            throw new Error("The parameter 'paymentDemandId' must be defined.");
        url_ = url_.replace("{paymentDemandId}", encodeURIComponent("" + paymentDemandId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadPaymentDemand(_response);
        });
    }

    protected processDownloadPaymentDemand(response: AxiosResponse): Promise<DocumentContentViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DocumentContentViewModel.fromJS(resultData200);
            return Promise.resolve<DocumentContentViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DocumentContentViewModel>(null as any);
    }

    /**
     * @return OK
     */
    downloadCreditNote(creditNoteId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/DownloadCreditNote/{creditNoteId}";
        if (creditNoteId === undefined || creditNoteId === null)
            throw new Error("The parameter 'creditNoteId' must be defined.");
        url_ = url_.replace("{creditNoteId}", encodeURIComponent("" + creditNoteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadCreditNote(_response);
        });
    }

    protected processDownloadCreditNote(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    downloadInvoice(invoiceId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/DownloadInvoice/{invoiceId}";
        if (invoiceId === undefined || invoiceId === null)
            throw new Error("The parameter 'invoiceId' must be defined.");
        url_ = url_.replace("{invoiceId}", encodeURIComponent("" + invoiceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadInvoice(_response);
        });
    }

    protected processDownloadInvoice(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    downloadConfirmationLetter(eventId: number, typeOfRegistration: number, groupId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/DownloadConfirmationLetter/{eventId}/{typeOfRegistration}/{groupId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (typeOfRegistration === undefined || typeOfRegistration === null)
            throw new Error("The parameter 'typeOfRegistration' must be defined.");
        url_ = url_.replace("{typeOfRegistration}", encodeURIComponent("" + typeOfRegistration));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadConfirmationLetter(_response);
        });
    }

    protected processDownloadConfirmationLetter(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    downloadVisaInvitationLetter(eventId: number, typeOfRegistration: number, groupId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/DownloadVisaInvitationLetter/{eventId}/{typeOfRegistration}/{groupId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (typeOfRegistration === undefined || typeOfRegistration === null)
            throw new Error("The parameter 'typeOfRegistration' must be defined.");
        url_ = url_.replace("{typeOfRegistration}", encodeURIComponent("" + typeOfRegistration));
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadVisaInvitationLetter(_response);
        });
    }

    protected processDownloadVisaInvitationLetter(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    downloadCertificateOfAttendance(eventId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/DownloadCertificateOfAttendance/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadCertificateOfAttendance(_response);
        });
    }

    protected processDownloadCertificateOfAttendance(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param paymentInternalReferenceNo (optional) 
     * @param paymentReferenceNo (optional) 
     * @param paymentCompletedOn (optional) 
     * @return OK
     */
    changePaymentMode(paymentDemandId: number, paymentMode: number, transferId: number, paymentTransactionId: number, paymentInternalReferenceNo: string | null | undefined, paymentReferenceNo: string | null | undefined, paymentCompletedOn: Date | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Event/ChangePaymentMode?";
        if (paymentDemandId === undefined || paymentDemandId === null)
            throw new Error("The parameter 'paymentDemandId' must be defined and cannot be null.");
        else
            url_ += "paymentDemandId=" + encodeURIComponent("" + paymentDemandId) + "&";
        if (paymentMode === undefined || paymentMode === null)
            throw new Error("The parameter 'paymentMode' must be defined and cannot be null.");
        else
            url_ += "paymentMode=" + encodeURIComponent("" + paymentMode) + "&";
        if (transferId === undefined || transferId === null)
            throw new Error("The parameter 'transferId' must be defined and cannot be null.");
        else
            url_ += "transferId=" + encodeURIComponent("" + transferId) + "&";
        if (paymentTransactionId === undefined || paymentTransactionId === null)
            throw new Error("The parameter 'paymentTransactionId' must be defined and cannot be null.");
        else
            url_ += "paymentTransactionId=" + encodeURIComponent("" + paymentTransactionId) + "&";
        if (paymentInternalReferenceNo !== undefined && paymentInternalReferenceNo !== null)
            url_ += "paymentInternalReferenceNo=" + encodeURIComponent("" + paymentInternalReferenceNo) + "&";
        if (paymentReferenceNo !== undefined && paymentReferenceNo !== null)
            url_ += "paymentReferenceNo=" + encodeURIComponent("" + paymentReferenceNo) + "&";
        if (paymentCompletedOn !== undefined && paymentCompletedOn !== null)
            url_ += "paymentCompletedOn=" + encodeURIComponent(paymentCompletedOn ? "" + paymentCompletedOn.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePaymentMode(_response);
        });
    }

    protected processChangePaymentMode(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    isCouponCodeValid(couponcode: string, eventId: number , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Event/{eventId}/Discount/Coupon/{couponcode}";
        if (couponcode === undefined || couponcode === null)
            throw new Error("The parameter 'couponcode' must be defined.");
        url_ = url_.replace("{couponcode}", encodeURIComponent("" + couponcode));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processIsCouponCodeValid(_response);
        });
    }

    protected processIsCouponCodeValid(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getEventArtifact(eventId: number , cancelToken?: CancelToken | undefined): Promise<EventArtifactDTO[]> {
        let url_ = this.baseUrl + "/Event/GetEventArtifact/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEventArtifact(_response);
        });
    }

    protected processGetEventArtifact(response: AxiosResponse): Promise<EventArtifactDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventArtifactDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<EventArtifactDTO[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EventArtifactDTO[]>(null as any);
    }

    /**
     * @return OK
     */
    uploadUserEventArtifact(eventId: number, eventArtifactId: number, userEventArtifactId: number, exhibitorPersonId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Event/UploadUserEventArtifact/{eventId}/{eventArtifactId}/{userEventArtifactId}/{exhibitorPersonId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        if (eventArtifactId === undefined || eventArtifactId === null)
            throw new Error("The parameter 'eventArtifactId' must be defined.");
        url_ = url_.replace("{eventArtifactId}", encodeURIComponent("" + eventArtifactId));
        if (userEventArtifactId === undefined || userEventArtifactId === null)
            throw new Error("The parameter 'userEventArtifactId' must be defined.");
        url_ = url_.replace("{userEventArtifactId}", encodeURIComponent("" + userEventArtifactId));
        if (exhibitorPersonId === undefined || exhibitorPersonId === null)
            throw new Error("The parameter 'exhibitorPersonId' must be defined.");
        url_ = url_.replace("{exhibitorPersonId}", encodeURIComponent("" + exhibitorPersonId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadUserEventArtifact(_response);
        });
    }

    protected processUploadUserEventArtifact(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    removeEventArtifactDocument(documentId: number , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Event/RemoveEventArtifactDocument/{documentId}";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveEventArtifactDocument(_response);
        });
    }

    protected processRemoveEventArtifactDocument(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    hasUserUploadedArtifacts(eventId: number , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Event/HasUserUploadedArtifacts/{eventId}";
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url_ = url_.replace("{eventId}", encodeURIComponent("" + eventId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHasUserUploadedArtifacts(_response);
        });
    }

    protected processHasUserUploadedArtifacts(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Event";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getImage(id: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/event/Image/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetImage(_response);
        });
    }

    protected processGetImage(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getMembershipHistory(  cancelToken?: CancelToken | undefined): Promise<MembershipMobileModel> {
        let url_ = this.baseUrl + "/Membership/GetMembershipHistory";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMembershipHistory(_response);
        });
    }

    protected processGetMembershipHistory(response: AxiosResponse): Promise<MembershipMobileModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MembershipMobileModel.fromJS(resultData200);
            return Promise.resolve<MembershipMobileModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MembershipMobileModel>(null as any);
    }

    /**
     * @return OK
     */
    getMembershipArtifactsForUser(memSubId: number , cancelToken?: CancelToken | undefined): Promise<MembershipArtifactsMobileViewModel> {
        let url_ = this.baseUrl + "/Membership/GetMembershipArtifactsForUser/{memSubId}";
        if (memSubId === undefined || memSubId === null)
            throw new Error("The parameter 'memSubId' must be defined.");
        url_ = url_.replace("{memSubId}", encodeURIComponent("" + memSubId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMembershipArtifactsForUser(_response);
        });
    }

    protected processGetMembershipArtifactsForUser(response: AxiosResponse): Promise<MembershipArtifactsMobileViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MembershipArtifactsMobileViewModel.fromJS(resultData200);
            return Promise.resolve<MembershipArtifactsMobileViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MembershipArtifactsMobileViewModel>(null as any);
    }

    /**
     * @return OK
     */
    downloadDocument(documentId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Membership/DownloadDocument/{documentId}";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadDocument(_response);
        });
    }

    protected processDownloadDocument(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    downloadCertificate(documentId: number , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Membership/DownloadCertificate/{documentId}";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadCertificate(_response);
        });
    }

    protected processDownloadCertificate(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    saveSubscription(memberSubscriptionViewModel: NewSubscriptionViewModel , cancelToken?: CancelToken | undefined): Promise<RegistrationViewModel> {
        let url_ = this.baseUrl + "/Membership/SaveSubscription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(memberSubscriptionViewModel);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveSubscription(_response);
        });
    }

    protected processSaveSubscription(response: AxiosResponse): Promise<RegistrationViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RegistrationViewModel.fromJS(resultData200);
            return Promise.resolve<RegistrationViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegistrationViewModel>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Membership";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    paymentSuccess(transactionId: number, paidUserId: string , cancelToken?: CancelToken | undefined): Promise<PaymentSuccessViewModel> {
        let url_ = this.baseUrl + "/PaymentSuccess/{transactionId}/{paidUserId}";
        if (transactionId === undefined || transactionId === null)
            throw new Error("The parameter 'transactionId' must be defined.");
        url_ = url_.replace("{transactionId}", encodeURIComponent("" + transactionId));
        if (paidUserId === undefined || paidUserId === null)
            throw new Error("The parameter 'paidUserId' must be defined.");
        url_ = url_.replace("{paidUserId}", encodeURIComponent("" + paidUserId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPaymentSuccess(_response);
        });
    }

    protected processPaymentSuccess(response: AxiosResponse): Promise<PaymentSuccessViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaymentSuccessViewModel.fromJS(resultData200);
            return Promise.resolve<PaymentSuccessViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentSuccessViewModel>(null as any);
    }

    /**
     * @return OK
     */
    pendingPayments(  cancelToken?: CancelToken | undefined): Promise<UserDashboardView> {
        let url_ = this.baseUrl + "/Payments/Pendingpayments";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPendingPayments(_response);
        });
    }

    protected processPendingPayments(response: AxiosResponse): Promise<UserDashboardView> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDashboardView.fromJS(resultData200);
            return Promise.resolve<UserDashboardView>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDashboardView>(null as any);
    }

    /**
     * @return OK
     */
    completedPayments(size: number, offSet: number , cancelToken?: CancelToken | undefined): Promise<UserCompletedPaymentsView> {
        let url_ = this.baseUrl + "/Payments/Completedpayments/{size}/{offSet}";
        if (size === undefined || size === null)
            throw new Error("The parameter 'size' must be defined.");
        url_ = url_.replace("{size}", encodeURIComponent("" + size));
        if (offSet === undefined || offSet === null)
            throw new Error("The parameter 'offSet' must be defined.");
        url_ = url_.replace("{offSet}", encodeURIComponent("" + offSet));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCompletedPayments(_response);
        });
    }

    protected processCompletedPayments(response: AxiosResponse): Promise<UserCompletedPaymentsView> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserCompletedPaymentsView.fromJS(resultData200);
            return Promise.resolve<UserCompletedPaymentsView>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserCompletedPaymentsView>(null as any);
    }

    /**
     * @return OK
     */
    getPendingData(entityType: number, id: number, pdId: number , cancelToken?: CancelToken | undefined): Promise<PendingPaymentData> {
        let url_ = this.baseUrl + "/Payments/GetPendingData/{entityType}/{id}/{pdId}";
        if (entityType === undefined || entityType === null)
            throw new Error("The parameter 'entityType' must be defined.");
        url_ = url_.replace("{entityType}", encodeURIComponent("" + entityType));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (pdId === undefined || pdId === null)
            throw new Error("The parameter 'pdId' must be defined.");
        url_ = url_.replace("{pdId}", encodeURIComponent("" + pdId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPendingData(_response);
        });
    }

    protected processGetPendingData(response: AxiosResponse): Promise<PendingPaymentData> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PendingPaymentData.fromJS(resultData200);
            return Promise.resolve<PendingPaymentData>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PendingPaymentData>(null as any);
    }

    /**
     * @return OK
     */
    payBalance(paymentDemand: PayBalanceViewModel , cancelToken?: CancelToken | undefined): Promise<any> {
        let url_ = this.baseUrl + "/Payments/PayBalance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(paymentDemand);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPayBalance(_response);
        });
    }

    protected processPayBalance(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Payment";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getInitialDataForProfile(  cancelToken?: CancelToken | undefined): Promise<InitialProfileViewModel> {
        let url_ = this.baseUrl + "/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInitialDataForProfile(_response);
        });
    }

    protected processGetInitialDataForProfile(response: AxiosResponse): Promise<InitialProfileViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InitialProfileViewModel.fromJS(resultData200);
            return Promise.resolve<InitialProfileViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InitialProfileViewModel>(null as any);
    }

    /**
     * @return OK
     */
    updateProfile(userProfileViewModel: UserProfileViewModel , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userProfileViewModel);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateProfile(_response);
        });
    }

    protected processUpdateProfile(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44332";

    }

    /**
     * @return OK
     */
    getEmailPreference(id: string, isRegister: boolean , cancelToken?: CancelToken | undefined): Promise<UserEmailPreferenceVM> {
        let url_ = this.baseUrl + "/Register/GetEmailPreference/{id}/{IsRegister}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (isRegister === undefined || isRegister === null)
            throw new Error("The parameter 'isRegister' must be defined.");
        url_ = url_.replace("{IsRegister}", encodeURIComponent("" + isRegister));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEmailPreference(_response);
        });
    }

    protected processGetEmailPreference(response: AxiosResponse): Promise<UserEmailPreferenceVM> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserEmailPreferenceVM.fromJS(resultData200);
            return Promise.resolve<UserEmailPreferenceVM>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserEmailPreferenceVM>(null as any);
    }

    /**
     * @return OK
     */
    forgotPasswordRequest(user: ForgotPasswordViewModel , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Register/ForgotPasswordRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processForgotPasswordRequest(_response);
        });
    }

    protected processForgotPasswordRequest(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getLoggedUserId(  cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Register";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLoggedUserId(_response);
        });
    }

    protected processGetLoggedUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class LoginViewModel implements ILoginViewModel {
    userName!: string;
    password!: string;

    constructor(data?: ILoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["UserName"] !== undefined ? _data["UserName"] : <any>null;
            this.password = _data["Password"] !== undefined ? _data["Password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserName"] = this.userName !== undefined ? this.userName : <any>null;
        data["Password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginViewModel {
    userName: string;
    password: string;
}

export class LoggedInModel implements ILoggedInModel {
    authenticationToken?: { [key: string]: any; } | null;
    activationMessage?: string | null;
    message?: string | null;
    userFullName?: string | null;

    constructor(data?: ILoggedInModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["AuthenticationToken"]) {
                this.authenticationToken = {} as any;
                for (let key in _data["AuthenticationToken"]) {
                    if (_data["AuthenticationToken"].hasOwnProperty(key))
                        (<any>this.authenticationToken)![key] = _data["AuthenticationToken"][key] !== undefined ? _data["AuthenticationToken"][key] : <any>null;
                }
            }
            else {
                this.authenticationToken = <any>null;
            }
            this.activationMessage = _data["ActivationMessage"] !== undefined ? _data["ActivationMessage"] : <any>null;
            this.message = _data["Message"] !== undefined ? _data["Message"] : <any>null;
            this.userFullName = _data["UserFullName"] !== undefined ? _data["UserFullName"] : <any>null;
        }
    }

    static fromJS(data: any): LoggedInModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoggedInModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.authenticationToken) {
            data["AuthenticationToken"] = {};
            for (let key in this.authenticationToken) {
                if (this.authenticationToken.hasOwnProperty(key))
                    (<any>data["AuthenticationToken"])[key] = this.authenticationToken[key] !== undefined ? this.authenticationToken[key] : <any>null;
            }
        }
        data["ActivationMessage"] = this.activationMessage !== undefined ? this.activationMessage : <any>null;
        data["Message"] = this.message !== undefined ? this.message : <any>null;
        data["UserFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        return data;
    }
}

export interface ILoggedInModel {
    authenticationToken?: { [key: string]: any; } | null;
    activationMessage?: string | null;
    message?: string | null;
    userFullName?: string | null;
}

export class RefreshTokenDTO implements IRefreshTokenDTO {
    id?: number | null;
    accessToken?: string | null;
    token?: string | null;
    expires?: Date | null;
    userId?: string | null;
    readonly active?: boolean | null;

    constructor(data?: IRefreshTokenDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.accessToken = _data["AccessToken"] !== undefined ? _data["AccessToken"] : <any>null;
            this.token = _data["Token"] !== undefined ? _data["Token"] : <any>null;
            this.expires = _data["Expires"] ? new Date(_data["Expires"].toString()) : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            (<any>this).active = _data["Active"] !== undefined ? _data["Active"] : <any>null;
        }
    }

    static fromJS(data: any): RefreshTokenDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["AccessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["Token"] = this.token !== undefined ? this.token : <any>null;
        data["Expires"] = this.expires ? this.expires.toISOString() : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Active"] = this.active !== undefined ? this.active : <any>null;
        return data;
    }
}

export interface IRefreshTokenDTO {
    id?: number | null;
    accessToken?: string | null;
    token?: string | null;
    expires?: Date | null;
    userId?: string | null;
    active?: boolean | null;
}

export class PasswordViewModel implements IPasswordViewModel {
    oldPassword?: string | null;
    newPassword!: string;
    confirmPassword?: string | null;
    userActivationToken?: string | null;
    result?: string | null;
    succeeded?: boolean | null;

    constructor(data?: IPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oldPassword = _data["OldPassword"] !== undefined ? _data["OldPassword"] : <any>null;
            this.newPassword = _data["NewPassword"] !== undefined ? _data["NewPassword"] : <any>null;
            this.confirmPassword = _data["ConfirmPassword"] !== undefined ? _data["ConfirmPassword"] : <any>null;
            this.userActivationToken = _data["UserActivationToken"] !== undefined ? _data["UserActivationToken"] : <any>null;
            this.result = _data["Result"] !== undefined ? _data["Result"] : <any>null;
            this.succeeded = _data["Succeeded"] !== undefined ? _data["Succeeded"] : <any>null;
        }
    }

    static fromJS(data: any): PasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OldPassword"] = this.oldPassword !== undefined ? this.oldPassword : <any>null;
        data["NewPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        data["ConfirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : <any>null;
        data["UserActivationToken"] = this.userActivationToken !== undefined ? this.userActivationToken : <any>null;
        data["Result"] = this.result !== undefined ? this.result : <any>null;
        data["Succeeded"] = this.succeeded !== undefined ? this.succeeded : <any>null;
        return data;
    }
}

export interface IPasswordViewModel {
    oldPassword?: string | null;
    newPassword: string;
    confirmPassword?: string | null;
    userActivationToken?: string | null;
    result?: string | null;
    succeeded?: boolean | null;
}

export class PrivacyPolicyVM implements IPrivacyPolicyVM {
    isPrivacyPolicyAgreed?: boolean | null;
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    hasExpressedPermission?: boolean | null;

    constructor(data?: IPrivacyPolicyVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isPrivacyPolicyAgreed = _data["IsPrivacyPolicyAgreed"] !== undefined ? _data["IsPrivacyPolicyAgreed"] : <any>null;
            if (Array.isArray(_data["UserEmailPreferenceList"])) {
                this.userEmailPreferenceList = [] as any;
                for (let item of _data["UserEmailPreferenceList"])
                    this.userEmailPreferenceList!.push(UserEmailPreferenceDTO.fromJS(item));
            }
            else {
                this.userEmailPreferenceList = <any>null;
            }
            this.hasExpressedPermission = _data["HasExpressedPermission"] !== undefined ? _data["HasExpressedPermission"] : <any>null;
        }
    }

    static fromJS(data: any): PrivacyPolicyVM {
        data = typeof data === 'object' ? data : {};
        let result = new PrivacyPolicyVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsPrivacyPolicyAgreed"] = this.isPrivacyPolicyAgreed !== undefined ? this.isPrivacyPolicyAgreed : <any>null;
        if (Array.isArray(this.userEmailPreferenceList)) {
            data["UserEmailPreferenceList"] = [];
            for (let item of this.userEmailPreferenceList)
                data["UserEmailPreferenceList"].push(item.toJSON());
        }
        data["HasExpressedPermission"] = this.hasExpressedPermission !== undefined ? this.hasExpressedPermission : <any>null;
        return data;
    }
}

export interface IPrivacyPolicyVM {
    isPrivacyPolicyAgreed?: boolean | null;
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    hasExpressedPermission?: boolean | null;
}

export class UserEmailPreferenceDTO implements IUserEmailPreferenceDTO {
    isActive?: boolean | null;
    userEmailPreferenceId?: number | null;
    emailPreferenceId?: number | null;
    name?: string | null;
    contactListId?: string | null;

    constructor(data?: IUserEmailPreferenceDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.userEmailPreferenceId = _data["UserEmailPreferenceId"] !== undefined ? _data["UserEmailPreferenceId"] : <any>null;
            this.emailPreferenceId = _data["EmailPreferenceId"] !== undefined ? _data["EmailPreferenceId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.contactListId = _data["ContactListId"] !== undefined ? _data["ContactListId"] : <any>null;
        }
    }

    static fromJS(data: any): UserEmailPreferenceDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserEmailPreferenceDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["UserEmailPreferenceId"] = this.userEmailPreferenceId !== undefined ? this.userEmailPreferenceId : <any>null;
        data["EmailPreferenceId"] = this.emailPreferenceId !== undefined ? this.emailPreferenceId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["ContactListId"] = this.contactListId !== undefined ? this.contactListId : <any>null;
        return data;
    }
}

export interface IUserEmailPreferenceDTO {
    isActive?: boolean | null;
    userEmailPreferenceId?: number | null;
    emailPreferenceId?: number | null;
    name?: string | null;
    contactListId?: string | null;
}

export class IdentityResult implements IIdentityResult {
    readonly succeeded?: boolean | null;
    readonly errors?: string[] | null;

    constructor(data?: IIdentityResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).succeeded = _data["Succeeded"] !== undefined ? _data["Succeeded"] : <any>null;
            if (Array.isArray(_data["Errors"])) {
                (<any>this).errors = [] as any;
                for (let item of _data["Errors"])
                    (<any>this).errors!.push(item);
            }
            else {
                (<any>this).errors = <any>null;
            }
        }
    }

    static fromJS(data: any): IdentityResult {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Succeeded"] = this.succeeded !== undefined ? this.succeeded : <any>null;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        return data;
    }
}

export interface IIdentityResult {
    succeeded?: boolean | null;
    errors?: string[] | null;
}

export class RegisteredEventViewModel implements IRegisteredEventViewModel {
    events?: RegisteredEventMobileDTO[] | null;
    canShowMembership?: boolean | null;

    constructor(data?: IRegisteredEventViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Events"])) {
                this.events = [] as any;
                for (let item of _data["Events"])
                    this.events!.push(RegisteredEventMobileDTO.fromJS(item));
            }
            else {
                this.events = <any>null;
            }
            this.canShowMembership = _data["CanShowMembership"] !== undefined ? _data["CanShowMembership"] : <any>null;
        }
    }

    static fromJS(data: any): RegisteredEventViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisteredEventViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.events)) {
            data["Events"] = [];
            for (let item of this.events)
                data["Events"].push(item.toJSON());
        }
        data["CanShowMembership"] = this.canShowMembership !== undefined ? this.canShowMembership : <any>null;
        return data;
    }
}

export interface IRegisteredEventViewModel {
    events?: RegisteredEventMobileDTO[] | null;
    canShowMembership?: boolean | null;
}

export class RegisteredEventMobileDTO implements IRegisteredEventMobileDTO {
    id?: number | null;
    shortCode?: string | null;
    name?: string | null;
    from?: Date | null;
    to?: Date | null;
    eventRegistrationId?: number | null;

    constructor(data?: IRegisteredEventMobileDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.from = _data["From"] ? new Date(_data["From"].toString()) : <any>null;
            this.to = _data["To"] ? new Date(_data["To"].toString()) : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
        }
    }

    static fromJS(data: any): RegisteredEventMobileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisteredEventMobileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["From"] = this.from ? this.from.toISOString() : <any>null;
        data["To"] = this.to ? this.to.toISOString() : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        return data;
    }
}

export interface IRegisteredEventMobileDTO {
    id?: number | null;
    shortCode?: string | null;
    name?: string | null;
    from?: Date | null;
    to?: Date | null;
    eventRegistrationId?: number | null;
}

export class DocumentMobileViewModel implements IDocumentMobileViewModel {
    name?: string | null;
    id?: number | null;
    userId?: string | null;
    documentType?: number | null;

    constructor(data?: IDocumentMobileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.documentType = _data["DocumentType"] !== undefined ? _data["DocumentType"] : <any>null;
        }
    }

    static fromJS(data: any): DocumentMobileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentMobileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["DocumentType"] = this.documentType !== undefined ? this.documentType : <any>null;
        return data;
    }
}

export interface IDocumentMobileViewModel {
    name?: string | null;
    id?: number | null;
    userId?: string | null;
    documentType?: number | null;
}

export class FileUploadDTO implements IFileUploadDTO {
    requestedUserId?: string | null;
    fileName?: string | null;
    moduleId?: number | null;
    documentTypeId?: number | null;
    croppedContent?: string | null;
    applicationId?: number | null;

    constructor(data?: IFileUploadDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestedUserId = _data["RequestedUserId"] !== undefined ? _data["RequestedUserId"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            this.documentTypeId = _data["DocumentTypeId"] !== undefined ? _data["DocumentTypeId"] : <any>null;
            this.croppedContent = _data["CroppedContent"] !== undefined ? _data["CroppedContent"] : <any>null;
            this.applicationId = _data["ApplicationId"] !== undefined ? _data["ApplicationId"] : <any>null;
        }
    }

    static fromJS(data: any): FileUploadDTO {
        data = typeof data === 'object' ? data : {};
        let result = new FileUploadDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RequestedUserId"] = this.requestedUserId !== undefined ? this.requestedUserId : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        data["DocumentTypeId"] = this.documentTypeId !== undefined ? this.documentTypeId : <any>null;
        data["CroppedContent"] = this.croppedContent !== undefined ? this.croppedContent : <any>null;
        data["ApplicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        return data;
    }
}

export interface IFileUploadDTO {
    requestedUserId?: string | null;
    fileName?: string | null;
    moduleId?: number | null;
    documentTypeId?: number | null;
    croppedContent?: string | null;
    applicationId?: number | null;
}

export class Document implements IDocument {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    fileName?: string | null;
    comments?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    moduleId?: number | null;
    documentTypeId?: number | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    isFileGenerated?: boolean | null;
    isVisableToUser?: boolean | null;
    attendanceGroupId?: number | null;
    membershipCertificateTemplateId?: number | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived[] | null;
    eventTicket?: EventTicket[] | null;
    documentType?: DocumentType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    documentMapping?: DocumentMapping[] | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate | null;

    constructor(data?: IDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifedOn = _data["ModifedOn"] ? new Date(_data["ModifedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            this.documentTypeId = _data["DocumentTypeId"] !== undefined ? _data["DocumentTypeId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.isFileGenerated = _data["IsFileGenerated"] !== undefined ? _data["IsFileGenerated"] : <any>null;
            this.isVisableToUser = _data["IsVisableToUser"] !== undefined ? _data["IsVisableToUser"] : <any>null;
            this.attendanceGroupId = _data["AttendanceGroupId"] !== undefined ? _data["AttendanceGroupId"] : <any>null;
            this.membershipCertificateTemplateId = _data["MembershipCertificateTemplateId"] !== undefined ? _data["MembershipCertificateTemplateId"] : <any>null;
            if (Array.isArray(_data["DeclarationOfInterest"])) {
                this.declarationOfInterest = [] as any;
                for (let item of _data["DeclarationOfInterest"])
                    this.declarationOfInterest!.push(DeclarationOfInterest.fromJS(item));
            }
            else {
                this.declarationOfInterest = <any>null;
            }
            if (Array.isArray(_data["DeclarationOfInterestArchived"])) {
                this.declarationOfInterestArchived = [] as any;
                for (let item of _data["DeclarationOfInterestArchived"])
                    this.declarationOfInterestArchived!.push(DeclarationOfInterestArchived.fromJS(item));
            }
            else {
                this.declarationOfInterestArchived = <any>null;
            }
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
            this.documentType = _data["DocumentType"] ? DocumentType.fromJS(_data["DocumentType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            if (Array.isArray(_data["DocumentMapping"])) {
                this.documentMapping = [] as any;
                for (let item of _data["DocumentMapping"])
                    this.documentMapping!.push(DocumentMapping.fromJS(item));
            }
            else {
                this.documentMapping = <any>null;
            }
            if (Array.isArray(_data["JournalRoleUserMapping"])) {
                this.journalRoleUserMapping = [] as any;
                for (let item of _data["JournalRoleUserMapping"])
                    this.journalRoleUserMapping!.push(JournalRoleUserMapping.fromJS(item));
            }
            else {
                this.journalRoleUserMapping = <any>null;
            }
            this.membershipCertificateTemplate = _data["MembershipCertificateTemplate"] ? MembershipCertificateTemplate.fromJS(_data["MembershipCertificateTemplate"]) : <any>null;
        }
    }

    static fromJS(data: any): Document {
        data = typeof data === 'object' ? data : {};
        let result = new Document();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifedOn"] = this.modifedOn ? this.modifedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        data["DocumentTypeId"] = this.documentTypeId !== undefined ? this.documentTypeId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["IsFileGenerated"] = this.isFileGenerated !== undefined ? this.isFileGenerated : <any>null;
        data["IsVisableToUser"] = this.isVisableToUser !== undefined ? this.isVisableToUser : <any>null;
        data["AttendanceGroupId"] = this.attendanceGroupId !== undefined ? this.attendanceGroupId : <any>null;
        data["MembershipCertificateTemplateId"] = this.membershipCertificateTemplateId !== undefined ? this.membershipCertificateTemplateId : <any>null;
        if (Array.isArray(this.declarationOfInterest)) {
            data["DeclarationOfInterest"] = [];
            for (let item of this.declarationOfInterest)
                data["DeclarationOfInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationOfInterestArchived)) {
            data["DeclarationOfInterestArchived"] = [];
            for (let item of this.declarationOfInterestArchived)
                data["DeclarationOfInterestArchived"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        data["DocumentType"] = this.documentType ? this.documentType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        if (Array.isArray(this.documentMapping)) {
            data["DocumentMapping"] = [];
            for (let item of this.documentMapping)
                data["DocumentMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRoleUserMapping)) {
            data["JournalRoleUserMapping"] = [];
            for (let item of this.journalRoleUserMapping)
                data["JournalRoleUserMapping"].push(item.toJSON());
        }
        data["MembershipCertificateTemplate"] = this.membershipCertificateTemplate ? this.membershipCertificateTemplate.toJSON() : <any>null;
        return data;
    }
}

export interface IDocument {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    fileName?: string | null;
    comments?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    moduleId?: number | null;
    documentTypeId?: number | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    isFileGenerated?: boolean | null;
    isVisableToUser?: boolean | null;
    attendanceGroupId?: number | null;
    membershipCertificateTemplateId?: number | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived[] | null;
    eventTicket?: EventTicket[] | null;
    documentType?: DocumentType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    documentMapping?: DocumentMapping[] | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate | null;
}

export class DeclarationOfInterest implements IDeclarationOfInterest {
    id?: number | null;
    version?: number | null;
    declarationTemplateId?: number | null;
    documentId?: number | null;
    declarationDate?: Date | null;
    hasConflict?: boolean | null;
    isSubmitted?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    user?: User | null;
    declarationTemplate?: DeclarationTemplate | null;
    document?: Document | null;
    user1?: User | null;
    userNomination?: UserNomination[] | null;

    constructor(data?: IDeclarationOfInterest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.version = _data["Version"] !== undefined ? _data["Version"] : <any>null;
            this.declarationTemplateId = _data["DeclarationTemplateId"] !== undefined ? _data["DeclarationTemplateId"] : <any>null;
            this.documentId = _data["DocumentId"] !== undefined ? _data["DocumentId"] : <any>null;
            this.declarationDate = _data["DeclarationDate"] ? new Date(_data["DeclarationDate"].toString()) : <any>null;
            this.hasConflict = _data["HasConflict"] !== undefined ? _data["HasConflict"] : <any>null;
            this.isSubmitted = _data["IsSubmitted"] !== undefined ? _data["IsSubmitted"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["ConflictOfInterest"])) {
                this.conflictOfInterest = [] as any;
                for (let item of _data["ConflictOfInterest"])
                    this.conflictOfInterest!.push(ConflictOfInterest.fromJS(item));
            }
            else {
                this.conflictOfInterest = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.declarationTemplate = _data["DeclarationTemplate"] ? DeclarationTemplate.fromJS(_data["DeclarationTemplate"]) : <any>null;
            this.document = _data["Document"] ? Document.fromJS(_data["Document"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["UserNomination"])) {
                this.userNomination = [] as any;
                for (let item of _data["UserNomination"])
                    this.userNomination!.push(UserNomination.fromJS(item));
            }
            else {
                this.userNomination = <any>null;
            }
        }
    }

    static fromJS(data: any): DeclarationOfInterest {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarationOfInterest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Version"] = this.version !== undefined ? this.version : <any>null;
        data["DeclarationTemplateId"] = this.declarationTemplateId !== undefined ? this.declarationTemplateId : <any>null;
        data["DocumentId"] = this.documentId !== undefined ? this.documentId : <any>null;
        data["DeclarationDate"] = this.declarationDate ? this.declarationDate.toISOString() : <any>null;
        data["HasConflict"] = this.hasConflict !== undefined ? this.hasConflict : <any>null;
        data["IsSubmitted"] = this.isSubmitted !== undefined ? this.isSubmitted : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.conflictOfInterest)) {
            data["ConflictOfInterest"] = [];
            for (let item of this.conflictOfInterest)
                data["ConflictOfInterest"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["DeclarationTemplate"] = this.declarationTemplate ? this.declarationTemplate.toJSON() : <any>null;
        data["Document"] = this.document ? this.document.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.userNomination)) {
            data["UserNomination"] = [];
            for (let item of this.userNomination)
                data["UserNomination"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeclarationOfInterest {
    id?: number | null;
    version?: number | null;
    declarationTemplateId?: number | null;
    documentId?: number | null;
    declarationDate?: Date | null;
    hasConflict?: boolean | null;
    isSubmitted?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    user?: User | null;
    declarationTemplate?: DeclarationTemplate | null;
    document?: Document | null;
    user1?: User | null;
    userNomination?: UserNomination[] | null;
}

export class DeclarationOfInterestArchived implements IDeclarationOfInterestArchived {
    id?: number | null;
    version?: number | null;
    declarationTemplateId?: number | null;
    documentId?: number | null;
    declarationDate?: Date | null;
    hasConflict?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    user?: User | null;
    document?: Document | null;
    user1?: User | null;

    constructor(data?: IDeclarationOfInterestArchived) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.version = _data["Version"] !== undefined ? _data["Version"] : <any>null;
            this.declarationTemplateId = _data["DeclarationTemplateId"] !== undefined ? _data["DeclarationTemplateId"] : <any>null;
            this.documentId = _data["DocumentId"] !== undefined ? _data["DocumentId"] : <any>null;
            this.declarationDate = _data["DeclarationDate"] ? new Date(_data["DeclarationDate"].toString()) : <any>null;
            this.hasConflict = _data["HasConflict"] !== undefined ? _data["HasConflict"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["ConflictOfInterestArchived"])) {
                this.conflictOfInterestArchived = [] as any;
                for (let item of _data["ConflictOfInterestArchived"])
                    this.conflictOfInterestArchived!.push(ConflictOfInterestArchived.fromJS(item));
            }
            else {
                this.conflictOfInterestArchived = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.document = _data["Document"] ? Document.fromJS(_data["Document"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): DeclarationOfInterestArchived {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarationOfInterestArchived();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Version"] = this.version !== undefined ? this.version : <any>null;
        data["DeclarationTemplateId"] = this.declarationTemplateId !== undefined ? this.declarationTemplateId : <any>null;
        data["DocumentId"] = this.documentId !== undefined ? this.documentId : <any>null;
        data["DeclarationDate"] = this.declarationDate ? this.declarationDate.toISOString() : <any>null;
        data["HasConflict"] = this.hasConflict !== undefined ? this.hasConflict : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.conflictOfInterestArchived)) {
            data["ConflictOfInterestArchived"] = [];
            for (let item of this.conflictOfInterestArchived)
                data["ConflictOfInterestArchived"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["Document"] = this.document ? this.document.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IDeclarationOfInterestArchived {
    id?: number | null;
    version?: number | null;
    declarationTemplateId?: number | null;
    documentId?: number | null;
    declarationDate?: Date | null;
    hasConflict?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    user?: User | null;
    document?: Document | null;
    user1?: User | null;
}

export class EventTicket implements IEventTicket {
    id?: number | null;
    feeId?: number | null;
    eventRegistrationId?: number | null;
    userId?: string | null;
    exhibitorPersonId?: number | null;
    ticketStatus?: number | null;
    isAttended?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    confirmationLetterId?: number | null;
    mergedUserId?: string | null;
    duplicateEventTicketId?: number | null;
    duplicateEventRegistrationId?: number | null;
    parentFeeId?: number | null;
    accompanyPersonId?: number | null;
    whiteListId?: number | null;
    lastSyncOn?: Date | null;
    serviceDeletedOn?: Date | null;
    accompanyPerson?: AccompanyPerson | null;
    document?: Document | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    eventFee?: EventFee | null;
    eventFee1?: EventFee | null;
    eventRegistration?: EventRegistration | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;
    eventTicketCreditNoteMapping?: EventTicketCreditNoteMapping[] | null;
    eventTicketPaymentDemand?: EventTicketPaymentDemand[] | null;

    constructor(data?: IEventTicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.exhibitorPersonId = _data["ExhibitorPersonId"] !== undefined ? _data["ExhibitorPersonId"] : <any>null;
            this.ticketStatus = _data["TicketStatus"] !== undefined ? _data["TicketStatus"] : <any>null;
            this.isAttended = _data["IsAttended"] !== undefined ? _data["IsAttended"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.confirmationLetterId = _data["ConfirmationLetterId"] !== undefined ? _data["ConfirmationLetterId"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.duplicateEventTicketId = _data["DuplicateEventTicketId"] !== undefined ? _data["DuplicateEventTicketId"] : <any>null;
            this.duplicateEventRegistrationId = _data["DuplicateEventRegistrationId"] !== undefined ? _data["DuplicateEventRegistrationId"] : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
            this.accompanyPersonId = _data["AccompanyPersonId"] !== undefined ? _data["AccompanyPersonId"] : <any>null;
            this.whiteListId = _data["WhiteListId"] !== undefined ? _data["WhiteListId"] : <any>null;
            this.lastSyncOn = _data["LastSyncOn"] ? new Date(_data["LastSyncOn"].toString()) : <any>null;
            this.serviceDeletedOn = _data["ServiceDeletedOn"] ? new Date(_data["ServiceDeletedOn"].toString()) : <any>null;
            this.accompanyPerson = _data["AccompanyPerson"] ? AccompanyPerson.fromJS(_data["AccompanyPerson"]) : <any>null;
            this.document = _data["Document"] ? Document.fromJS(_data["Document"]) : <any>null;
            if (Array.isArray(_data["EventExhibitorAccess"])) {
                this.eventExhibitorAccess = [] as any;
                for (let item of _data["EventExhibitorAccess"])
                    this.eventExhibitorAccess!.push(EventExhibitorAccess.fromJS(item));
            }
            else {
                this.eventExhibitorAccess = <any>null;
            }
            this.eventExhibitorPerson = _data["EventExhibitorPerson"] ? EventExhibitorPerson.fromJS(_data["EventExhibitorPerson"]) : <any>null;
            this.eventFee = _data["EventFee"] ? EventFee.fromJS(_data["EventFee"]) : <any>null;
            this.eventFee1 = _data["EventFee1"] ? EventFee.fromJS(_data["EventFee1"]) : <any>null;
            this.eventRegistration = _data["EventRegistration"] ? EventRegistration.fromJS(_data["EventRegistration"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.user3 = _data["User3"] ? User.fromJS(_data["User3"]) : <any>null;
            if (Array.isArray(_data["EventTicketCreditNoteMapping"])) {
                this.eventTicketCreditNoteMapping = [] as any;
                for (let item of _data["EventTicketCreditNoteMapping"])
                    this.eventTicketCreditNoteMapping!.push(EventTicketCreditNoteMapping.fromJS(item));
            }
            else {
                this.eventTicketCreditNoteMapping = <any>null;
            }
            if (Array.isArray(_data["EventTicketPaymentDemand"])) {
                this.eventTicketPaymentDemand = [] as any;
                for (let item of _data["EventTicketPaymentDemand"])
                    this.eventTicketPaymentDemand!.push(EventTicketPaymentDemand.fromJS(item));
            }
            else {
                this.eventTicketPaymentDemand = <any>null;
            }
        }
    }

    static fromJS(data: any): EventTicket {
        data = typeof data === 'object' ? data : {};
        let result = new EventTicket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["ExhibitorPersonId"] = this.exhibitorPersonId !== undefined ? this.exhibitorPersonId : <any>null;
        data["TicketStatus"] = this.ticketStatus !== undefined ? this.ticketStatus : <any>null;
        data["IsAttended"] = this.isAttended !== undefined ? this.isAttended : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["ConfirmationLetterId"] = this.confirmationLetterId !== undefined ? this.confirmationLetterId : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["DuplicateEventTicketId"] = this.duplicateEventTicketId !== undefined ? this.duplicateEventTicketId : <any>null;
        data["DuplicateEventRegistrationId"] = this.duplicateEventRegistrationId !== undefined ? this.duplicateEventRegistrationId : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        data["AccompanyPersonId"] = this.accompanyPersonId !== undefined ? this.accompanyPersonId : <any>null;
        data["WhiteListId"] = this.whiteListId !== undefined ? this.whiteListId : <any>null;
        data["LastSyncOn"] = this.lastSyncOn ? this.lastSyncOn.toISOString() : <any>null;
        data["ServiceDeletedOn"] = this.serviceDeletedOn ? this.serviceDeletedOn.toISOString() : <any>null;
        data["AccompanyPerson"] = this.accompanyPerson ? this.accompanyPerson.toJSON() : <any>null;
        data["Document"] = this.document ? this.document.toJSON() : <any>null;
        if (Array.isArray(this.eventExhibitorAccess)) {
            data["EventExhibitorAccess"] = [];
            for (let item of this.eventExhibitorAccess)
                data["EventExhibitorAccess"].push(item.toJSON());
        }
        data["EventExhibitorPerson"] = this.eventExhibitorPerson ? this.eventExhibitorPerson.toJSON() : <any>null;
        data["EventFee"] = this.eventFee ? this.eventFee.toJSON() : <any>null;
        data["EventFee1"] = this.eventFee1 ? this.eventFee1.toJSON() : <any>null;
        data["EventRegistration"] = this.eventRegistration ? this.eventRegistration.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["User3"] = this.user3 ? this.user3.toJSON() : <any>null;
        if (Array.isArray(this.eventTicketCreditNoteMapping)) {
            data["EventTicketCreditNoteMapping"] = [];
            for (let item of this.eventTicketCreditNoteMapping)
                data["EventTicketCreditNoteMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicketPaymentDemand)) {
            data["EventTicketPaymentDemand"] = [];
            for (let item of this.eventTicketPaymentDemand)
                data["EventTicketPaymentDemand"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventTicket {
    id?: number | null;
    feeId?: number | null;
    eventRegistrationId?: number | null;
    userId?: string | null;
    exhibitorPersonId?: number | null;
    ticketStatus?: number | null;
    isAttended?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    confirmationLetterId?: number | null;
    mergedUserId?: string | null;
    duplicateEventTicketId?: number | null;
    duplicateEventRegistrationId?: number | null;
    parentFeeId?: number | null;
    accompanyPersonId?: number | null;
    whiteListId?: number | null;
    lastSyncOn?: Date | null;
    serviceDeletedOn?: Date | null;
    accompanyPerson?: AccompanyPerson | null;
    document?: Document | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    eventFee?: EventFee | null;
    eventFee1?: EventFee | null;
    eventRegistration?: EventRegistration | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;
    eventTicketCreditNoteMapping?: EventTicketCreditNoteMapping[] | null;
    eventTicketPaymentDemand?: EventTicketPaymentDemand[] | null;
}

export class DocumentType implements IDocumentType {
    id?: number | null;
    name?: string | null;
    document?: Document[] | null;

    constructor(data?: IDocumentType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["Document"])) {
                this.document = [] as any;
                for (let item of _data["Document"])
                    this.document!.push(Document.fromJS(item));
            }
            else {
                this.document = <any>null;
            }
        }
    }

    static fromJS(data: any): DocumentType {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.document)) {
            data["Document"] = [];
            for (let item of this.document)
                data["Document"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDocumentType {
    id?: number | null;
    name?: string | null;
    document?: Document[] | null;
}

export class User implements IUser {
    id?: string | null;
    userName?: string | null;
    password?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    securityStamp?: string | null;
    emailConfirmed?: boolean | null;
    isVerficationEmailSent?: boolean | null;
    accessRights?: number | null;
    phoneNumberConfirmed?: boolean | null;
    twoFactorEnabled?: boolean | null;
    lockoutEnabled?: boolean | null;
    accessFailedCount?: number | null;
    lockoutEndDateUtc?: Date | null;
    userActivationToken?: string | null;
    email?: string | null;
    mobile?: string | null;
    status?: number | null;
    attestationTypeId?: number | null;
    lastLoginDate?: Date | null;
    accountId?: number | null;
    impersonateUserId?: string | null;
    phone?: string | null;
    mergedUserId?: string | null;
    isMerged?: boolean | null;
    emailModifiedOn?: Date | null;
    appPin?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    accompanyPerson?: AccompanyPerson[] | null;
    accompanyPerson1?: AccompanyPerson[] | null;
    altaPayUserDeviceMapping?: AltaPayUserDeviceMapping[] | null;
    attestationType?: AttestationType | null;
    auditLog?: AuditLog[] | null;
    auditLog1?: AuditLog[] | null;
    auditLog2?: AuditLog[] | null;
    bankDetail?: BankDetail[] | null;
    bankDetail1?: BankDetail[] | null;
    committee?: Committee[] | null;
    committee1?: Committee[] | null;
    committee2?: Committee[] | null;
    committeeList?: CommitteeList[] | null;
    committeeList1?: CommitteeList[] | null;
    committeeTaskForceRole?: CommitteeTaskForceRole[] | null;
    committeeTaskForceRole1?: CommitteeTaskForceRole[] | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterest1?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    conflictOfInterestArchived1?: ConflictOfInterestArchived[] | null;
    creditNote?: CreditNote[] | null;
    creditNote1?: CreditNote[] | null;
    creditNoteDetail?: CreditNoteDetail[] | null;
    creditNoteDetail1?: CreditNoteDetail[] | null;
    currentMembership?: CurrentMembership | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    declarationOfInterest1?: DeclarationOfInterest[] | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived[] | null;
    declarationOfInterestArchived1?: DeclarationOfInterestArchived[] | null;
    declarationTemplate?: DeclarationTemplate[] | null;
    declarationTemplate1?: DeclarationTemplate[] | null;
    deviceDetails?: DeviceDetails[] | null;
    deviceDetails1?: DeviceDetails[] | null;
    discount?: Discount[] | null;
    discount1?: Discount[] | null;
    document?: Document[] | null;
    document1?: Document[] | null;
    document2?: Document[] | null;
    emailLog?: EmailLog[] | null;
    emailLog1?: EmailLog[] | null;
    emailPreference?: EmailPreference[] | null;
    emailPreference1?: EmailPreference[] | null;
    emailTypeSubGroup?: EmailTypeSubGroup[] | null;
    emailTypeSubGroup1?: EmailTypeSubGroup[] | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;
    emailTypeTranslation1?: EmailTypeTranslation[] | null;
    event?: Event[] | null;
    event1?: Event[] | null;
    eventArtifact?: EventArtifact[] | null;
    eventArtifact1?: EventArtifact[] | null;
    eventAttendance?: EventAttendance[] | null;
    eventBadge?: EventBadge[] | null;
    eventDeadLine?: EventDeadLine[] | null;
    eventDeadLine1?: EventDeadLine[] | null;
    eventDiscount?: EventDiscount[] | null;
    eventDiscount1?: EventDiscount[] | null;
    eventDiscountCouponCode?: EventDiscountCouponCode[] | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    eventDiscountCouponCodeMapping1?: EventDiscountCouponCodeMapping[] | null;
    eventExbSymposia?: EventExbSymposia[] | null;
    eventExbSymposia1?: EventExbSymposia[] | null;
    eventExhibitor?: EventExhibitor[] | null;
    eventExhibitor1?: EventExhibitor[] | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorAccess1?: EventExhibitorAccess[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    eventExhibitorProduct1?: EventExhibitorProduct[] | null;
    eventFee?: EventFee[] | null;
    eventFee1?: EventFee[] | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;
    eventFeeAttendanceGroup1?: EventFeeAttendanceGroup[] | null;
    eventGroup?: EventGroup[] | null;
    eventGroup1?: EventGroup[] | null;
    eventGroup2?: EventGroup[] | null;
    eventGroup3?: EventGroup[] | null;
    eventGroupMember?: EventGroupMember[] | null;
    eventGroupMember1?: EventGroupMember[] | null;
    eventGroupMember2?: EventGroupMember[] | null;
    eventGroupMember3?: EventGroupMember[] | null;
    eventRegistration?: EventRegistration[] | null;
    eventRegistration1?: EventRegistration[] | null;
    eventTemplate?: EventTemplate[] | null;
    eventTemplate1?: EventTemplate[] | null;
    eventTempStaffMapping?: EventTempStaffMapping[] | null;
    eventTicket?: EventTicket[] | null;
    eventTicket1?: EventTicket[] | null;
    eventTicket2?: EventTicket[] | null;
    eventTicket3?: EventTicket[] | null;
    exhibitor?: Exhibitor[] | null;
    exhibitorDeviceDetails?: ExhibitorDeviceDetails[] | null;
    exhibitorDeviceDetails1?: ExhibitorDeviceDetails[] | null;
    invoice?: Invoice[] | null;
    invoice1?: Invoice[] | null;
    journalRole?: JournalRole[] | null;
    journalRole1?: JournalRole[] | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;
    journalRoleUserMapping1?: JournalRoleUserMapping[] | null;
    journalRoleUserMapping2?: JournalRoleUserMapping[] | null;
    membershipApplication?: MembershipApplication[] | null;
    membershipApplication1?: MembershipApplication[] | null;
    membershipApplication2?: MembershipApplication[] | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;
    membershipAutoRenewal1?: MembershipAutoRenewal[] | null;
    membershipAutoRenewal2?: MembershipAutoRenewal[] | null;
    membershipType?: MembershipType[] | null;
    memberSubscription?: MemberSubscription[] | null;
    memberSubscription1?: MemberSubscription[] | null;
    memberSubscription2?: MemberSubscription[] | null;
    notification?: Notification[] | null;
    notification1?: Notification[] | null;
    notification2?: Notification[] | null;
    onsiteUser?: OnsiteUser[] | null;
    organisation?: Organisation[] | null;
    organisation1?: Organisation[] | null;
    oUPChange?: OUPChange[] | null;
    oUPChange1?: OUPChange[] | null;
    paymentTransaction?: PaymentTransaction[] | null;
    paymentTransaction1?: PaymentTransaction[] | null;
    person?: Person | null;
    person1?: Person[] | null;
    person2?: Person[] | null;
    recentUsersByStaff?: RecentUsersByStaff[] | null;
    recentUsersByStaff1?: RecentUsersByStaff[] | null;
    search?: Search[] | null;
    selfNomination?: SelfNomination[] | null;
    selfNomination1?: SelfNomination[] | null;
    selfNomination2?: SelfNomination[] | null;
    sessionAccessory?: SessionAccessory[] | null;
    sessionAccessory1?: SessionAccessory[] | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;
    sessionAccessoryMapping1?: SessionAccessoryMapping[] | null;
    userEventArtifact?: UserEventArtifact[] | null;
    userEventArtifact1?: UserEventArtifact[] | null;
    userEventArtifact2?: UserEventArtifact[] | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;
    user1?: User[] | null;
    user2?: User | null;
    userStatus?: UserStatus | null;
    userAddress?: UserAddress[] | null;
    userAddress1?: UserAddress[] | null;
    userAddress2?: UserAddress[] | null;
    userAffiliation?: UserAffiliation[] | null;
    userAffiliation1?: UserAffiliation[] | null;
    userArtefactManualApproved?: UserArtefactManualApproved[] | null;
    userClaim?: UserClaim[] | null;
    userConsentMailPreference?: UserConsentMailPreference[] | null;
    userConsentMailPreference1?: UserConsentMailPreference[] | null;
    userCorporateSession?: UserCorporateSession[] | null;
    userEmailPreference?: UserEmailPreference[] | null;
    userEmailPreference1?: UserEmailPreference[] | null;
    userEmailPreference2?: UserEmailPreference[] | null;
    userInterest?: UserInterest[] | null;
    userLogin?: UserLogin[] | null;
    userNomination?: UserNomination[] | null;
    userNomination1?: UserNomination[] | null;
    userNomination2?: UserNomination[] | null;
    userRole?: UserRole[] | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate[] | null;
    membershipCertificateTemplate1?: MembershipCertificateTemplate[] | null;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userName = _data["UserName"] !== undefined ? _data["UserName"] : <any>null;
            this.password = _data["Password"] !== undefined ? _data["Password"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.securityStamp = _data["SecurityStamp"] !== undefined ? _data["SecurityStamp"] : <any>null;
            this.emailConfirmed = _data["EmailConfirmed"] !== undefined ? _data["EmailConfirmed"] : <any>null;
            this.isVerficationEmailSent = _data["IsVerficationEmailSent"] !== undefined ? _data["IsVerficationEmailSent"] : <any>null;
            this.accessRights = _data["AccessRights"] !== undefined ? _data["AccessRights"] : <any>null;
            this.phoneNumberConfirmed = _data["PhoneNumberConfirmed"] !== undefined ? _data["PhoneNumberConfirmed"] : <any>null;
            this.twoFactorEnabled = _data["TwoFactorEnabled"] !== undefined ? _data["TwoFactorEnabled"] : <any>null;
            this.lockoutEnabled = _data["LockoutEnabled"] !== undefined ? _data["LockoutEnabled"] : <any>null;
            this.accessFailedCount = _data["AccessFailedCount"] !== undefined ? _data["AccessFailedCount"] : <any>null;
            this.lockoutEndDateUtc = _data["LockoutEndDateUtc"] ? new Date(_data["LockoutEndDateUtc"].toString()) : <any>null;
            this.userActivationToken = _data["UserActivationToken"] !== undefined ? _data["UserActivationToken"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.mobile = _data["Mobile"] !== undefined ? _data["Mobile"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.attestationTypeId = _data["AttestationTypeId"] !== undefined ? _data["AttestationTypeId"] : <any>null;
            this.lastLoginDate = _data["LastLoginDate"] ? new Date(_data["LastLoginDate"].toString()) : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.isMerged = _data["IsMerged"] !== undefined ? _data["IsMerged"] : <any>null;
            this.emailModifiedOn = _data["EmailModifiedOn"] ? new Date(_data["EmailModifiedOn"].toString()) : <any>null;
            this.appPin = _data["AppPin"] !== undefined ? _data["AppPin"] : <any>null;
            this.contactModifiedOn = _data["ContactModifiedOn"] ? new Date(_data["ContactModifiedOn"].toString()) : <any>null;
            this.contactLastSyncOn = _data["ContactLastSyncOn"] ? new Date(_data["ContactLastSyncOn"].toString()) : <any>null;
            if (Array.isArray(_data["AccompanyPerson"])) {
                this.accompanyPerson = [] as any;
                for (let item of _data["AccompanyPerson"])
                    this.accompanyPerson!.push(AccompanyPerson.fromJS(item));
            }
            else {
                this.accompanyPerson = <any>null;
            }
            if (Array.isArray(_data["AccompanyPerson1"])) {
                this.accompanyPerson1 = [] as any;
                for (let item of _data["AccompanyPerson1"])
                    this.accompanyPerson1!.push(AccompanyPerson.fromJS(item));
            }
            else {
                this.accompanyPerson1 = <any>null;
            }
            if (Array.isArray(_data["AltaPayUserDeviceMapping"])) {
                this.altaPayUserDeviceMapping = [] as any;
                for (let item of _data["AltaPayUserDeviceMapping"])
                    this.altaPayUserDeviceMapping!.push(AltaPayUserDeviceMapping.fromJS(item));
            }
            else {
                this.altaPayUserDeviceMapping = <any>null;
            }
            this.attestationType = _data["AttestationType"] ? AttestationType.fromJS(_data["AttestationType"]) : <any>null;
            if (Array.isArray(_data["AuditLog"])) {
                this.auditLog = [] as any;
                for (let item of _data["AuditLog"])
                    this.auditLog!.push(AuditLog.fromJS(item));
            }
            else {
                this.auditLog = <any>null;
            }
            if (Array.isArray(_data["AuditLog1"])) {
                this.auditLog1 = [] as any;
                for (let item of _data["AuditLog1"])
                    this.auditLog1!.push(AuditLog.fromJS(item));
            }
            else {
                this.auditLog1 = <any>null;
            }
            if (Array.isArray(_data["AuditLog2"])) {
                this.auditLog2 = [] as any;
                for (let item of _data["AuditLog2"])
                    this.auditLog2!.push(AuditLog.fromJS(item));
            }
            else {
                this.auditLog2 = <any>null;
            }
            if (Array.isArray(_data["BankDetail"])) {
                this.bankDetail = [] as any;
                for (let item of _data["BankDetail"])
                    this.bankDetail!.push(BankDetail.fromJS(item));
            }
            else {
                this.bankDetail = <any>null;
            }
            if (Array.isArray(_data["BankDetail1"])) {
                this.bankDetail1 = [] as any;
                for (let item of _data["BankDetail1"])
                    this.bankDetail1!.push(BankDetail.fromJS(item));
            }
            else {
                this.bankDetail1 = <any>null;
            }
            if (Array.isArray(_data["Committee"])) {
                this.committee = [] as any;
                for (let item of _data["Committee"])
                    this.committee!.push(Committee.fromJS(item));
            }
            else {
                this.committee = <any>null;
            }
            if (Array.isArray(_data["Committee1"])) {
                this.committee1 = [] as any;
                for (let item of _data["Committee1"])
                    this.committee1!.push(Committee.fromJS(item));
            }
            else {
                this.committee1 = <any>null;
            }
            if (Array.isArray(_data["Committee2"])) {
                this.committee2 = [] as any;
                for (let item of _data["Committee2"])
                    this.committee2!.push(Committee.fromJS(item));
            }
            else {
                this.committee2 = <any>null;
            }
            if (Array.isArray(_data["CommitteeList"])) {
                this.committeeList = [] as any;
                for (let item of _data["CommitteeList"])
                    this.committeeList!.push(CommitteeList.fromJS(item));
            }
            else {
                this.committeeList = <any>null;
            }
            if (Array.isArray(_data["CommitteeList1"])) {
                this.committeeList1 = [] as any;
                for (let item of _data["CommitteeList1"])
                    this.committeeList1!.push(CommitteeList.fromJS(item));
            }
            else {
                this.committeeList1 = <any>null;
            }
            if (Array.isArray(_data["CommitteeTaskForceRole"])) {
                this.committeeTaskForceRole = [] as any;
                for (let item of _data["CommitteeTaskForceRole"])
                    this.committeeTaskForceRole!.push(CommitteeTaskForceRole.fromJS(item));
            }
            else {
                this.committeeTaskForceRole = <any>null;
            }
            if (Array.isArray(_data["CommitteeTaskForceRole1"])) {
                this.committeeTaskForceRole1 = [] as any;
                for (let item of _data["CommitteeTaskForceRole1"])
                    this.committeeTaskForceRole1!.push(CommitteeTaskForceRole.fromJS(item));
            }
            else {
                this.committeeTaskForceRole1 = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterest"])) {
                this.conflictOfInterest = [] as any;
                for (let item of _data["ConflictOfInterest"])
                    this.conflictOfInterest!.push(ConflictOfInterest.fromJS(item));
            }
            else {
                this.conflictOfInterest = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterest1"])) {
                this.conflictOfInterest1 = [] as any;
                for (let item of _data["ConflictOfInterest1"])
                    this.conflictOfInterest1!.push(ConflictOfInterest.fromJS(item));
            }
            else {
                this.conflictOfInterest1 = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterestArchived"])) {
                this.conflictOfInterestArchived = [] as any;
                for (let item of _data["ConflictOfInterestArchived"])
                    this.conflictOfInterestArchived!.push(ConflictOfInterestArchived.fromJS(item));
            }
            else {
                this.conflictOfInterestArchived = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterestArchived1"])) {
                this.conflictOfInterestArchived1 = [] as any;
                for (let item of _data["ConflictOfInterestArchived1"])
                    this.conflictOfInterestArchived1!.push(ConflictOfInterestArchived.fromJS(item));
            }
            else {
                this.conflictOfInterestArchived1 = <any>null;
            }
            if (Array.isArray(_data["CreditNote"])) {
                this.creditNote = [] as any;
                for (let item of _data["CreditNote"])
                    this.creditNote!.push(CreditNote.fromJS(item));
            }
            else {
                this.creditNote = <any>null;
            }
            if (Array.isArray(_data["CreditNote1"])) {
                this.creditNote1 = [] as any;
                for (let item of _data["CreditNote1"])
                    this.creditNote1!.push(CreditNote.fromJS(item));
            }
            else {
                this.creditNote1 = <any>null;
            }
            if (Array.isArray(_data["CreditNoteDetail"])) {
                this.creditNoteDetail = [] as any;
                for (let item of _data["CreditNoteDetail"])
                    this.creditNoteDetail!.push(CreditNoteDetail.fromJS(item));
            }
            else {
                this.creditNoteDetail = <any>null;
            }
            if (Array.isArray(_data["CreditNoteDetail1"])) {
                this.creditNoteDetail1 = [] as any;
                for (let item of _data["CreditNoteDetail1"])
                    this.creditNoteDetail1!.push(CreditNoteDetail.fromJS(item));
            }
            else {
                this.creditNoteDetail1 = <any>null;
            }
            this.currentMembership = _data["CurrentMembership"] ? CurrentMembership.fromJS(_data["CurrentMembership"]) : <any>null;
            if (Array.isArray(_data["DeclarationOfInterest"])) {
                this.declarationOfInterest = [] as any;
                for (let item of _data["DeclarationOfInterest"])
                    this.declarationOfInterest!.push(DeclarationOfInterest.fromJS(item));
            }
            else {
                this.declarationOfInterest = <any>null;
            }
            if (Array.isArray(_data["DeclarationOfInterest1"])) {
                this.declarationOfInterest1 = [] as any;
                for (let item of _data["DeclarationOfInterest1"])
                    this.declarationOfInterest1!.push(DeclarationOfInterest.fromJS(item));
            }
            else {
                this.declarationOfInterest1 = <any>null;
            }
            if (Array.isArray(_data["DeclarationOfInterestArchived"])) {
                this.declarationOfInterestArchived = [] as any;
                for (let item of _data["DeclarationOfInterestArchived"])
                    this.declarationOfInterestArchived!.push(DeclarationOfInterestArchived.fromJS(item));
            }
            else {
                this.declarationOfInterestArchived = <any>null;
            }
            if (Array.isArray(_data["DeclarationOfInterestArchived1"])) {
                this.declarationOfInterestArchived1 = [] as any;
                for (let item of _data["DeclarationOfInterestArchived1"])
                    this.declarationOfInterestArchived1!.push(DeclarationOfInterestArchived.fromJS(item));
            }
            else {
                this.declarationOfInterestArchived1 = <any>null;
            }
            if (Array.isArray(_data["DeclarationTemplate"])) {
                this.declarationTemplate = [] as any;
                for (let item of _data["DeclarationTemplate"])
                    this.declarationTemplate!.push(DeclarationTemplate.fromJS(item));
            }
            else {
                this.declarationTemplate = <any>null;
            }
            if (Array.isArray(_data["DeclarationTemplate1"])) {
                this.declarationTemplate1 = [] as any;
                for (let item of _data["DeclarationTemplate1"])
                    this.declarationTemplate1!.push(DeclarationTemplate.fromJS(item));
            }
            else {
                this.declarationTemplate1 = <any>null;
            }
            if (Array.isArray(_data["DeviceDetails"])) {
                this.deviceDetails = [] as any;
                for (let item of _data["DeviceDetails"])
                    this.deviceDetails!.push(DeviceDetails.fromJS(item));
            }
            else {
                this.deviceDetails = <any>null;
            }
            if (Array.isArray(_data["DeviceDetails1"])) {
                this.deviceDetails1 = [] as any;
                for (let item of _data["DeviceDetails1"])
                    this.deviceDetails1!.push(DeviceDetails.fromJS(item));
            }
            else {
                this.deviceDetails1 = <any>null;
            }
            if (Array.isArray(_data["Discount"])) {
                this.discount = [] as any;
                for (let item of _data["Discount"])
                    this.discount!.push(Discount.fromJS(item));
            }
            else {
                this.discount = <any>null;
            }
            if (Array.isArray(_data["Discount1"])) {
                this.discount1 = [] as any;
                for (let item of _data["Discount1"])
                    this.discount1!.push(Discount.fromJS(item));
            }
            else {
                this.discount1 = <any>null;
            }
            if (Array.isArray(_data["Document"])) {
                this.document = [] as any;
                for (let item of _data["Document"])
                    this.document!.push(Document.fromJS(item));
            }
            else {
                this.document = <any>null;
            }
            if (Array.isArray(_data["Document1"])) {
                this.document1 = [] as any;
                for (let item of _data["Document1"])
                    this.document1!.push(Document.fromJS(item));
            }
            else {
                this.document1 = <any>null;
            }
            if (Array.isArray(_data["Document2"])) {
                this.document2 = [] as any;
                for (let item of _data["Document2"])
                    this.document2!.push(Document.fromJS(item));
            }
            else {
                this.document2 = <any>null;
            }
            if (Array.isArray(_data["EmailLog"])) {
                this.emailLog = [] as any;
                for (let item of _data["EmailLog"])
                    this.emailLog!.push(EmailLog.fromJS(item));
            }
            else {
                this.emailLog = <any>null;
            }
            if (Array.isArray(_data["EmailLog1"])) {
                this.emailLog1 = [] as any;
                for (let item of _data["EmailLog1"])
                    this.emailLog1!.push(EmailLog.fromJS(item));
            }
            else {
                this.emailLog1 = <any>null;
            }
            if (Array.isArray(_data["EmailPreference"])) {
                this.emailPreference = [] as any;
                for (let item of _data["EmailPreference"])
                    this.emailPreference!.push(EmailPreference.fromJS(item));
            }
            else {
                this.emailPreference = <any>null;
            }
            if (Array.isArray(_data["EmailPreference1"])) {
                this.emailPreference1 = [] as any;
                for (let item of _data["EmailPreference1"])
                    this.emailPreference1!.push(EmailPreference.fromJS(item));
            }
            else {
                this.emailPreference1 = <any>null;
            }
            if (Array.isArray(_data["EmailTypeSubGroup"])) {
                this.emailTypeSubGroup = [] as any;
                for (let item of _data["EmailTypeSubGroup"])
                    this.emailTypeSubGroup!.push(EmailTypeSubGroup.fromJS(item));
            }
            else {
                this.emailTypeSubGroup = <any>null;
            }
            if (Array.isArray(_data["EmailTypeSubGroup1"])) {
                this.emailTypeSubGroup1 = [] as any;
                for (let item of _data["EmailTypeSubGroup1"])
                    this.emailTypeSubGroup1!.push(EmailTypeSubGroup.fromJS(item));
            }
            else {
                this.emailTypeSubGroup1 = <any>null;
            }
            if (Array.isArray(_data["EmailTypeTranslation"])) {
                this.emailTypeTranslation = [] as any;
                for (let item of _data["EmailTypeTranslation"])
                    this.emailTypeTranslation!.push(EmailTypeTranslation.fromJS(item));
            }
            else {
                this.emailTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["EmailTypeTranslation1"])) {
                this.emailTypeTranslation1 = [] as any;
                for (let item of _data["EmailTypeTranslation1"])
                    this.emailTypeTranslation1!.push(EmailTypeTranslation.fromJS(item));
            }
            else {
                this.emailTypeTranslation1 = <any>null;
            }
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
            if (Array.isArray(_data["Event1"])) {
                this.event1 = [] as any;
                for (let item of _data["Event1"])
                    this.event1!.push(Event.fromJS(item));
            }
            else {
                this.event1 = <any>null;
            }
            if (Array.isArray(_data["EventArtifact"])) {
                this.eventArtifact = [] as any;
                for (let item of _data["EventArtifact"])
                    this.eventArtifact!.push(EventArtifact.fromJS(item));
            }
            else {
                this.eventArtifact = <any>null;
            }
            if (Array.isArray(_data["EventArtifact1"])) {
                this.eventArtifact1 = [] as any;
                for (let item of _data["EventArtifact1"])
                    this.eventArtifact1!.push(EventArtifact.fromJS(item));
            }
            else {
                this.eventArtifact1 = <any>null;
            }
            if (Array.isArray(_data["EventAttendance"])) {
                this.eventAttendance = [] as any;
                for (let item of _data["EventAttendance"])
                    this.eventAttendance!.push(EventAttendance.fromJS(item));
            }
            else {
                this.eventAttendance = <any>null;
            }
            if (Array.isArray(_data["EventBadge"])) {
                this.eventBadge = [] as any;
                for (let item of _data["EventBadge"])
                    this.eventBadge!.push(EventBadge.fromJS(item));
            }
            else {
                this.eventBadge = <any>null;
            }
            if (Array.isArray(_data["EventDeadLine"])) {
                this.eventDeadLine = [] as any;
                for (let item of _data["EventDeadLine"])
                    this.eventDeadLine!.push(EventDeadLine.fromJS(item));
            }
            else {
                this.eventDeadLine = <any>null;
            }
            if (Array.isArray(_data["EventDeadLine1"])) {
                this.eventDeadLine1 = [] as any;
                for (let item of _data["EventDeadLine1"])
                    this.eventDeadLine1!.push(EventDeadLine.fromJS(item));
            }
            else {
                this.eventDeadLine1 = <any>null;
            }
            if (Array.isArray(_data["EventDiscount"])) {
                this.eventDiscount = [] as any;
                for (let item of _data["EventDiscount"])
                    this.eventDiscount!.push(EventDiscount.fromJS(item));
            }
            else {
                this.eventDiscount = <any>null;
            }
            if (Array.isArray(_data["EventDiscount1"])) {
                this.eventDiscount1 = [] as any;
                for (let item of _data["EventDiscount1"])
                    this.eventDiscount1!.push(EventDiscount.fromJS(item));
            }
            else {
                this.eventDiscount1 = <any>null;
            }
            if (Array.isArray(_data["EventDiscountCouponCode"])) {
                this.eventDiscountCouponCode = [] as any;
                for (let item of _data["EventDiscountCouponCode"])
                    this.eventDiscountCouponCode!.push(EventDiscountCouponCode.fromJS(item));
            }
            else {
                this.eventDiscountCouponCode = <any>null;
            }
            if (Array.isArray(_data["EventDiscountCouponCodeMapping"])) {
                this.eventDiscountCouponCodeMapping = [] as any;
                for (let item of _data["EventDiscountCouponCodeMapping"])
                    this.eventDiscountCouponCodeMapping!.push(EventDiscountCouponCodeMapping.fromJS(item));
            }
            else {
                this.eventDiscountCouponCodeMapping = <any>null;
            }
            if (Array.isArray(_data["EventDiscountCouponCodeMapping1"])) {
                this.eventDiscountCouponCodeMapping1 = [] as any;
                for (let item of _data["EventDiscountCouponCodeMapping1"])
                    this.eventDiscountCouponCodeMapping1!.push(EventDiscountCouponCodeMapping.fromJS(item));
            }
            else {
                this.eventDiscountCouponCodeMapping1 = <any>null;
            }
            if (Array.isArray(_data["EventExbSymposia"])) {
                this.eventExbSymposia = [] as any;
                for (let item of _data["EventExbSymposia"])
                    this.eventExbSymposia!.push(EventExbSymposia.fromJS(item));
            }
            else {
                this.eventExbSymposia = <any>null;
            }
            if (Array.isArray(_data["EventExbSymposia1"])) {
                this.eventExbSymposia1 = [] as any;
                for (let item of _data["EventExbSymposia1"])
                    this.eventExbSymposia1!.push(EventExbSymposia.fromJS(item));
            }
            else {
                this.eventExbSymposia1 = <any>null;
            }
            if (Array.isArray(_data["EventExhibitor"])) {
                this.eventExhibitor = [] as any;
                for (let item of _data["EventExhibitor"])
                    this.eventExhibitor!.push(EventExhibitor.fromJS(item));
            }
            else {
                this.eventExhibitor = <any>null;
            }
            if (Array.isArray(_data["EventExhibitor1"])) {
                this.eventExhibitor1 = [] as any;
                for (let item of _data["EventExhibitor1"])
                    this.eventExhibitor1!.push(EventExhibitor.fromJS(item));
            }
            else {
                this.eventExhibitor1 = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorAccess"])) {
                this.eventExhibitorAccess = [] as any;
                for (let item of _data["EventExhibitorAccess"])
                    this.eventExhibitorAccess!.push(EventExhibitorAccess.fromJS(item));
            }
            else {
                this.eventExhibitorAccess = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorAccess1"])) {
                this.eventExhibitorAccess1 = [] as any;
                for (let item of _data["EventExhibitorAccess1"])
                    this.eventExhibitorAccess1!.push(EventExhibitorAccess.fromJS(item));
            }
            else {
                this.eventExhibitorAccess1 = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorProduct"])) {
                this.eventExhibitorProduct = [] as any;
                for (let item of _data["EventExhibitorProduct"])
                    this.eventExhibitorProduct!.push(EventExhibitorProduct.fromJS(item));
            }
            else {
                this.eventExhibitorProduct = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorProduct1"])) {
                this.eventExhibitorProduct1 = [] as any;
                for (let item of _data["EventExhibitorProduct1"])
                    this.eventExhibitorProduct1!.push(EventExhibitorProduct.fromJS(item));
            }
            else {
                this.eventExhibitorProduct1 = <any>null;
            }
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
            if (Array.isArray(_data["EventFee1"])) {
                this.eventFee1 = [] as any;
                for (let item of _data["EventFee1"])
                    this.eventFee1!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee1 = <any>null;
            }
            if (Array.isArray(_data["EventFeeAttendanceGroup"])) {
                this.eventFeeAttendanceGroup = [] as any;
                for (let item of _data["EventFeeAttendanceGroup"])
                    this.eventFeeAttendanceGroup!.push(EventFeeAttendanceGroup.fromJS(item));
            }
            else {
                this.eventFeeAttendanceGroup = <any>null;
            }
            if (Array.isArray(_data["EventFeeAttendanceGroup1"])) {
                this.eventFeeAttendanceGroup1 = [] as any;
                for (let item of _data["EventFeeAttendanceGroup1"])
                    this.eventFeeAttendanceGroup1!.push(EventFeeAttendanceGroup.fromJS(item));
            }
            else {
                this.eventFeeAttendanceGroup1 = <any>null;
            }
            if (Array.isArray(_data["EventGroup"])) {
                this.eventGroup = [] as any;
                for (let item of _data["EventGroup"])
                    this.eventGroup!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup = <any>null;
            }
            if (Array.isArray(_data["EventGroup1"])) {
                this.eventGroup1 = [] as any;
                for (let item of _data["EventGroup1"])
                    this.eventGroup1!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup1 = <any>null;
            }
            if (Array.isArray(_data["EventGroup2"])) {
                this.eventGroup2 = [] as any;
                for (let item of _data["EventGroup2"])
                    this.eventGroup2!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup2 = <any>null;
            }
            if (Array.isArray(_data["EventGroup3"])) {
                this.eventGroup3 = [] as any;
                for (let item of _data["EventGroup3"])
                    this.eventGroup3!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup3 = <any>null;
            }
            if (Array.isArray(_data["EventGroupMember"])) {
                this.eventGroupMember = [] as any;
                for (let item of _data["EventGroupMember"])
                    this.eventGroupMember!.push(EventGroupMember.fromJS(item));
            }
            else {
                this.eventGroupMember = <any>null;
            }
            if (Array.isArray(_data["EventGroupMember1"])) {
                this.eventGroupMember1 = [] as any;
                for (let item of _data["EventGroupMember1"])
                    this.eventGroupMember1!.push(EventGroupMember.fromJS(item));
            }
            else {
                this.eventGroupMember1 = <any>null;
            }
            if (Array.isArray(_data["EventGroupMember2"])) {
                this.eventGroupMember2 = [] as any;
                for (let item of _data["EventGroupMember2"])
                    this.eventGroupMember2!.push(EventGroupMember.fromJS(item));
            }
            else {
                this.eventGroupMember2 = <any>null;
            }
            if (Array.isArray(_data["EventGroupMember3"])) {
                this.eventGroupMember3 = [] as any;
                for (let item of _data["EventGroupMember3"])
                    this.eventGroupMember3!.push(EventGroupMember.fromJS(item));
            }
            else {
                this.eventGroupMember3 = <any>null;
            }
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
            if (Array.isArray(_data["EventRegistration1"])) {
                this.eventRegistration1 = [] as any;
                for (let item of _data["EventRegistration1"])
                    this.eventRegistration1!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration1 = <any>null;
            }
            if (Array.isArray(_data["EventTemplate"])) {
                this.eventTemplate = [] as any;
                for (let item of _data["EventTemplate"])
                    this.eventTemplate!.push(EventTemplate.fromJS(item));
            }
            else {
                this.eventTemplate = <any>null;
            }
            if (Array.isArray(_data["EventTemplate1"])) {
                this.eventTemplate1 = [] as any;
                for (let item of _data["EventTemplate1"])
                    this.eventTemplate1!.push(EventTemplate.fromJS(item));
            }
            else {
                this.eventTemplate1 = <any>null;
            }
            if (Array.isArray(_data["EventTempStaffMapping"])) {
                this.eventTempStaffMapping = [] as any;
                for (let item of _data["EventTempStaffMapping"])
                    this.eventTempStaffMapping!.push(EventTempStaffMapping.fromJS(item));
            }
            else {
                this.eventTempStaffMapping = <any>null;
            }
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
            if (Array.isArray(_data["EventTicket1"])) {
                this.eventTicket1 = [] as any;
                for (let item of _data["EventTicket1"])
                    this.eventTicket1!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket1 = <any>null;
            }
            if (Array.isArray(_data["EventTicket2"])) {
                this.eventTicket2 = [] as any;
                for (let item of _data["EventTicket2"])
                    this.eventTicket2!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket2 = <any>null;
            }
            if (Array.isArray(_data["EventTicket3"])) {
                this.eventTicket3 = [] as any;
                for (let item of _data["EventTicket3"])
                    this.eventTicket3!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket3 = <any>null;
            }
            if (Array.isArray(_data["Exhibitor"])) {
                this.exhibitor = [] as any;
                for (let item of _data["Exhibitor"])
                    this.exhibitor!.push(Exhibitor.fromJS(item));
            }
            else {
                this.exhibitor = <any>null;
            }
            if (Array.isArray(_data["ExhibitorDeviceDetails"])) {
                this.exhibitorDeviceDetails = [] as any;
                for (let item of _data["ExhibitorDeviceDetails"])
                    this.exhibitorDeviceDetails!.push(ExhibitorDeviceDetails.fromJS(item));
            }
            else {
                this.exhibitorDeviceDetails = <any>null;
            }
            if (Array.isArray(_data["ExhibitorDeviceDetails1"])) {
                this.exhibitorDeviceDetails1 = [] as any;
                for (let item of _data["ExhibitorDeviceDetails1"])
                    this.exhibitorDeviceDetails1!.push(ExhibitorDeviceDetails.fromJS(item));
            }
            else {
                this.exhibitorDeviceDetails1 = <any>null;
            }
            if (Array.isArray(_data["Invoice"])) {
                this.invoice = [] as any;
                for (let item of _data["Invoice"])
                    this.invoice!.push(Invoice.fromJS(item));
            }
            else {
                this.invoice = <any>null;
            }
            if (Array.isArray(_data["Invoice1"])) {
                this.invoice1 = [] as any;
                for (let item of _data["Invoice1"])
                    this.invoice1!.push(Invoice.fromJS(item));
            }
            else {
                this.invoice1 = <any>null;
            }
            if (Array.isArray(_data["JournalRole"])) {
                this.journalRole = [] as any;
                for (let item of _data["JournalRole"])
                    this.journalRole!.push(JournalRole.fromJS(item));
            }
            else {
                this.journalRole = <any>null;
            }
            if (Array.isArray(_data["JournalRole1"])) {
                this.journalRole1 = [] as any;
                for (let item of _data["JournalRole1"])
                    this.journalRole1!.push(JournalRole.fromJS(item));
            }
            else {
                this.journalRole1 = <any>null;
            }
            if (Array.isArray(_data["JournalRoleUserMapping"])) {
                this.journalRoleUserMapping = [] as any;
                for (let item of _data["JournalRoleUserMapping"])
                    this.journalRoleUserMapping!.push(JournalRoleUserMapping.fromJS(item));
            }
            else {
                this.journalRoleUserMapping = <any>null;
            }
            if (Array.isArray(_data["JournalRoleUserMapping1"])) {
                this.journalRoleUserMapping1 = [] as any;
                for (let item of _data["JournalRoleUserMapping1"])
                    this.journalRoleUserMapping1!.push(JournalRoleUserMapping.fromJS(item));
            }
            else {
                this.journalRoleUserMapping1 = <any>null;
            }
            if (Array.isArray(_data["JournalRoleUserMapping2"])) {
                this.journalRoleUserMapping2 = [] as any;
                for (let item of _data["JournalRoleUserMapping2"])
                    this.journalRoleUserMapping2!.push(JournalRoleUserMapping.fromJS(item));
            }
            else {
                this.journalRoleUserMapping2 = <any>null;
            }
            if (Array.isArray(_data["MembershipApplication"])) {
                this.membershipApplication = [] as any;
                for (let item of _data["MembershipApplication"])
                    this.membershipApplication!.push(MembershipApplication.fromJS(item));
            }
            else {
                this.membershipApplication = <any>null;
            }
            if (Array.isArray(_data["MembershipApplication1"])) {
                this.membershipApplication1 = [] as any;
                for (let item of _data["MembershipApplication1"])
                    this.membershipApplication1!.push(MembershipApplication.fromJS(item));
            }
            else {
                this.membershipApplication1 = <any>null;
            }
            if (Array.isArray(_data["MembershipApplication2"])) {
                this.membershipApplication2 = [] as any;
                for (let item of _data["MembershipApplication2"])
                    this.membershipApplication2!.push(MembershipApplication.fromJS(item));
            }
            else {
                this.membershipApplication2 = <any>null;
            }
            if (Array.isArray(_data["MembershipAutoRenewal"])) {
                this.membershipAutoRenewal = [] as any;
                for (let item of _data["MembershipAutoRenewal"])
                    this.membershipAutoRenewal!.push(MembershipAutoRenewal.fromJS(item));
            }
            else {
                this.membershipAutoRenewal = <any>null;
            }
            if (Array.isArray(_data["MembershipAutoRenewal1"])) {
                this.membershipAutoRenewal1 = [] as any;
                for (let item of _data["MembershipAutoRenewal1"])
                    this.membershipAutoRenewal1!.push(MembershipAutoRenewal.fromJS(item));
            }
            else {
                this.membershipAutoRenewal1 = <any>null;
            }
            if (Array.isArray(_data["MembershipAutoRenewal2"])) {
                this.membershipAutoRenewal2 = [] as any;
                for (let item of _data["MembershipAutoRenewal2"])
                    this.membershipAutoRenewal2!.push(MembershipAutoRenewal.fromJS(item));
            }
            else {
                this.membershipAutoRenewal2 = <any>null;
            }
            if (Array.isArray(_data["MembershipType"])) {
                this.membershipType = [] as any;
                for (let item of _data["MembershipType"])
                    this.membershipType!.push(MembershipType.fromJS(item));
            }
            else {
                this.membershipType = <any>null;
            }
            if (Array.isArray(_data["MemberSubscription"])) {
                this.memberSubscription = [] as any;
                for (let item of _data["MemberSubscription"])
                    this.memberSubscription!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription = <any>null;
            }
            if (Array.isArray(_data["MemberSubscription1"])) {
                this.memberSubscription1 = [] as any;
                for (let item of _data["MemberSubscription1"])
                    this.memberSubscription1!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription1 = <any>null;
            }
            if (Array.isArray(_data["MemberSubscription2"])) {
                this.memberSubscription2 = [] as any;
                for (let item of _data["MemberSubscription2"])
                    this.memberSubscription2!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription2 = <any>null;
            }
            if (Array.isArray(_data["Notification"])) {
                this.notification = [] as any;
                for (let item of _data["Notification"])
                    this.notification!.push(Notification.fromJS(item));
            }
            else {
                this.notification = <any>null;
            }
            if (Array.isArray(_data["Notification1"])) {
                this.notification1 = [] as any;
                for (let item of _data["Notification1"])
                    this.notification1!.push(Notification.fromJS(item));
            }
            else {
                this.notification1 = <any>null;
            }
            if (Array.isArray(_data["Notification2"])) {
                this.notification2 = [] as any;
                for (let item of _data["Notification2"])
                    this.notification2!.push(Notification.fromJS(item));
            }
            else {
                this.notification2 = <any>null;
            }
            if (Array.isArray(_data["OnsiteUser"])) {
                this.onsiteUser = [] as any;
                for (let item of _data["OnsiteUser"])
                    this.onsiteUser!.push(OnsiteUser.fromJS(item));
            }
            else {
                this.onsiteUser = <any>null;
            }
            if (Array.isArray(_data["Organisation"])) {
                this.organisation = [] as any;
                for (let item of _data["Organisation"])
                    this.organisation!.push(Organisation.fromJS(item));
            }
            else {
                this.organisation = <any>null;
            }
            if (Array.isArray(_data["Organisation1"])) {
                this.organisation1 = [] as any;
                for (let item of _data["Organisation1"])
                    this.organisation1!.push(Organisation.fromJS(item));
            }
            else {
                this.organisation1 = <any>null;
            }
            if (Array.isArray(_data["OUPChange"])) {
                this.oUPChange = [] as any;
                for (let item of _data["OUPChange"])
                    this.oUPChange!.push(OUPChange.fromJS(item));
            }
            else {
                this.oUPChange = <any>null;
            }
            if (Array.isArray(_data["OUPChange1"])) {
                this.oUPChange1 = [] as any;
                for (let item of _data["OUPChange1"])
                    this.oUPChange1!.push(OUPChange.fromJS(item));
            }
            else {
                this.oUPChange1 = <any>null;
            }
            if (Array.isArray(_data["PaymentTransaction"])) {
                this.paymentTransaction = [] as any;
                for (let item of _data["PaymentTransaction"])
                    this.paymentTransaction!.push(PaymentTransaction.fromJS(item));
            }
            else {
                this.paymentTransaction = <any>null;
            }
            if (Array.isArray(_data["PaymentTransaction1"])) {
                this.paymentTransaction1 = [] as any;
                for (let item of _data["PaymentTransaction1"])
                    this.paymentTransaction1!.push(PaymentTransaction.fromJS(item));
            }
            else {
                this.paymentTransaction1 = <any>null;
            }
            this.person = _data["Person"] ? Person.fromJS(_data["Person"]) : <any>null;
            if (Array.isArray(_data["Person1"])) {
                this.person1 = [] as any;
                for (let item of _data["Person1"])
                    this.person1!.push(Person.fromJS(item));
            }
            else {
                this.person1 = <any>null;
            }
            if (Array.isArray(_data["Person2"])) {
                this.person2 = [] as any;
                for (let item of _data["Person2"])
                    this.person2!.push(Person.fromJS(item));
            }
            else {
                this.person2 = <any>null;
            }
            if (Array.isArray(_data["RecentUsersByStaff"])) {
                this.recentUsersByStaff = [] as any;
                for (let item of _data["RecentUsersByStaff"])
                    this.recentUsersByStaff!.push(RecentUsersByStaff.fromJS(item));
            }
            else {
                this.recentUsersByStaff = <any>null;
            }
            if (Array.isArray(_data["RecentUsersByStaff1"])) {
                this.recentUsersByStaff1 = [] as any;
                for (let item of _data["RecentUsersByStaff1"])
                    this.recentUsersByStaff1!.push(RecentUsersByStaff.fromJS(item));
            }
            else {
                this.recentUsersByStaff1 = <any>null;
            }
            if (Array.isArray(_data["Search"])) {
                this.search = [] as any;
                for (let item of _data["Search"])
                    this.search!.push(Search.fromJS(item));
            }
            else {
                this.search = <any>null;
            }
            if (Array.isArray(_data["SelfNomination"])) {
                this.selfNomination = [] as any;
                for (let item of _data["SelfNomination"])
                    this.selfNomination!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination = <any>null;
            }
            if (Array.isArray(_data["SelfNomination1"])) {
                this.selfNomination1 = [] as any;
                for (let item of _data["SelfNomination1"])
                    this.selfNomination1!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination1 = <any>null;
            }
            if (Array.isArray(_data["SelfNomination2"])) {
                this.selfNomination2 = [] as any;
                for (let item of _data["SelfNomination2"])
                    this.selfNomination2!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination2 = <any>null;
            }
            if (Array.isArray(_data["SessionAccessory"])) {
                this.sessionAccessory = [] as any;
                for (let item of _data["SessionAccessory"])
                    this.sessionAccessory!.push(SessionAccessory.fromJS(item));
            }
            else {
                this.sessionAccessory = <any>null;
            }
            if (Array.isArray(_data["SessionAccessory1"])) {
                this.sessionAccessory1 = [] as any;
                for (let item of _data["SessionAccessory1"])
                    this.sessionAccessory1!.push(SessionAccessory.fromJS(item));
            }
            else {
                this.sessionAccessory1 = <any>null;
            }
            if (Array.isArray(_data["SessionAccessoryMapping"])) {
                this.sessionAccessoryMapping = [] as any;
                for (let item of _data["SessionAccessoryMapping"])
                    this.sessionAccessoryMapping!.push(SessionAccessoryMapping.fromJS(item));
            }
            else {
                this.sessionAccessoryMapping = <any>null;
            }
            if (Array.isArray(_data["SessionAccessoryMapping1"])) {
                this.sessionAccessoryMapping1 = [] as any;
                for (let item of _data["SessionAccessoryMapping1"])
                    this.sessionAccessoryMapping1!.push(SessionAccessoryMapping.fromJS(item));
            }
            else {
                this.sessionAccessoryMapping1 = <any>null;
            }
            if (Array.isArray(_data["UserEventArtifact"])) {
                this.userEventArtifact = [] as any;
                for (let item of _data["UserEventArtifact"])
                    this.userEventArtifact!.push(UserEventArtifact.fromJS(item));
            }
            else {
                this.userEventArtifact = <any>null;
            }
            if (Array.isArray(_data["UserEventArtifact1"])) {
                this.userEventArtifact1 = [] as any;
                for (let item of _data["UserEventArtifact1"])
                    this.userEventArtifact1!.push(UserEventArtifact.fromJS(item));
            }
            else {
                this.userEventArtifact1 = <any>null;
            }
            if (Array.isArray(_data["UserEventArtifact2"])) {
                this.userEventArtifact2 = [] as any;
                for (let item of _data["UserEventArtifact2"])
                    this.userEventArtifact2!.push(UserEventArtifact.fromJS(item));
            }
            else {
                this.userEventArtifact2 = <any>null;
            }
            if (Array.isArray(_data["HistoricalEventRegistration"])) {
                this.historicalEventRegistration = [] as any;
                for (let item of _data["HistoricalEventRegistration"])
                    this.historicalEventRegistration!.push(HistoricalEventRegistration.fromJS(item));
            }
            else {
                this.historicalEventRegistration = <any>null;
            }
            if (Array.isArray(_data["User1"])) {
                this.user1 = [] as any;
                for (let item of _data["User1"])
                    this.user1!.push(User.fromJS(item));
            }
            else {
                this.user1 = <any>null;
            }
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.userStatus = _data["UserStatus"] ? UserStatus.fromJS(_data["UserStatus"]) : <any>null;
            if (Array.isArray(_data["UserAddress"])) {
                this.userAddress = [] as any;
                for (let item of _data["UserAddress"])
                    this.userAddress!.push(UserAddress.fromJS(item));
            }
            else {
                this.userAddress = <any>null;
            }
            if (Array.isArray(_data["UserAddress1"])) {
                this.userAddress1 = [] as any;
                for (let item of _data["UserAddress1"])
                    this.userAddress1!.push(UserAddress.fromJS(item));
            }
            else {
                this.userAddress1 = <any>null;
            }
            if (Array.isArray(_data["UserAddress2"])) {
                this.userAddress2 = [] as any;
                for (let item of _data["UserAddress2"])
                    this.userAddress2!.push(UserAddress.fromJS(item));
            }
            else {
                this.userAddress2 = <any>null;
            }
            if (Array.isArray(_data["UserAffiliation"])) {
                this.userAffiliation = [] as any;
                for (let item of _data["UserAffiliation"])
                    this.userAffiliation!.push(UserAffiliation.fromJS(item));
            }
            else {
                this.userAffiliation = <any>null;
            }
            if (Array.isArray(_data["UserAffiliation1"])) {
                this.userAffiliation1 = [] as any;
                for (let item of _data["UserAffiliation1"])
                    this.userAffiliation1!.push(UserAffiliation.fromJS(item));
            }
            else {
                this.userAffiliation1 = <any>null;
            }
            if (Array.isArray(_data["UserArtefactManualApproved"])) {
                this.userArtefactManualApproved = [] as any;
                for (let item of _data["UserArtefactManualApproved"])
                    this.userArtefactManualApproved!.push(UserArtefactManualApproved.fromJS(item));
            }
            else {
                this.userArtefactManualApproved = <any>null;
            }
            if (Array.isArray(_data["UserClaim"])) {
                this.userClaim = [] as any;
                for (let item of _data["UserClaim"])
                    this.userClaim!.push(UserClaim.fromJS(item));
            }
            else {
                this.userClaim = <any>null;
            }
            if (Array.isArray(_data["UserConsentMailPreference"])) {
                this.userConsentMailPreference = [] as any;
                for (let item of _data["UserConsentMailPreference"])
                    this.userConsentMailPreference!.push(UserConsentMailPreference.fromJS(item));
            }
            else {
                this.userConsentMailPreference = <any>null;
            }
            if (Array.isArray(_data["UserConsentMailPreference1"])) {
                this.userConsentMailPreference1 = [] as any;
                for (let item of _data["UserConsentMailPreference1"])
                    this.userConsentMailPreference1!.push(UserConsentMailPreference.fromJS(item));
            }
            else {
                this.userConsentMailPreference1 = <any>null;
            }
            if (Array.isArray(_data["UserCorporateSession"])) {
                this.userCorporateSession = [] as any;
                for (let item of _data["UserCorporateSession"])
                    this.userCorporateSession!.push(UserCorporateSession.fromJS(item));
            }
            else {
                this.userCorporateSession = <any>null;
            }
            if (Array.isArray(_data["UserEmailPreference"])) {
                this.userEmailPreference = [] as any;
                for (let item of _data["UserEmailPreference"])
                    this.userEmailPreference!.push(UserEmailPreference.fromJS(item));
            }
            else {
                this.userEmailPreference = <any>null;
            }
            if (Array.isArray(_data["UserEmailPreference1"])) {
                this.userEmailPreference1 = [] as any;
                for (let item of _data["UserEmailPreference1"])
                    this.userEmailPreference1!.push(UserEmailPreference.fromJS(item));
            }
            else {
                this.userEmailPreference1 = <any>null;
            }
            if (Array.isArray(_data["UserEmailPreference2"])) {
                this.userEmailPreference2 = [] as any;
                for (let item of _data["UserEmailPreference2"])
                    this.userEmailPreference2!.push(UserEmailPreference.fromJS(item));
            }
            else {
                this.userEmailPreference2 = <any>null;
            }
            if (Array.isArray(_data["UserInterest"])) {
                this.userInterest = [] as any;
                for (let item of _data["UserInterest"])
                    this.userInterest!.push(UserInterest.fromJS(item));
            }
            else {
                this.userInterest = <any>null;
            }
            if (Array.isArray(_data["UserLogin"])) {
                this.userLogin = [] as any;
                for (let item of _data["UserLogin"])
                    this.userLogin!.push(UserLogin.fromJS(item));
            }
            else {
                this.userLogin = <any>null;
            }
            if (Array.isArray(_data["UserNomination"])) {
                this.userNomination = [] as any;
                for (let item of _data["UserNomination"])
                    this.userNomination!.push(UserNomination.fromJS(item));
            }
            else {
                this.userNomination = <any>null;
            }
            if (Array.isArray(_data["UserNomination1"])) {
                this.userNomination1 = [] as any;
                for (let item of _data["UserNomination1"])
                    this.userNomination1!.push(UserNomination.fromJS(item));
            }
            else {
                this.userNomination1 = <any>null;
            }
            if (Array.isArray(_data["UserNomination2"])) {
                this.userNomination2 = [] as any;
                for (let item of _data["UserNomination2"])
                    this.userNomination2!.push(UserNomination.fromJS(item));
            }
            else {
                this.userNomination2 = <any>null;
            }
            if (Array.isArray(_data["UserRole"])) {
                this.userRole = [] as any;
                for (let item of _data["UserRole"])
                    this.userRole!.push(UserRole.fromJS(item));
            }
            else {
                this.userRole = <any>null;
            }
            if (Array.isArray(_data["MembershipCertificateTemplate"])) {
                this.membershipCertificateTemplate = [] as any;
                for (let item of _data["MembershipCertificateTemplate"])
                    this.membershipCertificateTemplate!.push(MembershipCertificateTemplate.fromJS(item));
            }
            else {
                this.membershipCertificateTemplate = <any>null;
            }
            if (Array.isArray(_data["MembershipCertificateTemplate1"])) {
                this.membershipCertificateTemplate1 = [] as any;
                for (let item of _data["MembershipCertificateTemplate1"])
                    this.membershipCertificateTemplate1!.push(MembershipCertificateTemplate.fromJS(item));
            }
            else {
                this.membershipCertificateTemplate1 = <any>null;
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserName"] = this.userName !== undefined ? this.userName : <any>null;
        data["Password"] = this.password !== undefined ? this.password : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["SecurityStamp"] = this.securityStamp !== undefined ? this.securityStamp : <any>null;
        data["EmailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : <any>null;
        data["IsVerficationEmailSent"] = this.isVerficationEmailSent !== undefined ? this.isVerficationEmailSent : <any>null;
        data["AccessRights"] = this.accessRights !== undefined ? this.accessRights : <any>null;
        data["PhoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : <any>null;
        data["TwoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : <any>null;
        data["LockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : <any>null;
        data["AccessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : <any>null;
        data["LockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>null;
        data["UserActivationToken"] = this.userActivationToken !== undefined ? this.userActivationToken : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["Mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["AttestationTypeId"] = this.attestationTypeId !== undefined ? this.attestationTypeId : <any>null;
        data["LastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["IsMerged"] = this.isMerged !== undefined ? this.isMerged : <any>null;
        data["EmailModifiedOn"] = this.emailModifiedOn ? this.emailModifiedOn.toISOString() : <any>null;
        data["AppPin"] = this.appPin !== undefined ? this.appPin : <any>null;
        data["ContactModifiedOn"] = this.contactModifiedOn ? this.contactModifiedOn.toISOString() : <any>null;
        data["ContactLastSyncOn"] = this.contactLastSyncOn ? this.contactLastSyncOn.toISOString() : <any>null;
        if (Array.isArray(this.accompanyPerson)) {
            data["AccompanyPerson"] = [];
            for (let item of this.accompanyPerson)
                data["AccompanyPerson"].push(item.toJSON());
        }
        if (Array.isArray(this.accompanyPerson1)) {
            data["AccompanyPerson1"] = [];
            for (let item of this.accompanyPerson1)
                data["AccompanyPerson1"].push(item.toJSON());
        }
        if (Array.isArray(this.altaPayUserDeviceMapping)) {
            data["AltaPayUserDeviceMapping"] = [];
            for (let item of this.altaPayUserDeviceMapping)
                data["AltaPayUserDeviceMapping"].push(item.toJSON());
        }
        data["AttestationType"] = this.attestationType ? this.attestationType.toJSON() : <any>null;
        if (Array.isArray(this.auditLog)) {
            data["AuditLog"] = [];
            for (let item of this.auditLog)
                data["AuditLog"].push(item.toJSON());
        }
        if (Array.isArray(this.auditLog1)) {
            data["AuditLog1"] = [];
            for (let item of this.auditLog1)
                data["AuditLog1"].push(item.toJSON());
        }
        if (Array.isArray(this.auditLog2)) {
            data["AuditLog2"] = [];
            for (let item of this.auditLog2)
                data["AuditLog2"].push(item.toJSON());
        }
        if (Array.isArray(this.bankDetail)) {
            data["BankDetail"] = [];
            for (let item of this.bankDetail)
                data["BankDetail"].push(item.toJSON());
        }
        if (Array.isArray(this.bankDetail1)) {
            data["BankDetail1"] = [];
            for (let item of this.bankDetail1)
                data["BankDetail1"].push(item.toJSON());
        }
        if (Array.isArray(this.committee)) {
            data["Committee"] = [];
            for (let item of this.committee)
                data["Committee"].push(item.toJSON());
        }
        if (Array.isArray(this.committee1)) {
            data["Committee1"] = [];
            for (let item of this.committee1)
                data["Committee1"].push(item.toJSON());
        }
        if (Array.isArray(this.committee2)) {
            data["Committee2"] = [];
            for (let item of this.committee2)
                data["Committee2"].push(item.toJSON());
        }
        if (Array.isArray(this.committeeList)) {
            data["CommitteeList"] = [];
            for (let item of this.committeeList)
                data["CommitteeList"].push(item.toJSON());
        }
        if (Array.isArray(this.committeeList1)) {
            data["CommitteeList1"] = [];
            for (let item of this.committeeList1)
                data["CommitteeList1"].push(item.toJSON());
        }
        if (Array.isArray(this.committeeTaskForceRole)) {
            data["CommitteeTaskForceRole"] = [];
            for (let item of this.committeeTaskForceRole)
                data["CommitteeTaskForceRole"].push(item.toJSON());
        }
        if (Array.isArray(this.committeeTaskForceRole1)) {
            data["CommitteeTaskForceRole1"] = [];
            for (let item of this.committeeTaskForceRole1)
                data["CommitteeTaskForceRole1"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterest)) {
            data["ConflictOfInterest"] = [];
            for (let item of this.conflictOfInterest)
                data["ConflictOfInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterest1)) {
            data["ConflictOfInterest1"] = [];
            for (let item of this.conflictOfInterest1)
                data["ConflictOfInterest1"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterestArchived)) {
            data["ConflictOfInterestArchived"] = [];
            for (let item of this.conflictOfInterestArchived)
                data["ConflictOfInterestArchived"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterestArchived1)) {
            data["ConflictOfInterestArchived1"] = [];
            for (let item of this.conflictOfInterestArchived1)
                data["ConflictOfInterestArchived1"].push(item.toJSON());
        }
        if (Array.isArray(this.creditNote)) {
            data["CreditNote"] = [];
            for (let item of this.creditNote)
                data["CreditNote"].push(item.toJSON());
        }
        if (Array.isArray(this.creditNote1)) {
            data["CreditNote1"] = [];
            for (let item of this.creditNote1)
                data["CreditNote1"].push(item.toJSON());
        }
        if (Array.isArray(this.creditNoteDetail)) {
            data["CreditNoteDetail"] = [];
            for (let item of this.creditNoteDetail)
                data["CreditNoteDetail"].push(item.toJSON());
        }
        if (Array.isArray(this.creditNoteDetail1)) {
            data["CreditNoteDetail1"] = [];
            for (let item of this.creditNoteDetail1)
                data["CreditNoteDetail1"].push(item.toJSON());
        }
        data["CurrentMembership"] = this.currentMembership ? this.currentMembership.toJSON() : <any>null;
        if (Array.isArray(this.declarationOfInterest)) {
            data["DeclarationOfInterest"] = [];
            for (let item of this.declarationOfInterest)
                data["DeclarationOfInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationOfInterest1)) {
            data["DeclarationOfInterest1"] = [];
            for (let item of this.declarationOfInterest1)
                data["DeclarationOfInterest1"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationOfInterestArchived)) {
            data["DeclarationOfInterestArchived"] = [];
            for (let item of this.declarationOfInterestArchived)
                data["DeclarationOfInterestArchived"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationOfInterestArchived1)) {
            data["DeclarationOfInterestArchived1"] = [];
            for (let item of this.declarationOfInterestArchived1)
                data["DeclarationOfInterestArchived1"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationTemplate)) {
            data["DeclarationTemplate"] = [];
            for (let item of this.declarationTemplate)
                data["DeclarationTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationTemplate1)) {
            data["DeclarationTemplate1"] = [];
            for (let item of this.declarationTemplate1)
                data["DeclarationTemplate1"].push(item.toJSON());
        }
        if (Array.isArray(this.deviceDetails)) {
            data["DeviceDetails"] = [];
            for (let item of this.deviceDetails)
                data["DeviceDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.deviceDetails1)) {
            data["DeviceDetails1"] = [];
            for (let item of this.deviceDetails1)
                data["DeviceDetails1"].push(item.toJSON());
        }
        if (Array.isArray(this.discount)) {
            data["Discount"] = [];
            for (let item of this.discount)
                data["Discount"].push(item.toJSON());
        }
        if (Array.isArray(this.discount1)) {
            data["Discount1"] = [];
            for (let item of this.discount1)
                data["Discount1"].push(item.toJSON());
        }
        if (Array.isArray(this.document)) {
            data["Document"] = [];
            for (let item of this.document)
                data["Document"].push(item.toJSON());
        }
        if (Array.isArray(this.document1)) {
            data["Document1"] = [];
            for (let item of this.document1)
                data["Document1"].push(item.toJSON());
        }
        if (Array.isArray(this.document2)) {
            data["Document2"] = [];
            for (let item of this.document2)
                data["Document2"].push(item.toJSON());
        }
        if (Array.isArray(this.emailLog)) {
            data["EmailLog"] = [];
            for (let item of this.emailLog)
                data["EmailLog"].push(item.toJSON());
        }
        if (Array.isArray(this.emailLog1)) {
            data["EmailLog1"] = [];
            for (let item of this.emailLog1)
                data["EmailLog1"].push(item.toJSON());
        }
        if (Array.isArray(this.emailPreference)) {
            data["EmailPreference"] = [];
            for (let item of this.emailPreference)
                data["EmailPreference"].push(item.toJSON());
        }
        if (Array.isArray(this.emailPreference1)) {
            data["EmailPreference1"] = [];
            for (let item of this.emailPreference1)
                data["EmailPreference1"].push(item.toJSON());
        }
        if (Array.isArray(this.emailTypeSubGroup)) {
            data["EmailTypeSubGroup"] = [];
            for (let item of this.emailTypeSubGroup)
                data["EmailTypeSubGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.emailTypeSubGroup1)) {
            data["EmailTypeSubGroup1"] = [];
            for (let item of this.emailTypeSubGroup1)
                data["EmailTypeSubGroup1"].push(item.toJSON());
        }
        if (Array.isArray(this.emailTypeTranslation)) {
            data["EmailTypeTranslation"] = [];
            for (let item of this.emailTypeTranslation)
                data["EmailTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.emailTypeTranslation1)) {
            data["EmailTypeTranslation1"] = [];
            for (let item of this.emailTypeTranslation1)
                data["EmailTypeTranslation1"].push(item.toJSON());
        }
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        if (Array.isArray(this.event1)) {
            data["Event1"] = [];
            for (let item of this.event1)
                data["Event1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventArtifact)) {
            data["EventArtifact"] = [];
            for (let item of this.eventArtifact)
                data["EventArtifact"].push(item.toJSON());
        }
        if (Array.isArray(this.eventArtifact1)) {
            data["EventArtifact1"] = [];
            for (let item of this.eventArtifact1)
                data["EventArtifact1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventAttendance)) {
            data["EventAttendance"] = [];
            for (let item of this.eventAttendance)
                data["EventAttendance"].push(item.toJSON());
        }
        if (Array.isArray(this.eventBadge)) {
            data["EventBadge"] = [];
            for (let item of this.eventBadge)
                data["EventBadge"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDeadLine)) {
            data["EventDeadLine"] = [];
            for (let item of this.eventDeadLine)
                data["EventDeadLine"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDeadLine1)) {
            data["EventDeadLine1"] = [];
            for (let item of this.eventDeadLine1)
                data["EventDeadLine1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscount)) {
            data["EventDiscount"] = [];
            for (let item of this.eventDiscount)
                data["EventDiscount"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscount1)) {
            data["EventDiscount1"] = [];
            for (let item of this.eventDiscount1)
                data["EventDiscount1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscountCouponCode)) {
            data["EventDiscountCouponCode"] = [];
            for (let item of this.eventDiscountCouponCode)
                data["EventDiscountCouponCode"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscountCouponCodeMapping)) {
            data["EventDiscountCouponCodeMapping"] = [];
            for (let item of this.eventDiscountCouponCodeMapping)
                data["EventDiscountCouponCodeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscountCouponCodeMapping1)) {
            data["EventDiscountCouponCodeMapping1"] = [];
            for (let item of this.eventDiscountCouponCodeMapping1)
                data["EventDiscountCouponCodeMapping1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExbSymposia)) {
            data["EventExbSymposia"] = [];
            for (let item of this.eventExbSymposia)
                data["EventExbSymposia"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExbSymposia1)) {
            data["EventExbSymposia1"] = [];
            for (let item of this.eventExbSymposia1)
                data["EventExbSymposia1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitor)) {
            data["EventExhibitor"] = [];
            for (let item of this.eventExhibitor)
                data["EventExhibitor"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitor1)) {
            data["EventExhibitor1"] = [];
            for (let item of this.eventExhibitor1)
                data["EventExhibitor1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorAccess)) {
            data["EventExhibitorAccess"] = [];
            for (let item of this.eventExhibitorAccess)
                data["EventExhibitorAccess"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorAccess1)) {
            data["EventExhibitorAccess1"] = [];
            for (let item of this.eventExhibitorAccess1)
                data["EventExhibitorAccess1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorProduct)) {
            data["EventExhibitorProduct"] = [];
            for (let item of this.eventExhibitorProduct)
                data["EventExhibitorProduct"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorProduct1)) {
            data["EventExhibitorProduct1"] = [];
            for (let item of this.eventExhibitorProduct1)
                data["EventExhibitorProduct1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFee1)) {
            data["EventFee1"] = [];
            for (let item of this.eventFee1)
                data["EventFee1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFeeAttendanceGroup)) {
            data["EventFeeAttendanceGroup"] = [];
            for (let item of this.eventFeeAttendanceGroup)
                data["EventFeeAttendanceGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFeeAttendanceGroup1)) {
            data["EventFeeAttendanceGroup1"] = [];
            for (let item of this.eventFeeAttendanceGroup1)
                data["EventFeeAttendanceGroup1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroup)) {
            data["EventGroup"] = [];
            for (let item of this.eventGroup)
                data["EventGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroup1)) {
            data["EventGroup1"] = [];
            for (let item of this.eventGroup1)
                data["EventGroup1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroup2)) {
            data["EventGroup2"] = [];
            for (let item of this.eventGroup2)
                data["EventGroup2"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroup3)) {
            data["EventGroup3"] = [];
            for (let item of this.eventGroup3)
                data["EventGroup3"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroupMember)) {
            data["EventGroupMember"] = [];
            for (let item of this.eventGroupMember)
                data["EventGroupMember"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroupMember1)) {
            data["EventGroupMember1"] = [];
            for (let item of this.eventGroupMember1)
                data["EventGroupMember1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroupMember2)) {
            data["EventGroupMember2"] = [];
            for (let item of this.eventGroupMember2)
                data["EventGroupMember2"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroupMember3)) {
            data["EventGroupMember3"] = [];
            for (let item of this.eventGroupMember3)
                data["EventGroupMember3"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistration1)) {
            data["EventRegistration1"] = [];
            for (let item of this.eventRegistration1)
                data["EventRegistration1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTemplate)) {
            data["EventTemplate"] = [];
            for (let item of this.eventTemplate)
                data["EventTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTemplate1)) {
            data["EventTemplate1"] = [];
            for (let item of this.eventTemplate1)
                data["EventTemplate1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTempStaffMapping)) {
            data["EventTempStaffMapping"] = [];
            for (let item of this.eventTempStaffMapping)
                data["EventTempStaffMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket1)) {
            data["EventTicket1"] = [];
            for (let item of this.eventTicket1)
                data["EventTicket1"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket2)) {
            data["EventTicket2"] = [];
            for (let item of this.eventTicket2)
                data["EventTicket2"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket3)) {
            data["EventTicket3"] = [];
            for (let item of this.eventTicket3)
                data["EventTicket3"].push(item.toJSON());
        }
        if (Array.isArray(this.exhibitor)) {
            data["Exhibitor"] = [];
            for (let item of this.exhibitor)
                data["Exhibitor"].push(item.toJSON());
        }
        if (Array.isArray(this.exhibitorDeviceDetails)) {
            data["ExhibitorDeviceDetails"] = [];
            for (let item of this.exhibitorDeviceDetails)
                data["ExhibitorDeviceDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.exhibitorDeviceDetails1)) {
            data["ExhibitorDeviceDetails1"] = [];
            for (let item of this.exhibitorDeviceDetails1)
                data["ExhibitorDeviceDetails1"].push(item.toJSON());
        }
        if (Array.isArray(this.invoice)) {
            data["Invoice"] = [];
            for (let item of this.invoice)
                data["Invoice"].push(item.toJSON());
        }
        if (Array.isArray(this.invoice1)) {
            data["Invoice1"] = [];
            for (let item of this.invoice1)
                data["Invoice1"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRole)) {
            data["JournalRole"] = [];
            for (let item of this.journalRole)
                data["JournalRole"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRole1)) {
            data["JournalRole1"] = [];
            for (let item of this.journalRole1)
                data["JournalRole1"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRoleUserMapping)) {
            data["JournalRoleUserMapping"] = [];
            for (let item of this.journalRoleUserMapping)
                data["JournalRoleUserMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRoleUserMapping1)) {
            data["JournalRoleUserMapping1"] = [];
            for (let item of this.journalRoleUserMapping1)
                data["JournalRoleUserMapping1"].push(item.toJSON());
        }
        if (Array.isArray(this.journalRoleUserMapping2)) {
            data["JournalRoleUserMapping2"] = [];
            for (let item of this.journalRoleUserMapping2)
                data["JournalRoleUserMapping2"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipApplication)) {
            data["MembershipApplication"] = [];
            for (let item of this.membershipApplication)
                data["MembershipApplication"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipApplication1)) {
            data["MembershipApplication1"] = [];
            for (let item of this.membershipApplication1)
                data["MembershipApplication1"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipApplication2)) {
            data["MembershipApplication2"] = [];
            for (let item of this.membershipApplication2)
                data["MembershipApplication2"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipAutoRenewal)) {
            data["MembershipAutoRenewal"] = [];
            for (let item of this.membershipAutoRenewal)
                data["MembershipAutoRenewal"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipAutoRenewal1)) {
            data["MembershipAutoRenewal1"] = [];
            for (let item of this.membershipAutoRenewal1)
                data["MembershipAutoRenewal1"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipAutoRenewal2)) {
            data["MembershipAutoRenewal2"] = [];
            for (let item of this.membershipAutoRenewal2)
                data["MembershipAutoRenewal2"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipType)) {
            data["MembershipType"] = [];
            for (let item of this.membershipType)
                data["MembershipType"].push(item.toJSON());
        }
        if (Array.isArray(this.memberSubscription)) {
            data["MemberSubscription"] = [];
            for (let item of this.memberSubscription)
                data["MemberSubscription"].push(item.toJSON());
        }
        if (Array.isArray(this.memberSubscription1)) {
            data["MemberSubscription1"] = [];
            for (let item of this.memberSubscription1)
                data["MemberSubscription1"].push(item.toJSON());
        }
        if (Array.isArray(this.memberSubscription2)) {
            data["MemberSubscription2"] = [];
            for (let item of this.memberSubscription2)
                data["MemberSubscription2"].push(item.toJSON());
        }
        if (Array.isArray(this.notification)) {
            data["Notification"] = [];
            for (let item of this.notification)
                data["Notification"].push(item.toJSON());
        }
        if (Array.isArray(this.notification1)) {
            data["Notification1"] = [];
            for (let item of this.notification1)
                data["Notification1"].push(item.toJSON());
        }
        if (Array.isArray(this.notification2)) {
            data["Notification2"] = [];
            for (let item of this.notification2)
                data["Notification2"].push(item.toJSON());
        }
        if (Array.isArray(this.onsiteUser)) {
            data["OnsiteUser"] = [];
            for (let item of this.onsiteUser)
                data["OnsiteUser"].push(item.toJSON());
        }
        if (Array.isArray(this.organisation)) {
            data["Organisation"] = [];
            for (let item of this.organisation)
                data["Organisation"].push(item.toJSON());
        }
        if (Array.isArray(this.organisation1)) {
            data["Organisation1"] = [];
            for (let item of this.organisation1)
                data["Organisation1"].push(item.toJSON());
        }
        if (Array.isArray(this.oUPChange)) {
            data["OUPChange"] = [];
            for (let item of this.oUPChange)
                data["OUPChange"].push(item.toJSON());
        }
        if (Array.isArray(this.oUPChange1)) {
            data["OUPChange1"] = [];
            for (let item of this.oUPChange1)
                data["OUPChange1"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTransaction)) {
            data["PaymentTransaction"] = [];
            for (let item of this.paymentTransaction)
                data["PaymentTransaction"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTransaction1)) {
            data["PaymentTransaction1"] = [];
            for (let item of this.paymentTransaction1)
                data["PaymentTransaction1"].push(item.toJSON());
        }
        data["Person"] = this.person ? this.person.toJSON() : <any>null;
        if (Array.isArray(this.person1)) {
            data["Person1"] = [];
            for (let item of this.person1)
                data["Person1"].push(item.toJSON());
        }
        if (Array.isArray(this.person2)) {
            data["Person2"] = [];
            for (let item of this.person2)
                data["Person2"].push(item.toJSON());
        }
        if (Array.isArray(this.recentUsersByStaff)) {
            data["RecentUsersByStaff"] = [];
            for (let item of this.recentUsersByStaff)
                data["RecentUsersByStaff"].push(item.toJSON());
        }
        if (Array.isArray(this.recentUsersByStaff1)) {
            data["RecentUsersByStaff1"] = [];
            for (let item of this.recentUsersByStaff1)
                data["RecentUsersByStaff1"].push(item.toJSON());
        }
        if (Array.isArray(this.search)) {
            data["Search"] = [];
            for (let item of this.search)
                data["Search"].push(item.toJSON());
        }
        if (Array.isArray(this.selfNomination)) {
            data["SelfNomination"] = [];
            for (let item of this.selfNomination)
                data["SelfNomination"].push(item.toJSON());
        }
        if (Array.isArray(this.selfNomination1)) {
            data["SelfNomination1"] = [];
            for (let item of this.selfNomination1)
                data["SelfNomination1"].push(item.toJSON());
        }
        if (Array.isArray(this.selfNomination2)) {
            data["SelfNomination2"] = [];
            for (let item of this.selfNomination2)
                data["SelfNomination2"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionAccessory)) {
            data["SessionAccessory"] = [];
            for (let item of this.sessionAccessory)
                data["SessionAccessory"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionAccessory1)) {
            data["SessionAccessory1"] = [];
            for (let item of this.sessionAccessory1)
                data["SessionAccessory1"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionAccessoryMapping)) {
            data["SessionAccessoryMapping"] = [];
            for (let item of this.sessionAccessoryMapping)
                data["SessionAccessoryMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionAccessoryMapping1)) {
            data["SessionAccessoryMapping1"] = [];
            for (let item of this.sessionAccessoryMapping1)
                data["SessionAccessoryMapping1"].push(item.toJSON());
        }
        if (Array.isArray(this.userEventArtifact)) {
            data["UserEventArtifact"] = [];
            for (let item of this.userEventArtifact)
                data["UserEventArtifact"].push(item.toJSON());
        }
        if (Array.isArray(this.userEventArtifact1)) {
            data["UserEventArtifact1"] = [];
            for (let item of this.userEventArtifact1)
                data["UserEventArtifact1"].push(item.toJSON());
        }
        if (Array.isArray(this.userEventArtifact2)) {
            data["UserEventArtifact2"] = [];
            for (let item of this.userEventArtifact2)
                data["UserEventArtifact2"].push(item.toJSON());
        }
        if (Array.isArray(this.historicalEventRegistration)) {
            data["HistoricalEventRegistration"] = [];
            for (let item of this.historicalEventRegistration)
                data["HistoricalEventRegistration"].push(item.toJSON());
        }
        if (Array.isArray(this.user1)) {
            data["User1"] = [];
            for (let item of this.user1)
                data["User1"].push(item.toJSON());
        }
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["UserStatus"] = this.userStatus ? this.userStatus.toJSON() : <any>null;
        if (Array.isArray(this.userAddress)) {
            data["UserAddress"] = [];
            for (let item of this.userAddress)
                data["UserAddress"].push(item.toJSON());
        }
        if (Array.isArray(this.userAddress1)) {
            data["UserAddress1"] = [];
            for (let item of this.userAddress1)
                data["UserAddress1"].push(item.toJSON());
        }
        if (Array.isArray(this.userAddress2)) {
            data["UserAddress2"] = [];
            for (let item of this.userAddress2)
                data["UserAddress2"].push(item.toJSON());
        }
        if (Array.isArray(this.userAffiliation)) {
            data["UserAffiliation"] = [];
            for (let item of this.userAffiliation)
                data["UserAffiliation"].push(item.toJSON());
        }
        if (Array.isArray(this.userAffiliation1)) {
            data["UserAffiliation1"] = [];
            for (let item of this.userAffiliation1)
                data["UserAffiliation1"].push(item.toJSON());
        }
        if (Array.isArray(this.userArtefactManualApproved)) {
            data["UserArtefactManualApproved"] = [];
            for (let item of this.userArtefactManualApproved)
                data["UserArtefactManualApproved"].push(item.toJSON());
        }
        if (Array.isArray(this.userClaim)) {
            data["UserClaim"] = [];
            for (let item of this.userClaim)
                data["UserClaim"].push(item.toJSON());
        }
        if (Array.isArray(this.userConsentMailPreference)) {
            data["UserConsentMailPreference"] = [];
            for (let item of this.userConsentMailPreference)
                data["UserConsentMailPreference"].push(item.toJSON());
        }
        if (Array.isArray(this.userConsentMailPreference1)) {
            data["UserConsentMailPreference1"] = [];
            for (let item of this.userConsentMailPreference1)
                data["UserConsentMailPreference1"].push(item.toJSON());
        }
        if (Array.isArray(this.userCorporateSession)) {
            data["UserCorporateSession"] = [];
            for (let item of this.userCorporateSession)
                data["UserCorporateSession"].push(item.toJSON());
        }
        if (Array.isArray(this.userEmailPreference)) {
            data["UserEmailPreference"] = [];
            for (let item of this.userEmailPreference)
                data["UserEmailPreference"].push(item.toJSON());
        }
        if (Array.isArray(this.userEmailPreference1)) {
            data["UserEmailPreference1"] = [];
            for (let item of this.userEmailPreference1)
                data["UserEmailPreference1"].push(item.toJSON());
        }
        if (Array.isArray(this.userEmailPreference2)) {
            data["UserEmailPreference2"] = [];
            for (let item of this.userEmailPreference2)
                data["UserEmailPreference2"].push(item.toJSON());
        }
        if (Array.isArray(this.userInterest)) {
            data["UserInterest"] = [];
            for (let item of this.userInterest)
                data["UserInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.userLogin)) {
            data["UserLogin"] = [];
            for (let item of this.userLogin)
                data["UserLogin"].push(item.toJSON());
        }
        if (Array.isArray(this.userNomination)) {
            data["UserNomination"] = [];
            for (let item of this.userNomination)
                data["UserNomination"].push(item.toJSON());
        }
        if (Array.isArray(this.userNomination1)) {
            data["UserNomination1"] = [];
            for (let item of this.userNomination1)
                data["UserNomination1"].push(item.toJSON());
        }
        if (Array.isArray(this.userNomination2)) {
            data["UserNomination2"] = [];
            for (let item of this.userNomination2)
                data["UserNomination2"].push(item.toJSON());
        }
        if (Array.isArray(this.userRole)) {
            data["UserRole"] = [];
            for (let item of this.userRole)
                data["UserRole"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipCertificateTemplate)) {
            data["MembershipCertificateTemplate"] = [];
            for (let item of this.membershipCertificateTemplate)
                data["MembershipCertificateTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipCertificateTemplate1)) {
            data["MembershipCertificateTemplate1"] = [];
            for (let item of this.membershipCertificateTemplate1)
                data["MembershipCertificateTemplate1"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    id?: string | null;
    userName?: string | null;
    password?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    securityStamp?: string | null;
    emailConfirmed?: boolean | null;
    isVerficationEmailSent?: boolean | null;
    accessRights?: number | null;
    phoneNumberConfirmed?: boolean | null;
    twoFactorEnabled?: boolean | null;
    lockoutEnabled?: boolean | null;
    accessFailedCount?: number | null;
    lockoutEndDateUtc?: Date | null;
    userActivationToken?: string | null;
    email?: string | null;
    mobile?: string | null;
    status?: number | null;
    attestationTypeId?: number | null;
    lastLoginDate?: Date | null;
    accountId?: number | null;
    impersonateUserId?: string | null;
    phone?: string | null;
    mergedUserId?: string | null;
    isMerged?: boolean | null;
    emailModifiedOn?: Date | null;
    appPin?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    accompanyPerson?: AccompanyPerson[] | null;
    accompanyPerson1?: AccompanyPerson[] | null;
    altaPayUserDeviceMapping?: AltaPayUserDeviceMapping[] | null;
    attestationType?: AttestationType | null;
    auditLog?: AuditLog[] | null;
    auditLog1?: AuditLog[] | null;
    auditLog2?: AuditLog[] | null;
    bankDetail?: BankDetail[] | null;
    bankDetail1?: BankDetail[] | null;
    committee?: Committee[] | null;
    committee1?: Committee[] | null;
    committee2?: Committee[] | null;
    committeeList?: CommitteeList[] | null;
    committeeList1?: CommitteeList[] | null;
    committeeTaskForceRole?: CommitteeTaskForceRole[] | null;
    committeeTaskForceRole1?: CommitteeTaskForceRole[] | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterest1?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    conflictOfInterestArchived1?: ConflictOfInterestArchived[] | null;
    creditNote?: CreditNote[] | null;
    creditNote1?: CreditNote[] | null;
    creditNoteDetail?: CreditNoteDetail[] | null;
    creditNoteDetail1?: CreditNoteDetail[] | null;
    currentMembership?: CurrentMembership | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    declarationOfInterest1?: DeclarationOfInterest[] | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived[] | null;
    declarationOfInterestArchived1?: DeclarationOfInterestArchived[] | null;
    declarationTemplate?: DeclarationTemplate[] | null;
    declarationTemplate1?: DeclarationTemplate[] | null;
    deviceDetails?: DeviceDetails[] | null;
    deviceDetails1?: DeviceDetails[] | null;
    discount?: Discount[] | null;
    discount1?: Discount[] | null;
    document?: Document[] | null;
    document1?: Document[] | null;
    document2?: Document[] | null;
    emailLog?: EmailLog[] | null;
    emailLog1?: EmailLog[] | null;
    emailPreference?: EmailPreference[] | null;
    emailPreference1?: EmailPreference[] | null;
    emailTypeSubGroup?: EmailTypeSubGroup[] | null;
    emailTypeSubGroup1?: EmailTypeSubGroup[] | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;
    emailTypeTranslation1?: EmailTypeTranslation[] | null;
    event?: Event[] | null;
    event1?: Event[] | null;
    eventArtifact?: EventArtifact[] | null;
    eventArtifact1?: EventArtifact[] | null;
    eventAttendance?: EventAttendance[] | null;
    eventBadge?: EventBadge[] | null;
    eventDeadLine?: EventDeadLine[] | null;
    eventDeadLine1?: EventDeadLine[] | null;
    eventDiscount?: EventDiscount[] | null;
    eventDiscount1?: EventDiscount[] | null;
    eventDiscountCouponCode?: EventDiscountCouponCode[] | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    eventDiscountCouponCodeMapping1?: EventDiscountCouponCodeMapping[] | null;
    eventExbSymposia?: EventExbSymposia[] | null;
    eventExbSymposia1?: EventExbSymposia[] | null;
    eventExhibitor?: EventExhibitor[] | null;
    eventExhibitor1?: EventExhibitor[] | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorAccess1?: EventExhibitorAccess[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    eventExhibitorProduct1?: EventExhibitorProduct[] | null;
    eventFee?: EventFee[] | null;
    eventFee1?: EventFee[] | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;
    eventFeeAttendanceGroup1?: EventFeeAttendanceGroup[] | null;
    eventGroup?: EventGroup[] | null;
    eventGroup1?: EventGroup[] | null;
    eventGroup2?: EventGroup[] | null;
    eventGroup3?: EventGroup[] | null;
    eventGroupMember?: EventGroupMember[] | null;
    eventGroupMember1?: EventGroupMember[] | null;
    eventGroupMember2?: EventGroupMember[] | null;
    eventGroupMember3?: EventGroupMember[] | null;
    eventRegistration?: EventRegistration[] | null;
    eventRegistration1?: EventRegistration[] | null;
    eventTemplate?: EventTemplate[] | null;
    eventTemplate1?: EventTemplate[] | null;
    eventTempStaffMapping?: EventTempStaffMapping[] | null;
    eventTicket?: EventTicket[] | null;
    eventTicket1?: EventTicket[] | null;
    eventTicket2?: EventTicket[] | null;
    eventTicket3?: EventTicket[] | null;
    exhibitor?: Exhibitor[] | null;
    exhibitorDeviceDetails?: ExhibitorDeviceDetails[] | null;
    exhibitorDeviceDetails1?: ExhibitorDeviceDetails[] | null;
    invoice?: Invoice[] | null;
    invoice1?: Invoice[] | null;
    journalRole?: JournalRole[] | null;
    journalRole1?: JournalRole[] | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;
    journalRoleUserMapping1?: JournalRoleUserMapping[] | null;
    journalRoleUserMapping2?: JournalRoleUserMapping[] | null;
    membershipApplication?: MembershipApplication[] | null;
    membershipApplication1?: MembershipApplication[] | null;
    membershipApplication2?: MembershipApplication[] | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;
    membershipAutoRenewal1?: MembershipAutoRenewal[] | null;
    membershipAutoRenewal2?: MembershipAutoRenewal[] | null;
    membershipType?: MembershipType[] | null;
    memberSubscription?: MemberSubscription[] | null;
    memberSubscription1?: MemberSubscription[] | null;
    memberSubscription2?: MemberSubscription[] | null;
    notification?: Notification[] | null;
    notification1?: Notification[] | null;
    notification2?: Notification[] | null;
    onsiteUser?: OnsiteUser[] | null;
    organisation?: Organisation[] | null;
    organisation1?: Organisation[] | null;
    oUPChange?: OUPChange[] | null;
    oUPChange1?: OUPChange[] | null;
    paymentTransaction?: PaymentTransaction[] | null;
    paymentTransaction1?: PaymentTransaction[] | null;
    person?: Person | null;
    person1?: Person[] | null;
    person2?: Person[] | null;
    recentUsersByStaff?: RecentUsersByStaff[] | null;
    recentUsersByStaff1?: RecentUsersByStaff[] | null;
    search?: Search[] | null;
    selfNomination?: SelfNomination[] | null;
    selfNomination1?: SelfNomination[] | null;
    selfNomination2?: SelfNomination[] | null;
    sessionAccessory?: SessionAccessory[] | null;
    sessionAccessory1?: SessionAccessory[] | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;
    sessionAccessoryMapping1?: SessionAccessoryMapping[] | null;
    userEventArtifact?: UserEventArtifact[] | null;
    userEventArtifact1?: UserEventArtifact[] | null;
    userEventArtifact2?: UserEventArtifact[] | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;
    user1?: User[] | null;
    user2?: User | null;
    userStatus?: UserStatus | null;
    userAddress?: UserAddress[] | null;
    userAddress1?: UserAddress[] | null;
    userAddress2?: UserAddress[] | null;
    userAffiliation?: UserAffiliation[] | null;
    userAffiliation1?: UserAffiliation[] | null;
    userArtefactManualApproved?: UserArtefactManualApproved[] | null;
    userClaim?: UserClaim[] | null;
    userConsentMailPreference?: UserConsentMailPreference[] | null;
    userConsentMailPreference1?: UserConsentMailPreference[] | null;
    userCorporateSession?: UserCorporateSession[] | null;
    userEmailPreference?: UserEmailPreference[] | null;
    userEmailPreference1?: UserEmailPreference[] | null;
    userEmailPreference2?: UserEmailPreference[] | null;
    userInterest?: UserInterest[] | null;
    userLogin?: UserLogin[] | null;
    userNomination?: UserNomination[] | null;
    userNomination1?: UserNomination[] | null;
    userNomination2?: UserNomination[] | null;
    userRole?: UserRole[] | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate[] | null;
    membershipCertificateTemplate1?: MembershipCertificateTemplate[] | null;
}

export class DocumentMapping implements IDocumentMapping {
    id?: number | null;
    documentId?: number | null;
    membershipApplicationId?: number | null;
    eventId?: number | null;
    selfNominationId?: number | null;
    exhibitorPersonId?: number | null;
    typeOfEventRegistration?: number | null;
    groupId?: number | null;
    userEventArtifactId?: number | null;
    document?: Document | null;
    userEventArtifact?: UserEventArtifact | null;
    event?: Event | null;
    membershipApplication?: MembershipApplication | null;

    constructor(data?: IDocumentMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.documentId = _data["DocumentId"] !== undefined ? _data["DocumentId"] : <any>null;
            this.membershipApplicationId = _data["MembershipApplicationId"] !== undefined ? _data["MembershipApplicationId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.selfNominationId = _data["SelfNominationId"] !== undefined ? _data["SelfNominationId"] : <any>null;
            this.exhibitorPersonId = _data["ExhibitorPersonId"] !== undefined ? _data["ExhibitorPersonId"] : <any>null;
            this.typeOfEventRegistration = _data["TypeOfEventRegistration"] !== undefined ? _data["TypeOfEventRegistration"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.userEventArtifactId = _data["UserEventArtifactId"] !== undefined ? _data["UserEventArtifactId"] : <any>null;
            this.document = _data["Document"] ? Document.fromJS(_data["Document"]) : <any>null;
            this.userEventArtifact = _data["UserEventArtifact"] ? UserEventArtifact.fromJS(_data["UserEventArtifact"]) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.membershipApplication = _data["MembershipApplication"] ? MembershipApplication.fromJS(_data["MembershipApplication"]) : <any>null;
        }
    }

    static fromJS(data: any): DocumentMapping {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["DocumentId"] = this.documentId !== undefined ? this.documentId : <any>null;
        data["MembershipApplicationId"] = this.membershipApplicationId !== undefined ? this.membershipApplicationId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["SelfNominationId"] = this.selfNominationId !== undefined ? this.selfNominationId : <any>null;
        data["ExhibitorPersonId"] = this.exhibitorPersonId !== undefined ? this.exhibitorPersonId : <any>null;
        data["TypeOfEventRegistration"] = this.typeOfEventRegistration !== undefined ? this.typeOfEventRegistration : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["UserEventArtifactId"] = this.userEventArtifactId !== undefined ? this.userEventArtifactId : <any>null;
        data["Document"] = this.document ? this.document.toJSON() : <any>null;
        data["UserEventArtifact"] = this.userEventArtifact ? this.userEventArtifact.toJSON() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["MembershipApplication"] = this.membershipApplication ? this.membershipApplication.toJSON() : <any>null;
        return data;
    }
}

export interface IDocumentMapping {
    id?: number | null;
    documentId?: number | null;
    membershipApplicationId?: number | null;
    eventId?: number | null;
    selfNominationId?: number | null;
    exhibitorPersonId?: number | null;
    typeOfEventRegistration?: number | null;
    groupId?: number | null;
    userEventArtifactId?: number | null;
    document?: Document | null;
    userEventArtifact?: UserEventArtifact | null;
    event?: Event | null;
    membershipApplication?: MembershipApplication | null;
}

export class JournalRoleUserMapping implements IJournalRoleUserMapping {
    id?: number | null;
    journalRoleId?: number | null;
    userId?: string | null;
    isDeleted?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    expertise1?: string | null;
    expertise2?: string | null;
    documentId?: number | null;
    document?: Document | null;
    journalRole?: JournalRole | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IJournalRoleUserMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.journalRoleId = _data["JournalRoleId"] !== undefined ? _data["JournalRoleId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.expertise1 = _data["Expertise1"] !== undefined ? _data["Expertise1"] : <any>null;
            this.expertise2 = _data["Expertise2"] !== undefined ? _data["Expertise2"] : <any>null;
            this.documentId = _data["DocumentId"] !== undefined ? _data["DocumentId"] : <any>null;
            this.document = _data["Document"] ? Document.fromJS(_data["Document"]) : <any>null;
            this.journalRole = _data["JournalRole"] ? JournalRole.fromJS(_data["JournalRole"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): JournalRoleUserMapping {
        data = typeof data === 'object' ? data : {};
        let result = new JournalRoleUserMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["JournalRoleId"] = this.journalRoleId !== undefined ? this.journalRoleId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Expertise1"] = this.expertise1 !== undefined ? this.expertise1 : <any>null;
        data["Expertise2"] = this.expertise2 !== undefined ? this.expertise2 : <any>null;
        data["DocumentId"] = this.documentId !== undefined ? this.documentId : <any>null;
        data["Document"] = this.document ? this.document.toJSON() : <any>null;
        data["JournalRole"] = this.journalRole ? this.journalRole.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IJournalRoleUserMapping {
    id?: number | null;
    journalRoleId?: number | null;
    userId?: string | null;
    isDeleted?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    expertise1?: string | null;
    expertise2?: string | null;
    documentId?: number | null;
    document?: Document | null;
    journalRole?: JournalRole | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class MembershipCertificateTemplate implements IMembershipCertificateTemplate {
    id?: number | null;
    membershipTypeId?: number | null;
    templateName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    fileName?: string | null;
    document?: Document[] | null;
    user?: User | null;
    membershipType?: MembershipType | null;
    user1?: User | null;

    constructor(data?: IMembershipCertificateTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.templateName = _data["TemplateName"] !== undefined ? _data["TemplateName"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            if (Array.isArray(_data["Document"])) {
                this.document = [] as any;
                for (let item of _data["Document"])
                    this.document!.push(Document.fromJS(item));
            }
            else {
                this.document = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): MembershipCertificateTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipCertificateTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["TemplateName"] = this.templateName !== undefined ? this.templateName : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        if (Array.isArray(this.document)) {
            data["Document"] = [];
            for (let item of this.document)
                data["Document"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IMembershipCertificateTemplate {
    id?: number | null;
    membershipTypeId?: number | null;
    templateName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    fileName?: string | null;
    document?: Document[] | null;
    user?: User | null;
    membershipType?: MembershipType | null;
    user1?: User | null;
}

export class ConflictOfInterest implements IConflictOfInterest {
    id?: number | null;
    version?: number | null;
    dOIId?: number | null;
    conflictTypeId?: number | null;
    organizationName?: string | null;
    productDetails?: string | null;
    cOIIncomeTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictDescription?: string | null;
    conflictOfInterestIncomeType?: ConflictOfInterestIncomeType | null;
    conflictType?: ConflictType | null;
    user?: User | null;
    declarationOfInterest?: DeclarationOfInterest | null;
    user1?: User | null;

    constructor(data?: IConflictOfInterest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.version = _data["Version"] !== undefined ? _data["Version"] : <any>null;
            this.dOIId = _data["DOIId"] !== undefined ? _data["DOIId"] : <any>null;
            this.conflictTypeId = _data["ConflictTypeId"] !== undefined ? _data["ConflictTypeId"] : <any>null;
            this.organizationName = _data["OrganizationName"] !== undefined ? _data["OrganizationName"] : <any>null;
            this.productDetails = _data["ProductDetails"] !== undefined ? _data["ProductDetails"] : <any>null;
            this.cOIIncomeTypeId = _data["COIIncomeTypeId"] !== undefined ? _data["COIIncomeTypeId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTo = _data["ValidTo"] ? new Date(_data["ValidTo"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.conflictDescription = _data["ConflictDescription"] !== undefined ? _data["ConflictDescription"] : <any>null;
            this.conflictOfInterestIncomeType = _data["ConflictOfInterestIncomeType"] ? ConflictOfInterestIncomeType.fromJS(_data["ConflictOfInterestIncomeType"]) : <any>null;
            this.conflictType = _data["ConflictType"] ? ConflictType.fromJS(_data["ConflictType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.declarationOfInterest = _data["DeclarationOfInterest"] ? DeclarationOfInterest.fromJS(_data["DeclarationOfInterest"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): ConflictOfInterest {
        data = typeof data === 'object' ? data : {};
        let result = new ConflictOfInterest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Version"] = this.version !== undefined ? this.version : <any>null;
        data["DOIId"] = this.dOIId !== undefined ? this.dOIId : <any>null;
        data["ConflictTypeId"] = this.conflictTypeId !== undefined ? this.conflictTypeId : <any>null;
        data["OrganizationName"] = this.organizationName !== undefined ? this.organizationName : <any>null;
        data["ProductDetails"] = this.productDetails !== undefined ? this.productDetails : <any>null;
        data["COIIncomeTypeId"] = this.cOIIncomeTypeId !== undefined ? this.cOIIncomeTypeId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ConflictDescription"] = this.conflictDescription !== undefined ? this.conflictDescription : <any>null;
        data["ConflictOfInterestIncomeType"] = this.conflictOfInterestIncomeType ? this.conflictOfInterestIncomeType.toJSON() : <any>null;
        data["ConflictType"] = this.conflictType ? this.conflictType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["DeclarationOfInterest"] = this.declarationOfInterest ? this.declarationOfInterest.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IConflictOfInterest {
    id?: number | null;
    version?: number | null;
    dOIId?: number | null;
    conflictTypeId?: number | null;
    organizationName?: string | null;
    productDetails?: string | null;
    cOIIncomeTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictDescription?: string | null;
    conflictOfInterestIncomeType?: ConflictOfInterestIncomeType | null;
    conflictType?: ConflictType | null;
    user?: User | null;
    declarationOfInterest?: DeclarationOfInterest | null;
    user1?: User | null;
}

export class DeclarationTemplate implements IDeclarationTemplate {
    id?: number | null;
    version?: number | null;
    templateType?: number | null;
    content?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    user?: User | null;
    declarationTemplateType?: DeclarationTemplateType | null;
    user1?: User | null;

    constructor(data?: IDeclarationTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.version = _data["Version"] !== undefined ? _data["Version"] : <any>null;
            this.templateType = _data["TemplateType"] !== undefined ? _data["TemplateType"] : <any>null;
            this.content = _data["Content"] !== undefined ? _data["Content"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["DeclarationOfInterest"])) {
                this.declarationOfInterest = [] as any;
                for (let item of _data["DeclarationOfInterest"])
                    this.declarationOfInterest!.push(DeclarationOfInterest.fromJS(item));
            }
            else {
                this.declarationOfInterest = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.declarationTemplateType = _data["DeclarationTemplateType"] ? DeclarationTemplateType.fromJS(_data["DeclarationTemplateType"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): DeclarationTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarationTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Version"] = this.version !== undefined ? this.version : <any>null;
        data["TemplateType"] = this.templateType !== undefined ? this.templateType : <any>null;
        data["Content"] = this.content !== undefined ? this.content : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.declarationOfInterest)) {
            data["DeclarationOfInterest"] = [];
            for (let item of this.declarationOfInterest)
                data["DeclarationOfInterest"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["DeclarationTemplateType"] = this.declarationTemplateType ? this.declarationTemplateType.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IDeclarationTemplate {
    id?: number | null;
    version?: number | null;
    templateType?: number | null;
    content?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    declarationOfInterest?: DeclarationOfInterest[] | null;
    user?: User | null;
    declarationTemplateType?: DeclarationTemplateType | null;
    user1?: User | null;
}

export class UserNomination implements IUserNomination {
    id?: number | null;
    dOIId?: number | null;
    userId?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    declarationOfInterest?: DeclarationOfInterest | null;
    selfNomination?: SelfNomination[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IUserNomination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.dOIId = _data["DOIId"] !== undefined ? _data["DOIId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.declarationOfInterest = _data["DeclarationOfInterest"] ? DeclarationOfInterest.fromJS(_data["DeclarationOfInterest"]) : <any>null;
            if (Array.isArray(_data["SelfNomination"])) {
                this.selfNomination = [] as any;
                for (let item of _data["SelfNomination"])
                    this.selfNomination!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): UserNomination {
        data = typeof data === 'object' ? data : {};
        let result = new UserNomination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["DOIId"] = this.dOIId !== undefined ? this.dOIId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["DeclarationOfInterest"] = this.declarationOfInterest ? this.declarationOfInterest.toJSON() : <any>null;
        if (Array.isArray(this.selfNomination)) {
            data["SelfNomination"] = [];
            for (let item of this.selfNomination)
                data["SelfNomination"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IUserNomination {
    id?: number | null;
    dOIId?: number | null;
    userId?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    declarationOfInterest?: DeclarationOfInterest | null;
    selfNomination?: SelfNomination[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class ConflictOfInterestArchived implements IConflictOfInterestArchived {
    id?: number | null;
    version?: number | null;
    dOIId?: number | null;
    dOIVersion?: number | null;
    conflictTypeId?: number | null;
    organizationName?: string | null;
    productDetails?: string | null;
    cOIIncomeTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictDescription?: string | null;
    conflictOfInterestIncomeType?: ConflictOfInterestIncomeType | null;
    conflictType?: ConflictType | null;
    user?: User | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived | null;
    user1?: User | null;

    constructor(data?: IConflictOfInterestArchived) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.version = _data["Version"] !== undefined ? _data["Version"] : <any>null;
            this.dOIId = _data["DOIId"] !== undefined ? _data["DOIId"] : <any>null;
            this.dOIVersion = _data["DOIVersion"] !== undefined ? _data["DOIVersion"] : <any>null;
            this.conflictTypeId = _data["ConflictTypeId"] !== undefined ? _data["ConflictTypeId"] : <any>null;
            this.organizationName = _data["OrganizationName"] !== undefined ? _data["OrganizationName"] : <any>null;
            this.productDetails = _data["ProductDetails"] !== undefined ? _data["ProductDetails"] : <any>null;
            this.cOIIncomeTypeId = _data["COIIncomeTypeId"] !== undefined ? _data["COIIncomeTypeId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTo = _data["ValidTo"] ? new Date(_data["ValidTo"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.conflictDescription = _data["ConflictDescription"] !== undefined ? _data["ConflictDescription"] : <any>null;
            this.conflictOfInterestIncomeType = _data["ConflictOfInterestIncomeType"] ? ConflictOfInterestIncomeType.fromJS(_data["ConflictOfInterestIncomeType"]) : <any>null;
            this.conflictType = _data["ConflictType"] ? ConflictType.fromJS(_data["ConflictType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.declarationOfInterestArchived = _data["DeclarationOfInterestArchived"] ? DeclarationOfInterestArchived.fromJS(_data["DeclarationOfInterestArchived"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): ConflictOfInterestArchived {
        data = typeof data === 'object' ? data : {};
        let result = new ConflictOfInterestArchived();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Version"] = this.version !== undefined ? this.version : <any>null;
        data["DOIId"] = this.dOIId !== undefined ? this.dOIId : <any>null;
        data["DOIVersion"] = this.dOIVersion !== undefined ? this.dOIVersion : <any>null;
        data["ConflictTypeId"] = this.conflictTypeId !== undefined ? this.conflictTypeId : <any>null;
        data["OrganizationName"] = this.organizationName !== undefined ? this.organizationName : <any>null;
        data["ProductDetails"] = this.productDetails !== undefined ? this.productDetails : <any>null;
        data["COIIncomeTypeId"] = this.cOIIncomeTypeId !== undefined ? this.cOIIncomeTypeId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ConflictDescription"] = this.conflictDescription !== undefined ? this.conflictDescription : <any>null;
        data["ConflictOfInterestIncomeType"] = this.conflictOfInterestIncomeType ? this.conflictOfInterestIncomeType.toJSON() : <any>null;
        data["ConflictType"] = this.conflictType ? this.conflictType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["DeclarationOfInterestArchived"] = this.declarationOfInterestArchived ? this.declarationOfInterestArchived.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IConflictOfInterestArchived {
    id?: number | null;
    version?: number | null;
    dOIId?: number | null;
    dOIVersion?: number | null;
    conflictTypeId?: number | null;
    organizationName?: string | null;
    productDetails?: string | null;
    cOIIncomeTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    conflictDescription?: string | null;
    conflictOfInterestIncomeType?: ConflictOfInterestIncomeType | null;
    conflictType?: ConflictType | null;
    user?: User | null;
    declarationOfInterestArchived?: DeclarationOfInterestArchived | null;
    user1?: User | null;
}

export class AccompanyPerson implements IAccompanyPerson {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    eventTicket?: EventTicket[] | null;

    constructor(data?: IAccompanyPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
        }
    }

    static fromJS(data: any): AccompanyPerson {
        data = typeof data === 'object' ? data : {};
        let result = new AccompanyPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAccompanyPerson {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    eventTicket?: EventTicket[] | null;
}

export class EventExhibitorAccess implements IEventExhibitorAccess {
    id?: number | null;
    eventExhibitorId?: number | null;
    eventTicketId?: number | null;
    code?: string | null;
    scanType?: number | null;
    isValid?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    loggedOn?: Date | null;
    eventBoothScan?: EventBoothScan[] | null;
    eventExhibitor?: EventExhibitor | null;
    eventTicket?: EventTicket | null;
    user?: User | null;
    user1?: User | null;
    eventSymposiaScan?: EventSymposiaScan[] | null;
    exhibitorDeviceDetails?: ExhibitorDeviceDetails[] | null;

    constructor(data?: IEventExhibitorAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.eventTicketId = _data["EventTicketId"] !== undefined ? _data["EventTicketId"] : <any>null;
            this.code = _data["Code"] !== undefined ? _data["Code"] : <any>null;
            this.scanType = _data["ScanType"] !== undefined ? _data["ScanType"] : <any>null;
            this.isValid = _data["IsValid"] !== undefined ? _data["IsValid"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.loggedOn = _data["LoggedOn"] ? new Date(_data["LoggedOn"].toString()) : <any>null;
            if (Array.isArray(_data["EventBoothScan"])) {
                this.eventBoothScan = [] as any;
                for (let item of _data["EventBoothScan"])
                    this.eventBoothScan!.push(EventBoothScan.fromJS(item));
            }
            else {
                this.eventBoothScan = <any>null;
            }
            this.eventExhibitor = _data["EventExhibitor"] ? EventExhibitor.fromJS(_data["EventExhibitor"]) : <any>null;
            this.eventTicket = _data["EventTicket"] ? EventTicket.fromJS(_data["EventTicket"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventSymposiaScan"])) {
                this.eventSymposiaScan = [] as any;
                for (let item of _data["EventSymposiaScan"])
                    this.eventSymposiaScan!.push(EventSymposiaScan.fromJS(item));
            }
            else {
                this.eventSymposiaScan = <any>null;
            }
            if (Array.isArray(_data["ExhibitorDeviceDetails"])) {
                this.exhibitorDeviceDetails = [] as any;
                for (let item of _data["ExhibitorDeviceDetails"])
                    this.exhibitorDeviceDetails!.push(ExhibitorDeviceDetails.fromJS(item));
            }
            else {
                this.exhibitorDeviceDetails = <any>null;
            }
        }
    }

    static fromJS(data: any): EventExhibitorAccess {
        data = typeof data === 'object' ? data : {};
        let result = new EventExhibitorAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["EventTicketId"] = this.eventTicketId !== undefined ? this.eventTicketId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["ScanType"] = this.scanType !== undefined ? this.scanType : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["LoggedOn"] = this.loggedOn ? this.loggedOn.toISOString() : <any>null;
        if (Array.isArray(this.eventBoothScan)) {
            data["EventBoothScan"] = [];
            for (let item of this.eventBoothScan)
                data["EventBoothScan"].push(item.toJSON());
        }
        data["EventExhibitor"] = this.eventExhibitor ? this.eventExhibitor.toJSON() : <any>null;
        data["EventTicket"] = this.eventTicket ? this.eventTicket.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventSymposiaScan)) {
            data["EventSymposiaScan"] = [];
            for (let item of this.eventSymposiaScan)
                data["EventSymposiaScan"].push(item.toJSON());
        }
        if (Array.isArray(this.exhibitorDeviceDetails)) {
            data["ExhibitorDeviceDetails"] = [];
            for (let item of this.exhibitorDeviceDetails)
                data["ExhibitorDeviceDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventExhibitorAccess {
    id?: number | null;
    eventExhibitorId?: number | null;
    eventTicketId?: number | null;
    code?: string | null;
    scanType?: number | null;
    isValid?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    loggedOn?: Date | null;
    eventBoothScan?: EventBoothScan[] | null;
    eventExhibitor?: EventExhibitor | null;
    eventTicket?: EventTicket | null;
    user?: User | null;
    user1?: User | null;
    eventSymposiaScan?: EventSymposiaScan[] | null;
    exhibitorDeviceDetails?: ExhibitorDeviceDetails[] | null;
}

export class EventExhibitorPerson implements IEventExhibitorPerson {
    id?: number | null;
    eventExhibitorId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    emailId?: string | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    companyName?: string | null;
    isManualApprove?: boolean | null;
    eventBadge?: EventBadge[] | null;
    eventExhibitor?: EventExhibitor | null;
    userEventArtifact?: UserEventArtifact[] | null;
    eventTicket?: EventTicket[] | null;

    constructor(data?: IEventExhibitorPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.emailId = _data["EmailId"] !== undefined ? _data["EmailId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.companyName = _data["CompanyName"] !== undefined ? _data["CompanyName"] : <any>null;
            this.isManualApprove = _data["IsManualApprove"] !== undefined ? _data["IsManualApprove"] : <any>null;
            if (Array.isArray(_data["EventBadge"])) {
                this.eventBadge = [] as any;
                for (let item of _data["EventBadge"])
                    this.eventBadge!.push(EventBadge.fromJS(item));
            }
            else {
                this.eventBadge = <any>null;
            }
            this.eventExhibitor = _data["EventExhibitor"] ? EventExhibitor.fromJS(_data["EventExhibitor"]) : <any>null;
            if (Array.isArray(_data["UserEventArtifact"])) {
                this.userEventArtifact = [] as any;
                for (let item of _data["UserEventArtifact"])
                    this.userEventArtifact!.push(UserEventArtifact.fromJS(item));
            }
            else {
                this.userEventArtifact = <any>null;
            }
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
        }
    }

    static fromJS(data: any): EventExhibitorPerson {
        data = typeof data === 'object' ? data : {};
        let result = new EventExhibitorPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["EmailId"] = this.emailId !== undefined ? this.emailId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["CompanyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["IsManualApprove"] = this.isManualApprove !== undefined ? this.isManualApprove : <any>null;
        if (Array.isArray(this.eventBadge)) {
            data["EventBadge"] = [];
            for (let item of this.eventBadge)
                data["EventBadge"].push(item.toJSON());
        }
        data["EventExhibitor"] = this.eventExhibitor ? this.eventExhibitor.toJSON() : <any>null;
        if (Array.isArray(this.userEventArtifact)) {
            data["UserEventArtifact"] = [];
            for (let item of this.userEventArtifact)
                data["UserEventArtifact"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventExhibitorPerson {
    id?: number | null;
    eventExhibitorId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    emailId?: string | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    companyName?: string | null;
    isManualApprove?: boolean | null;
    eventBadge?: EventBadge[] | null;
    eventExhibitor?: EventExhibitor | null;
    userEventArtifact?: UserEventArtifact[] | null;
    eventTicket?: EventTicket[] | null;
}

export class EventFee implements IEventFee {
    id?: number | null;
    feeName?: string | null;
    feeTypeId?: number | null;
    applicableTo?: string | null;
    deadlineId?: number | null;
    description?: string | null;
    registrationLimit?: number | null;
    netFee?: number | null;
    eventId?: number | null;
    sortOrder?: number | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    mutualExclusiveId?: number | null;
    isActive?: boolean | null;
    maxQuantityPerPerson?: number | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    feeCategoryId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    whiteListStart?: number | null;
    whiteListEnd?: number | null;
    applicableMemberTypes?: number | null;
    applicableWeekDay?: string | null;
    externalValidFee?: boolean | null;
    externalFeeCode?: number | null;
    event?: Event | null;
    eventDeadLine?: EventDeadLine | null;
    eventFeeCategory?: EventFeeCategory | null;
    eventFeeMutualExclusive?: EventFeeMutualExclusive | null;
    eventFeeType?: EventFeeType | null;
    user?: User | null;
    user1?: User | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;
    eventTicket?: EventTicket[] | null;
    eventTicket1?: EventTicket[] | null;
    sessionFeeMapping?: SessionFeeMapping[] | null;

    constructor(data?: IEventFee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.feeName = _data["FeeName"] !== undefined ? _data["FeeName"] : <any>null;
            this.feeTypeId = _data["FeeTypeId"] !== undefined ? _data["FeeTypeId"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.deadlineId = _data["DeadlineId"] !== undefined ? _data["DeadlineId"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.netFee = _data["NetFee"] !== undefined ? _data["NetFee"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.sortOrder = _data["SortOrder"] !== undefined ? _data["SortOrder"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.mutualExclusiveId = _data["MutualExclusiveId"] !== undefined ? _data["MutualExclusiveId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.maxQuantityPerPerson = _data["MaxQuantityPerPerson"] !== undefined ? _data["MaxQuantityPerPerson"] : <any>null;
            this.isAdmin = _data["IsAdmin"] !== undefined ? _data["IsAdmin"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.isConfirmationLetterRequired = _data["IsConfirmationLetterRequired"] !== undefined ? _data["IsConfirmationLetterRequired"] : <any>null;
            this.whiteListStart = _data["WhiteListStart"] !== undefined ? _data["WhiteListStart"] : <any>null;
            this.whiteListEnd = _data["WhiteListEnd"] !== undefined ? _data["WhiteListEnd"] : <any>null;
            this.applicableMemberTypes = _data["ApplicableMemberTypes"] !== undefined ? _data["ApplicableMemberTypes"] : <any>null;
            this.applicableWeekDay = _data["ApplicableWeekDay"] !== undefined ? _data["ApplicableWeekDay"] : <any>null;
            this.externalValidFee = _data["ExternalValidFee"] !== undefined ? _data["ExternalValidFee"] : <any>null;
            this.externalFeeCode = _data["ExternalFeeCode"] !== undefined ? _data["ExternalFeeCode"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventDeadLine = _data["EventDeadLine"] ? EventDeadLine.fromJS(_data["EventDeadLine"]) : <any>null;
            this.eventFeeCategory = _data["EventFeeCategory"] ? EventFeeCategory.fromJS(_data["EventFeeCategory"]) : <any>null;
            this.eventFeeMutualExclusive = _data["EventFeeMutualExclusive"] ? EventFeeMutualExclusive.fromJS(_data["EventFeeMutualExclusive"]) : <any>null;
            this.eventFeeType = _data["EventFeeType"] ? EventFeeType.fromJS(_data["EventFeeType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventFeeAttendanceGroup"])) {
                this.eventFeeAttendanceGroup = [] as any;
                for (let item of _data["EventFeeAttendanceGroup"])
                    this.eventFeeAttendanceGroup!.push(EventFeeAttendanceGroup.fromJS(item));
            }
            else {
                this.eventFeeAttendanceGroup = <any>null;
            }
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
            if (Array.isArray(_data["EventTicket1"])) {
                this.eventTicket1 = [] as any;
                for (let item of _data["EventTicket1"])
                    this.eventTicket1!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket1 = <any>null;
            }
            if (Array.isArray(_data["SessionFeeMapping"])) {
                this.sessionFeeMapping = [] as any;
                for (let item of _data["SessionFeeMapping"])
                    this.sessionFeeMapping!.push(SessionFeeMapping.fromJS(item));
            }
            else {
                this.sessionFeeMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): EventFee {
        data = typeof data === 'object' ? data : {};
        let result = new EventFee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FeeName"] = this.feeName !== undefined ? this.feeName : <any>null;
        data["FeeTypeId"] = this.feeTypeId !== undefined ? this.feeTypeId : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["DeadlineId"] = this.deadlineId !== undefined ? this.deadlineId : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["NetFee"] = this.netFee !== undefined ? this.netFee : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["MutualExclusiveId"] = this.mutualExclusiveId !== undefined ? this.mutualExclusiveId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["MaxQuantityPerPerson"] = this.maxQuantityPerPerson !== undefined ? this.maxQuantityPerPerson : <any>null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["IsConfirmationLetterRequired"] = this.isConfirmationLetterRequired !== undefined ? this.isConfirmationLetterRequired : <any>null;
        data["WhiteListStart"] = this.whiteListStart !== undefined ? this.whiteListStart : <any>null;
        data["WhiteListEnd"] = this.whiteListEnd !== undefined ? this.whiteListEnd : <any>null;
        data["ApplicableMemberTypes"] = this.applicableMemberTypes !== undefined ? this.applicableMemberTypes : <any>null;
        data["ApplicableWeekDay"] = this.applicableWeekDay !== undefined ? this.applicableWeekDay : <any>null;
        data["ExternalValidFee"] = this.externalValidFee !== undefined ? this.externalValidFee : <any>null;
        data["ExternalFeeCode"] = this.externalFeeCode !== undefined ? this.externalFeeCode : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventDeadLine"] = this.eventDeadLine ? this.eventDeadLine.toJSON() : <any>null;
        data["EventFeeCategory"] = this.eventFeeCategory ? this.eventFeeCategory.toJSON() : <any>null;
        data["EventFeeMutualExclusive"] = this.eventFeeMutualExclusive ? this.eventFeeMutualExclusive.toJSON() : <any>null;
        data["EventFeeType"] = this.eventFeeType ? this.eventFeeType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventFeeAttendanceGroup)) {
            data["EventFeeAttendanceGroup"] = [];
            for (let item of this.eventFeeAttendanceGroup)
                data["EventFeeAttendanceGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicket1)) {
            data["EventTicket1"] = [];
            for (let item of this.eventTicket1)
                data["EventTicket1"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionFeeMapping)) {
            data["SessionFeeMapping"] = [];
            for (let item of this.sessionFeeMapping)
                data["SessionFeeMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventFee {
    id?: number | null;
    feeName?: string | null;
    feeTypeId?: number | null;
    applicableTo?: string | null;
    deadlineId?: number | null;
    description?: string | null;
    registrationLimit?: number | null;
    netFee?: number | null;
    eventId?: number | null;
    sortOrder?: number | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    mutualExclusiveId?: number | null;
    isActive?: boolean | null;
    maxQuantityPerPerson?: number | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    feeCategoryId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    whiteListStart?: number | null;
    whiteListEnd?: number | null;
    applicableMemberTypes?: number | null;
    applicableWeekDay?: string | null;
    externalValidFee?: boolean | null;
    externalFeeCode?: number | null;
    event?: Event | null;
    eventDeadLine?: EventDeadLine | null;
    eventFeeCategory?: EventFeeCategory | null;
    eventFeeMutualExclusive?: EventFeeMutualExclusive | null;
    eventFeeType?: EventFeeType | null;
    user?: User | null;
    user1?: User | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;
    eventTicket?: EventTicket[] | null;
    eventTicket1?: EventTicket[] | null;
    sessionFeeMapping?: SessionFeeMapping[] | null;
}

export class EventRegistration implements IEventRegistration {
    id?: number | null;
    eventId?: number | null;
    userId?: string | null;
    status?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    userAddressId?: number | null;
    groupId?: number | null;
    eventExhibitorId?: number | null;
    impersonateUserId?: string | null;
    dietaryRequirement?: string | null;
    isDelete?: boolean | null;
    mergedUserId?: string | null;
    duplicateEventRegistrationId?: number | null;
    artifactsStatus?: number | null;
    event?: Event | null;
    eventExhibitor?: EventExhibitor | null;
    eventGroup?: EventGroup | null;
    user?: User | null;
    eventRegistrationStatus?: EventRegistrationStatus | null;
    user1?: User | null;
    userAddress?: UserAddress | null;
    eventTicket?: EventTicket[] | null;

    constructor(data?: IEventRegistration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.userAddressId = _data["UserAddressId"] !== undefined ? _data["UserAddressId"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.dietaryRequirement = _data["DietaryRequirement"] !== undefined ? _data["DietaryRequirement"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.duplicateEventRegistrationId = _data["DuplicateEventRegistrationId"] !== undefined ? _data["DuplicateEventRegistrationId"] : <any>null;
            this.artifactsStatus = _data["ArtifactsStatus"] !== undefined ? _data["ArtifactsStatus"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventExhibitor = _data["EventExhibitor"] ? EventExhibitor.fromJS(_data["EventExhibitor"]) : <any>null;
            this.eventGroup = _data["EventGroup"] ? EventGroup.fromJS(_data["EventGroup"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.eventRegistrationStatus = _data["EventRegistrationStatus"] ? EventRegistrationStatus.fromJS(_data["EventRegistrationStatus"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
        }
    }

    static fromJS(data: any): EventRegistration {
        data = typeof data === 'object' ? data : {};
        let result = new EventRegistration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["UserAddressId"] = this.userAddressId !== undefined ? this.userAddressId : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["DietaryRequirement"] = this.dietaryRequirement !== undefined ? this.dietaryRequirement : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["DuplicateEventRegistrationId"] = this.duplicateEventRegistrationId !== undefined ? this.duplicateEventRegistrationId : <any>null;
        data["ArtifactsStatus"] = this.artifactsStatus !== undefined ? this.artifactsStatus : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventExhibitor"] = this.eventExhibitor ? this.eventExhibitor.toJSON() : <any>null;
        data["EventGroup"] = this.eventGroup ? this.eventGroup.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["EventRegistrationStatus"] = this.eventRegistrationStatus ? this.eventRegistrationStatus.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventRegistration {
    id?: number | null;
    eventId?: number | null;
    userId?: string | null;
    status?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    userAddressId?: number | null;
    groupId?: number | null;
    eventExhibitorId?: number | null;
    impersonateUserId?: string | null;
    dietaryRequirement?: string | null;
    isDelete?: boolean | null;
    mergedUserId?: string | null;
    duplicateEventRegistrationId?: number | null;
    artifactsStatus?: number | null;
    event?: Event | null;
    eventExhibitor?: EventExhibitor | null;
    eventGroup?: EventGroup | null;
    user?: User | null;
    eventRegistrationStatus?: EventRegistrationStatus | null;
    user1?: User | null;
    userAddress?: UserAddress | null;
    eventTicket?: EventTicket[] | null;
}

export class EventTicketCreditNoteMapping implements IEventTicketCreditNoteMapping {
    eventTicketId?: number | null;
    creditNoteId?: number | null;
    isActive?: boolean | null;
    creditNote?: CreditNote | null;
    eventTicket?: EventTicket | null;

    constructor(data?: IEventTicketCreditNoteMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventTicketId = _data["EventTicketId"] !== undefined ? _data["EventTicketId"] : <any>null;
            this.creditNoteId = _data["CreditNoteId"] !== undefined ? _data["CreditNoteId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.creditNote = _data["CreditNote"] ? CreditNote.fromJS(_data["CreditNote"]) : <any>null;
            this.eventTicket = _data["EventTicket"] ? EventTicket.fromJS(_data["EventTicket"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTicketCreditNoteMapping {
        data = typeof data === 'object' ? data : {};
        let result = new EventTicketCreditNoteMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventTicketId"] = this.eventTicketId !== undefined ? this.eventTicketId : <any>null;
        data["CreditNoteId"] = this.creditNoteId !== undefined ? this.creditNoteId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreditNote"] = this.creditNote ? this.creditNote.toJSON() : <any>null;
        data["EventTicket"] = this.eventTicket ? this.eventTicket.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTicketCreditNoteMapping {
    eventTicketId?: number | null;
    creditNoteId?: number | null;
    isActive?: boolean | null;
    creditNote?: CreditNote | null;
    eventTicket?: EventTicket | null;
}

export class EventTicketPaymentDemand implements IEventTicketPaymentDemand {
    eventTicketId?: number | null;
    paymentDemandId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicket | null;
    paymentDemand?: PaymentDemand | null;

    constructor(data?: IEventTicketPaymentDemand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventTicketId = _data["EventTicketId"] !== undefined ? _data["EventTicketId"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.eventTicket = _data["EventTicket"] ? EventTicket.fromJS(_data["EventTicket"]) : <any>null;
            this.paymentDemand = _data["PaymentDemand"] ? PaymentDemand.fromJS(_data["PaymentDemand"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTicketPaymentDemand {
        data = typeof data === 'object' ? data : {};
        let result = new EventTicketPaymentDemand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventTicketId"] = this.eventTicketId !== undefined ? this.eventTicketId : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["EventTicket"] = this.eventTicket ? this.eventTicket.toJSON() : <any>null;
        data["PaymentDemand"] = this.paymentDemand ? this.paymentDemand.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTicketPaymentDemand {
    eventTicketId?: number | null;
    paymentDemandId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicket | null;
    paymentDemand?: PaymentDemand | null;
}

export class AltaPayUserDeviceMapping implements IAltaPayUserDeviceMapping {
    id?: number | null;
    userId?: string | null;
    pedIp?: string | null;
    pedPort?: string | null;
    isActive?: boolean | null;
    user?: User | null;

    constructor(data?: IAltaPayUserDeviceMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.pedIp = _data["PedIp"] !== undefined ? _data["PedIp"] : <any>null;
            this.pedPort = _data["PedPort"] !== undefined ? _data["PedPort"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): AltaPayUserDeviceMapping {
        data = typeof data === 'object' ? data : {};
        let result = new AltaPayUserDeviceMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["PedIp"] = this.pedIp !== undefined ? this.pedIp : <any>null;
        data["PedPort"] = this.pedPort !== undefined ? this.pedPort : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IAltaPayUserDeviceMapping {
    id?: number | null;
    userId?: string | null;
    pedIp?: string | null;
    pedPort?: string | null;
    isActive?: boolean | null;
    user?: User | null;
}

export class AttestationType implements IAttestationType {
    id?: number | null;
    name?: string | null;
    attestationTypeTranslation?: AttestationTypeTranslation[] | null;
    user?: User[] | null;

    constructor(data?: IAttestationType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["AttestationTypeTranslation"])) {
                this.attestationTypeTranslation = [] as any;
                for (let item of _data["AttestationTypeTranslation"])
                    this.attestationTypeTranslation!.push(AttestationTypeTranslation.fromJS(item));
            }
            else {
                this.attestationTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["User"])) {
                this.user = [] as any;
                for (let item of _data["User"])
                    this.user!.push(User.fromJS(item));
            }
            else {
                this.user = <any>null;
            }
        }
    }

    static fromJS(data: any): AttestationType {
        data = typeof data === 'object' ? data : {};
        let result = new AttestationType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.attestationTypeTranslation)) {
            data["AttestationTypeTranslation"] = [];
            for (let item of this.attestationTypeTranslation)
                data["AttestationTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.user)) {
            data["User"] = [];
            for (let item of this.user)
                data["User"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAttestationType {
    id?: number | null;
    name?: string | null;
    attestationTypeTranslation?: AttestationTypeTranslation[] | null;
    user?: User[] | null;
}

export class AuditLog implements IAuditLog {
    id?: number | null;
    auditLogTypeId?: number | null;
    actionBy?: string | null;
    actionOn?: Date | null;
    userId?: string | null;
    description?: string | null;
    moduleId?: number | null;
    impersonateUserId?: string | null;
    module?: Module | null;
    auditLogType?: AuditLogType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IAuditLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.auditLogTypeId = _data["AuditLogTypeId"] !== undefined ? _data["AuditLogTypeId"] : <any>null;
            this.actionBy = _data["ActionBy"] !== undefined ? _data["ActionBy"] : <any>null;
            this.actionOn = _data["ActionOn"] ? new Date(_data["ActionOn"].toString()) : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.module = _data["Module"] ? Module.fromJS(_data["Module"]) : <any>null;
            this.auditLogType = _data["AuditLogType"] ? AuditLogType.fromJS(_data["AuditLogType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): AuditLog {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["AuditLogTypeId"] = this.auditLogTypeId !== undefined ? this.auditLogTypeId : <any>null;
        data["ActionBy"] = this.actionBy !== undefined ? this.actionBy : <any>null;
        data["ActionOn"] = this.actionOn ? this.actionOn.toISOString() : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["Module"] = this.module ? this.module.toJSON() : <any>null;
        data["AuditLogType"] = this.auditLogType ? this.auditLogType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IAuditLog {
    id?: number | null;
    auditLogTypeId?: number | null;
    actionBy?: string | null;
    actionOn?: Date | null;
    userId?: string | null;
    description?: string | null;
    moduleId?: number | null;
    impersonateUserId?: string | null;
    module?: Module | null;
    auditLogType?: AuditLogType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class BankDetail implements IBankDetail {
    id?: number | null;
    organisationId?: number | null;
    bankName?: string | null;
    accountName?: string | null;
    accountNumber?: string | null;
    bankCode?: string | null;
    swiftCode?: string | null;
    iBANNumber?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    referenceTypeId?: number | null;
    currencyId?: number | null;
    currency?: Currency | null;
    organisation?: Organisation | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IBankDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.organisationId = _data["OrganisationId"] !== undefined ? _data["OrganisationId"] : <any>null;
            this.bankName = _data["BankName"] !== undefined ? _data["BankName"] : <any>null;
            this.accountName = _data["AccountName"] !== undefined ? _data["AccountName"] : <any>null;
            this.accountNumber = _data["AccountNumber"] !== undefined ? _data["AccountNumber"] : <any>null;
            this.bankCode = _data["BankCode"] !== undefined ? _data["BankCode"] : <any>null;
            this.swiftCode = _data["SwiftCode"] !== undefined ? _data["SwiftCode"] : <any>null;
            this.iBANNumber = _data["IBANNumber"] !== undefined ? _data["IBANNumber"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.referenceTypeId = _data["ReferenceTypeId"] !== undefined ? _data["ReferenceTypeId"] : <any>null;
            this.currencyId = _data["CurrencyId"] !== undefined ? _data["CurrencyId"] : <any>null;
            this.currency = _data["Currency"] ? Currency.fromJS(_data["Currency"]) : <any>null;
            this.organisation = _data["Organisation"] ? Organisation.fromJS(_data["Organisation"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): BankDetail {
        data = typeof data === 'object' ? data : {};
        let result = new BankDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["OrganisationId"] = this.organisationId !== undefined ? this.organisationId : <any>null;
        data["BankName"] = this.bankName !== undefined ? this.bankName : <any>null;
        data["AccountName"] = this.accountName !== undefined ? this.accountName : <any>null;
        data["AccountNumber"] = this.accountNumber !== undefined ? this.accountNumber : <any>null;
        data["BankCode"] = this.bankCode !== undefined ? this.bankCode : <any>null;
        data["SwiftCode"] = this.swiftCode !== undefined ? this.swiftCode : <any>null;
        data["IBANNumber"] = this.iBANNumber !== undefined ? this.iBANNumber : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ReferenceTypeId"] = this.referenceTypeId !== undefined ? this.referenceTypeId : <any>null;
        data["CurrencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        data["Currency"] = this.currency ? this.currency.toJSON() : <any>null;
        data["Organisation"] = this.organisation ? this.organisation.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IBankDetail {
    id?: number | null;
    organisationId?: number | null;
    bankName?: string | null;
    accountName?: string | null;
    accountNumber?: string | null;
    bankCode?: string | null;
    swiftCode?: string | null;
    iBANNumber?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    referenceTypeId?: number | null;
    currencyId?: number | null;
    currency?: Currency | null;
    organisation?: Organisation | null;
    user?: User | null;
    user1?: User | null;
}

export class Committee implements ICommittee {
    id?: number | null;
    userId?: string | null;
    committeeRoleId?: number | null;
    startOn?: Date | null;
    endOn?: Date | null;
    comments?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isActive?: boolean | null;
    committeeRole?: CommitteeRole | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: ICommittee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.committeeRoleId = _data["CommitteeRoleId"] !== undefined ? _data["CommitteeRoleId"] : <any>null;
            this.startOn = _data["StartOn"] ? new Date(_data["StartOn"].toString()) : <any>null;
            this.endOn = _data["EndOn"] ? new Date(_data["EndOn"].toString()) : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.committeeRole = _data["CommitteeRole"] ? CommitteeRole.fromJS(_data["CommitteeRole"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): Committee {
        data = typeof data === 'object' ? data : {};
        let result = new Committee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["CommitteeRoleId"] = this.committeeRoleId !== undefined ? this.committeeRoleId : <any>null;
        data["StartOn"] = this.startOn ? this.startOn.toISOString() : <any>null;
        data["EndOn"] = this.endOn ? this.endOn.toISOString() : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CommitteeRole"] = this.committeeRole ? this.committeeRole.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface ICommittee {
    id?: number | null;
    userId?: string | null;
    committeeRoleId?: number | null;
    startOn?: Date | null;
    endOn?: Date | null;
    comments?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isActive?: boolean | null;
    committeeRole?: CommitteeRole | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class CommitteeList implements ICommitteeList {
    id?: number | null;
    name?: string | null;
    parentId?: number | null;
    canAddMember?: boolean | null;
    maxMembers?: number | null;
    maxConsecutiveDuration?: number | null;
    isActive?: boolean | null;
    applicableTo?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDOIRequired?: boolean | null;
    committeeList1?: CommitteeList[] | null;
    committeeList2?: CommitteeList | null;
    user?: User | null;
    user1?: User | null;
    committeeTaskForceRole?: CommitteeTaskForceRole[] | null;
    selfNomination?: SelfNomination[] | null;

    constructor(data?: ICommitteeList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.parentId = _data["ParentId"] !== undefined ? _data["ParentId"] : <any>null;
            this.canAddMember = _data["CanAddMember"] !== undefined ? _data["CanAddMember"] : <any>null;
            this.maxMembers = _data["MaxMembers"] !== undefined ? _data["MaxMembers"] : <any>null;
            this.maxConsecutiveDuration = _data["MaxConsecutiveDuration"] !== undefined ? _data["MaxConsecutiveDuration"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isDOIRequired = _data["IsDOIRequired"] !== undefined ? _data["IsDOIRequired"] : <any>null;
            if (Array.isArray(_data["CommitteeList1"])) {
                this.committeeList1 = [] as any;
                for (let item of _data["CommitteeList1"])
                    this.committeeList1!.push(CommitteeList.fromJS(item));
            }
            else {
                this.committeeList1 = <any>null;
            }
            this.committeeList2 = _data["CommitteeList2"] ? CommitteeList.fromJS(_data["CommitteeList2"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["CommitteeTaskForceRole"])) {
                this.committeeTaskForceRole = [] as any;
                for (let item of _data["CommitteeTaskForceRole"])
                    this.committeeTaskForceRole!.push(CommitteeTaskForceRole.fromJS(item));
            }
            else {
                this.committeeTaskForceRole = <any>null;
            }
            if (Array.isArray(_data["SelfNomination"])) {
                this.selfNomination = [] as any;
                for (let item of _data["SelfNomination"])
                    this.selfNomination!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination = <any>null;
            }
        }
    }

    static fromJS(data: any): CommitteeList {
        data = typeof data === 'object' ? data : {};
        let result = new CommitteeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["ParentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["CanAddMember"] = this.canAddMember !== undefined ? this.canAddMember : <any>null;
        data["MaxMembers"] = this.maxMembers !== undefined ? this.maxMembers : <any>null;
        data["MaxConsecutiveDuration"] = this.maxConsecutiveDuration !== undefined ? this.maxConsecutiveDuration : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsDOIRequired"] = this.isDOIRequired !== undefined ? this.isDOIRequired : <any>null;
        if (Array.isArray(this.committeeList1)) {
            data["CommitteeList1"] = [];
            for (let item of this.committeeList1)
                data["CommitteeList1"].push(item.toJSON());
        }
        data["CommitteeList2"] = this.committeeList2 ? this.committeeList2.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.committeeTaskForceRole)) {
            data["CommitteeTaskForceRole"] = [];
            for (let item of this.committeeTaskForceRole)
                data["CommitteeTaskForceRole"].push(item.toJSON());
        }
        if (Array.isArray(this.selfNomination)) {
            data["SelfNomination"] = [];
            for (let item of this.selfNomination)
                data["SelfNomination"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICommitteeList {
    id?: number | null;
    name?: string | null;
    parentId?: number | null;
    canAddMember?: boolean | null;
    maxMembers?: number | null;
    maxConsecutiveDuration?: number | null;
    isActive?: boolean | null;
    applicableTo?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDOIRequired?: boolean | null;
    committeeList1?: CommitteeList[] | null;
    committeeList2?: CommitteeList | null;
    user?: User | null;
    user1?: User | null;
    committeeTaskForceRole?: CommitteeTaskForceRole[] | null;
    selfNomination?: SelfNomination[] | null;
}

export class CommitteeTaskForceRole implements ICommitteeTaskForceRole {
    id?: number | null;
    name?: string | null;
    committeeListId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    committeeList?: CommitteeList | null;
    user?: User | null;
    user1?: User | null;
    selfNomination?: SelfNomination[] | null;

    constructor(data?: ICommitteeTaskForceRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.committeeListId = _data["CommitteeListId"] !== undefined ? _data["CommitteeListId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.committeeList = _data["CommitteeList"] ? CommitteeList.fromJS(_data["CommitteeList"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["SelfNomination"])) {
                this.selfNomination = [] as any;
                for (let item of _data["SelfNomination"])
                    this.selfNomination!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination = <any>null;
            }
        }
    }

    static fromJS(data: any): CommitteeTaskForceRole {
        data = typeof data === 'object' ? data : {};
        let result = new CommitteeTaskForceRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CommitteeListId"] = this.committeeListId !== undefined ? this.committeeListId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["CommitteeList"] = this.committeeList ? this.committeeList.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.selfNomination)) {
            data["SelfNomination"] = [];
            for (let item of this.selfNomination)
                data["SelfNomination"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICommitteeTaskForceRole {
    id?: number | null;
    name?: string | null;
    committeeListId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    committeeList?: CommitteeList | null;
    user?: User | null;
    user1?: User | null;
    selfNomination?: SelfNomination[] | null;
}

export class CreditNote implements ICreditNote {
    id?: number | null;
    invoiceId?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    impersonateUserId?: string | null;
    paymentType?: number | null;
    creditNoteNumber?: string | null;
    fileStatusId?: number | null;
    gatewayRefundId?: string | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    isDelete?: boolean | null;
    revisionNumber?: number | null;
    actualAmount?: number | null;
    user?: User | null;
    paymentType1?: PaymentType | null;
    user1?: User | null;
    creditNoteDetail?: CreditNoteDetail[] | null;
    eventTicketCreditNoteMapping?: EventTicketCreditNoteMapping[] | null;
    invoice?: Invoice | null;

    constructor(data?: ICreditNote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.refundDate = _data["RefundDate"] ? new Date(_data["RefundDate"].toString()) : <any>null;
            this.refundReference = _data["RefundReference"] !== undefined ? _data["RefundReference"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            this.creditNoteNumber = _data["CreditNoteNumber"] !== undefined ? _data["CreditNoteNumber"] : <any>null;
            this.fileStatusId = _data["FileStatusId"] !== undefined ? _data["FileStatusId"] : <any>null;
            this.gatewayRefundId = _data["GatewayRefundId"] !== undefined ? _data["GatewayRefundId"] : <any>null;
            this.cancellationPercent = _data["CancellationPercent"] !== undefined ? _data["CancellationPercent"] : <any>null;
            this.refundStatus = _data["RefundStatus"] !== undefined ? _data["RefundStatus"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.revisionNumber = _data["RevisionNumber"] !== undefined ? _data["RevisionNumber"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.paymentType1 = _data["PaymentType1"] ? PaymentType.fromJS(_data["PaymentType1"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["CreditNoteDetail"])) {
                this.creditNoteDetail = [] as any;
                for (let item of _data["CreditNoteDetail"])
                    this.creditNoteDetail!.push(CreditNoteDetail.fromJS(item));
            }
            else {
                this.creditNoteDetail = <any>null;
            }
            if (Array.isArray(_data["EventTicketCreditNoteMapping"])) {
                this.eventTicketCreditNoteMapping = [] as any;
                for (let item of _data["EventTicketCreditNoteMapping"])
                    this.eventTicketCreditNoteMapping!.push(EventTicketCreditNoteMapping.fromJS(item));
            }
            else {
                this.eventTicketCreditNoteMapping = <any>null;
            }
            this.invoice = _data["Invoice"] ? Invoice.fromJS(_data["Invoice"]) : <any>null;
        }
    }

    static fromJS(data: any): CreditNote {
        data = typeof data === 'object' ? data : {};
        let result = new CreditNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["RefundDate"] = this.refundDate ? this.refundDate.toISOString() : <any>null;
        data["RefundReference"] = this.refundReference !== undefined ? this.refundReference : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        data["CreditNoteNumber"] = this.creditNoteNumber !== undefined ? this.creditNoteNumber : <any>null;
        data["FileStatusId"] = this.fileStatusId !== undefined ? this.fileStatusId : <any>null;
        data["GatewayRefundId"] = this.gatewayRefundId !== undefined ? this.gatewayRefundId : <any>null;
        data["CancellationPercent"] = this.cancellationPercent !== undefined ? this.cancellationPercent : <any>null;
        data["RefundStatus"] = this.refundStatus !== undefined ? this.refundStatus : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["RevisionNumber"] = this.revisionNumber !== undefined ? this.revisionNumber : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["PaymentType1"] = this.paymentType1 ? this.paymentType1.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.creditNoteDetail)) {
            data["CreditNoteDetail"] = [];
            for (let item of this.creditNoteDetail)
                data["CreditNoteDetail"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicketCreditNoteMapping)) {
            data["EventTicketCreditNoteMapping"] = [];
            for (let item of this.eventTicketCreditNoteMapping)
                data["EventTicketCreditNoteMapping"].push(item.toJSON());
        }
        data["Invoice"] = this.invoice ? this.invoice.toJSON() : <any>null;
        return data;
    }
}

export interface ICreditNote {
    id?: number | null;
    invoiceId?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    impersonateUserId?: string | null;
    paymentType?: number | null;
    creditNoteNumber?: string | null;
    fileStatusId?: number | null;
    gatewayRefundId?: string | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    isDelete?: boolean | null;
    revisionNumber?: number | null;
    actualAmount?: number | null;
    user?: User | null;
    paymentType1?: PaymentType | null;
    user1?: User | null;
    creditNoteDetail?: CreditNoteDetail[] | null;
    eventTicketCreditNoteMapping?: EventTicketCreditNoteMapping[] | null;
    invoice?: Invoice | null;
}

export class CreditNoteDetail implements ICreditNoteDetail {
    id?: number | null;
    creditNoteId?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    paymentType?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    creditNote?: CreditNote | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: ICreditNoteDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.creditNoteId = _data["CreditNoteId"] !== undefined ? _data["CreditNoteId"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.refundDate = _data["RefundDate"] ? new Date(_data["RefundDate"].toString()) : <any>null;
            this.refundReference = _data["RefundReference"] !== undefined ? _data["RefundReference"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.creditNote = _data["CreditNote"] ? CreditNote.fromJS(_data["CreditNote"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): CreditNoteDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CreditNoteDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["CreditNoteId"] = this.creditNoteId !== undefined ? this.creditNoteId : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["RefundDate"] = this.refundDate ? this.refundDate.toISOString() : <any>null;
        data["RefundReference"] = this.refundReference !== undefined ? this.refundReference : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["CreditNote"] = this.creditNote ? this.creditNote.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface ICreditNoteDetail {
    id?: number | null;
    creditNoteId?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    paymentType?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    creditNote?: CreditNote | null;
    user?: User | null;
    user1?: User | null;
}

export class CurrentMembership implements ICurrentMembership {
    userId?: string | null;
    statusForMembership?: number | null;
    statusForEvent?: number | null;
    typeId?: number | null;
    previousStatusForMembership?: number | null;
    previousStatusForEvent?: number | null;
    previousTypeId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    membershipStatus?: MembershipStatus | null;
    membershipStatus1?: MembershipStatus | null;
    membershipType?: MembershipType | null;
    user?: User | null;
    membershipStatus2?: MembershipStatus | null;
    membershipStatus3?: MembershipStatus | null;
    membershipType1?: MembershipType | null;

    constructor(data?: ICurrentMembership) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.statusForMembership = _data["StatusForMembership"] !== undefined ? _data["StatusForMembership"] : <any>null;
            this.statusForEvent = _data["StatusForEvent"] !== undefined ? _data["StatusForEvent"] : <any>null;
            this.typeId = _data["TypeId"] !== undefined ? _data["TypeId"] : <any>null;
            this.previousStatusForMembership = _data["PreviousStatusForMembership"] !== undefined ? _data["PreviousStatusForMembership"] : <any>null;
            this.previousStatusForEvent = _data["PreviousStatusForEvent"] !== undefined ? _data["PreviousStatusForEvent"] : <any>null;
            this.previousTypeId = _data["PreviousTypeId"] !== undefined ? _data["PreviousTypeId"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.membershipStatus = _data["MembershipStatus"] ? MembershipStatus.fromJS(_data["MembershipStatus"]) : <any>null;
            this.membershipStatus1 = _data["MembershipStatus1"] ? MembershipStatus.fromJS(_data["MembershipStatus1"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.membershipStatus2 = _data["MembershipStatus2"] ? MembershipStatus.fromJS(_data["MembershipStatus2"]) : <any>null;
            this.membershipStatus3 = _data["MembershipStatus3"] ? MembershipStatus.fromJS(_data["MembershipStatus3"]) : <any>null;
            this.membershipType1 = _data["MembershipType1"] ? MembershipType.fromJS(_data["MembershipType1"]) : <any>null;
        }
    }

    static fromJS(data: any): CurrentMembership {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentMembership();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["StatusForMembership"] = this.statusForMembership !== undefined ? this.statusForMembership : <any>null;
        data["StatusForEvent"] = this.statusForEvent !== undefined ? this.statusForEvent : <any>null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["PreviousStatusForMembership"] = this.previousStatusForMembership !== undefined ? this.previousStatusForMembership : <any>null;
        data["PreviousStatusForEvent"] = this.previousStatusForEvent !== undefined ? this.previousStatusForEvent : <any>null;
        data["PreviousTypeId"] = this.previousTypeId !== undefined ? this.previousTypeId : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["MembershipStatus"] = this.membershipStatus ? this.membershipStatus.toJSON() : <any>null;
        data["MembershipStatus1"] = this.membershipStatus1 ? this.membershipStatus1.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["MembershipStatus2"] = this.membershipStatus2 ? this.membershipStatus2.toJSON() : <any>null;
        data["MembershipStatus3"] = this.membershipStatus3 ? this.membershipStatus3.toJSON() : <any>null;
        data["MembershipType1"] = this.membershipType1 ? this.membershipType1.toJSON() : <any>null;
        return data;
    }
}

export interface ICurrentMembership {
    userId?: string | null;
    statusForMembership?: number | null;
    statusForEvent?: number | null;
    typeId?: number | null;
    previousStatusForMembership?: number | null;
    previousStatusForEvent?: number | null;
    previousTypeId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    membershipStatus?: MembershipStatus | null;
    membershipStatus1?: MembershipStatus | null;
    membershipType?: MembershipType | null;
    user?: User | null;
    membershipStatus2?: MembershipStatus | null;
    membershipStatus3?: MembershipStatus | null;
    membershipType1?: MembershipType | null;
}

export class DeviceDetails implements IDeviceDetails {
    id?: number | null;
    deviceId?: string | null;
    eventId?: number | null;
    lastSynchDate?: Date | null;
    isAttendancePushed?: boolean | null;
    attendancePushedOn?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    iPAddress?: string | null;
    mACAddress?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IDeviceDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.deviceId = _data["DeviceId"] !== undefined ? _data["DeviceId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.lastSynchDate = _data["LastSynchDate"] ? new Date(_data["LastSynchDate"].toString()) : <any>null;
            this.isAttendancePushed = _data["IsAttendancePushed"] !== undefined ? _data["IsAttendancePushed"] : <any>null;
            this.attendancePushedOn = _data["AttendancePushedOn"] ? new Date(_data["AttendancePushedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.iPAddress = _data["IPAddress"] !== undefined ? _data["IPAddress"] : <any>null;
            this.mACAddress = _data["MACAddress"] !== undefined ? _data["MACAddress"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): DeviceDetails {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["LastSynchDate"] = this.lastSynchDate ? this.lastSynchDate.toISOString() : <any>null;
        data["IsAttendancePushed"] = this.isAttendancePushed !== undefined ? this.isAttendancePushed : <any>null;
        data["AttendancePushedOn"] = this.attendancePushedOn ? this.attendancePushedOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IPAddress"] = this.iPAddress !== undefined ? this.iPAddress : <any>null;
        data["MACAddress"] = this.mACAddress !== undefined ? this.mACAddress : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IDeviceDetails {
    id?: number | null;
    deviceId?: string | null;
    eventId?: number | null;
    lastSynchDate?: Date | null;
    isAttendancePushed?: boolean | null;
    attendancePushedOn?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    iPAddress?: string | null;
    mACAddress?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
}

export class Discount implements IDiscount {
    id?: number | null;
    feeId?: number | null;
    amount?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    fee?: Fee | null;
    user?: User | null;
    user1?: User | null;
    invoiceDiscountMapping?: InvoiceDiscountMapping[] | null;

    constructor(data?: IDiscount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifedOn = _data["ModifedOn"] ? new Date(_data["ModifedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.fee = _data["Fee"] ? Fee.fromJS(_data["Fee"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["InvoiceDiscountMapping"])) {
                this.invoiceDiscountMapping = [] as any;
                for (let item of _data["InvoiceDiscountMapping"])
                    this.invoiceDiscountMapping!.push(InvoiceDiscountMapping.fromJS(item));
            }
            else {
                this.invoiceDiscountMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): Discount {
        data = typeof data === 'object' ? data : {};
        let result = new Discount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifedOn"] = this.modifedOn ? this.modifedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["Fee"] = this.fee ? this.fee.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.invoiceDiscountMapping)) {
            data["InvoiceDiscountMapping"] = [];
            for (let item of this.invoiceDiscountMapping)
                data["InvoiceDiscountMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDiscount {
    id?: number | null;
    feeId?: number | null;
    amount?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    fee?: Fee | null;
    user?: User | null;
    user1?: User | null;
    invoiceDiscountMapping?: InvoiceDiscountMapping[] | null;
}

export class EmailLog implements IEmailLog {
    id?: number | null;
    emailTypeId?: number | null;
    userId?: string | null;
    emailTo?: string | null;
    subject?: string | null;
    mailContent?: string | null;
    queuedOn?: Date | null;
    sentBy?: string | null;
    moduleId?: number | null;
    emailStatusId?: number | null;
    emailFrom?: string | null;
    emailCC?: string | null;
    scheduleOn?: Date | null;
    sentStatusOn?: Date | null;
    retryCount?: number | null;
    dueDateTill?: Date | null;
    attachmentPath?: string | null;
    impersonateUserId?: string | null;
    emailStatus?: EmailStatus | null;
    emailType?: EmailType | null;
    module?: Module | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEmailLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.emailTypeId = _data["EmailTypeId"] !== undefined ? _data["EmailTypeId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.emailTo = _data["EmailTo"] !== undefined ? _data["EmailTo"] : <any>null;
            this.subject = _data["Subject"] !== undefined ? _data["Subject"] : <any>null;
            this.mailContent = _data["MailContent"] !== undefined ? _data["MailContent"] : <any>null;
            this.queuedOn = _data["QueuedOn"] ? new Date(_data["QueuedOn"].toString()) : <any>null;
            this.sentBy = _data["SentBy"] !== undefined ? _data["SentBy"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            this.emailStatusId = _data["EmailStatusId"] !== undefined ? _data["EmailStatusId"] : <any>null;
            this.emailFrom = _data["EmailFrom"] !== undefined ? _data["EmailFrom"] : <any>null;
            this.emailCC = _data["EmailCC"] !== undefined ? _data["EmailCC"] : <any>null;
            this.scheduleOn = _data["ScheduleOn"] ? new Date(_data["ScheduleOn"].toString()) : <any>null;
            this.sentStatusOn = _data["SentStatusOn"] ? new Date(_data["SentStatusOn"].toString()) : <any>null;
            this.retryCount = _data["RetryCount"] !== undefined ? _data["RetryCount"] : <any>null;
            this.dueDateTill = _data["DueDateTill"] ? new Date(_data["DueDateTill"].toString()) : <any>null;
            this.attachmentPath = _data["AttachmentPath"] !== undefined ? _data["AttachmentPath"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.emailStatus = _data["EmailStatus"] ? EmailStatus.fromJS(_data["EmailStatus"]) : <any>null;
            this.emailType = _data["EmailType"] ? EmailType.fromJS(_data["EmailType"]) : <any>null;
            this.module = _data["Module"] ? Module.fromJS(_data["Module"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailLog {
        data = typeof data === 'object' ? data : {};
        let result = new EmailLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EmailTypeId"] = this.emailTypeId !== undefined ? this.emailTypeId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EmailTo"] = this.emailTo !== undefined ? this.emailTo : <any>null;
        data["Subject"] = this.subject !== undefined ? this.subject : <any>null;
        data["MailContent"] = this.mailContent !== undefined ? this.mailContent : <any>null;
        data["QueuedOn"] = this.queuedOn ? this.queuedOn.toISOString() : <any>null;
        data["SentBy"] = this.sentBy !== undefined ? this.sentBy : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        data["EmailStatusId"] = this.emailStatusId !== undefined ? this.emailStatusId : <any>null;
        data["EmailFrom"] = this.emailFrom !== undefined ? this.emailFrom : <any>null;
        data["EmailCC"] = this.emailCC !== undefined ? this.emailCC : <any>null;
        data["ScheduleOn"] = this.scheduleOn ? this.scheduleOn.toISOString() : <any>null;
        data["SentStatusOn"] = this.sentStatusOn ? this.sentStatusOn.toISOString() : <any>null;
        data["RetryCount"] = this.retryCount !== undefined ? this.retryCount : <any>null;
        data["DueDateTill"] = this.dueDateTill ? this.dueDateTill.toISOString() : <any>null;
        data["AttachmentPath"] = this.attachmentPath !== undefined ? this.attachmentPath : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["EmailStatus"] = this.emailStatus ? this.emailStatus.toJSON() : <any>null;
        data["EmailType"] = this.emailType ? this.emailType.toJSON() : <any>null;
        data["Module"] = this.module ? this.module.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailLog {
    id?: number | null;
    emailTypeId?: number | null;
    userId?: string | null;
    emailTo?: string | null;
    subject?: string | null;
    mailContent?: string | null;
    queuedOn?: Date | null;
    sentBy?: string | null;
    moduleId?: number | null;
    emailStatusId?: number | null;
    emailFrom?: string | null;
    emailCC?: string | null;
    scheduleOn?: Date | null;
    sentStatusOn?: Date | null;
    retryCount?: number | null;
    dueDateTill?: Date | null;
    attachmentPath?: string | null;
    impersonateUserId?: string | null;
    emailStatus?: EmailStatus | null;
    emailType?: EmailType | null;
    module?: Module | null;
    user?: User | null;
    user1?: User | null;
}

export class EmailPreference implements IEmailPreference {
    id?: number | null;
    name?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isActive?: boolean | null;
    preferenceLastSyncOn?: Date | null;
    contactListId?: string | null;
    user?: User | null;
    user1?: User | null;
    emailPreferenceTranslation?: EmailPreferenceTranslation[] | null;
    userEmailPreference?: UserEmailPreference[] | null;

    constructor(data?: IEmailPreference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.preferenceLastSyncOn = _data["PreferenceLastSyncOn"] ? new Date(_data["PreferenceLastSyncOn"].toString()) : <any>null;
            this.contactListId = _data["ContactListId"] !== undefined ? _data["ContactListId"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EmailPreferenceTranslation"])) {
                this.emailPreferenceTranslation = [] as any;
                for (let item of _data["EmailPreferenceTranslation"])
                    this.emailPreferenceTranslation!.push(EmailPreferenceTranslation.fromJS(item));
            }
            else {
                this.emailPreferenceTranslation = <any>null;
            }
            if (Array.isArray(_data["UserEmailPreference"])) {
                this.userEmailPreference = [] as any;
                for (let item of _data["UserEmailPreference"])
                    this.userEmailPreference!.push(UserEmailPreference.fromJS(item));
            }
            else {
                this.userEmailPreference = <any>null;
            }
        }
    }

    static fromJS(data: any): EmailPreference {
        data = typeof data === 'object' ? data : {};
        let result = new EmailPreference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["PreferenceLastSyncOn"] = this.preferenceLastSyncOn ? this.preferenceLastSyncOn.toISOString() : <any>null;
        data["ContactListId"] = this.contactListId !== undefined ? this.contactListId : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.emailPreferenceTranslation)) {
            data["EmailPreferenceTranslation"] = [];
            for (let item of this.emailPreferenceTranslation)
                data["EmailPreferenceTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.userEmailPreference)) {
            data["UserEmailPreference"] = [];
            for (let item of this.userEmailPreference)
                data["UserEmailPreference"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEmailPreference {
    id?: number | null;
    name?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isActive?: boolean | null;
    preferenceLastSyncOn?: Date | null;
    contactListId?: string | null;
    user?: User | null;
    user1?: User | null;
    emailPreferenceTranslation?: EmailPreferenceTranslation[] | null;
    userEmailPreference?: UserEmailPreference[] | null;
}

export class EmailTypeSubGroup implements IEmailTypeSubGroup {
    id?: number | null;
    name?: string | null;
    emailTypeGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    emailType?: EmailType[] | null;
    emailTypeGroup?: EmailTypeGroup | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEmailTypeSubGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.emailTypeGroupId = _data["EmailTypeGroupId"] !== undefined ? _data["EmailTypeGroupId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            if (Array.isArray(_data["EmailType"])) {
                this.emailType = [] as any;
                for (let item of _data["EmailType"])
                    this.emailType!.push(EmailType.fromJS(item));
            }
            else {
                this.emailType = <any>null;
            }
            this.emailTypeGroup = _data["EmailTypeGroup"] ? EmailTypeGroup.fromJS(_data["EmailTypeGroup"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailTypeSubGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EmailTypeSubGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EmailTypeGroupId"] = this.emailTypeGroupId !== undefined ? this.emailTypeGroupId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        if (Array.isArray(this.emailType)) {
            data["EmailType"] = [];
            for (let item of this.emailType)
                data["EmailType"].push(item.toJSON());
        }
        data["EmailTypeGroup"] = this.emailTypeGroup ? this.emailTypeGroup.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailTypeSubGroup {
    id?: number | null;
    name?: string | null;
    emailTypeGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    emailType?: EmailType[] | null;
    emailTypeGroup?: EmailTypeGroup | null;
    user?: User | null;
    user1?: User | null;
}

export class EmailTypeTranslation implements IEmailTypeTranslation {
    languageId?: number | null;
    emailTypeId?: number | null;
    text?: string | null;
    subject?: string | null;
    message?: string | null;
    templateName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    emailType?: EmailType | null;
    language?: Language | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEmailTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.emailTypeId = _data["EmailTypeId"] !== undefined ? _data["EmailTypeId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.subject = _data["Subject"] !== undefined ? _data["Subject"] : <any>null;
            this.message = _data["Message"] !== undefined ? _data["Message"] : <any>null;
            this.templateName = _data["TemplateName"] !== undefined ? _data["TemplateName"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.emailType = _data["EmailType"] ? EmailType.fromJS(_data["EmailType"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EmailTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["EmailTypeId"] = this.emailTypeId !== undefined ? this.emailTypeId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Subject"] = this.subject !== undefined ? this.subject : <any>null;
        data["Message"] = this.message !== undefined ? this.message : <any>null;
        data["TemplateName"] = this.templateName !== undefined ? this.templateName : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["EmailType"] = this.emailType ? this.emailType.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailTypeTranslation {
    languageId?: number | null;
    emailTypeId?: number | null;
    text?: string | null;
    subject?: string | null;
    message?: string | null;
    templateName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    emailType?: EmailType | null;
    language?: Language | null;
    user?: User | null;
    user1?: User | null;
}

export class Event implements IEvent {
    id?: number | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    name?: string | null;
    description?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    countryId?: number | null;
    eventAmount?: number | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    cancelReason?: string | null;
    registrationLimit?: number | null;
    registrationCloseDate?: Date | null;
    eventCloseDate?: Date | null;
    isAutoCloseApplicable?: boolean | null;
    eventStatusId?: number | null;
    isCashAcceptable?: boolean | null;
    impersonateUserId?: string | null;
    isDeadlineApplicable?: boolean | null;
    isGroupRegnAllowed?: boolean | null;
    isExhibitorRegnAllowed?: boolean | null;
    isScholarshipApplicable?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    termsAndConditionsId?: number | null;
    isExchangeRateApplicable?: boolean | null;
    exchangeRate?: number | null;
    selectedCurrencyId?: number | null;
    badgeTemplate?: string | null;
    appOpenDate?: Date | null;
    appCloseDate?: Date | null;
    attendanceTypeId?: number | null;
    tempStaffOpenOn?: Date | null;
    tempStaffCloseOn?: Date | null;
    isCOAEnabled?: boolean | null;
    groupConfirmLetterAvailableOn?: Date | null;
    printUnpaidGroup?: boolean | null;
    printUnpaidExhibitor?: boolean | null;
    currencyId?: number | null;
    isFacialRecEnabled?: boolean | null;
    timeZone?: Date | null;
    imageName?: string | null;
    isStarred?: boolean | null;
    displayPriority?: number | null;
    discountCoupon?: boolean | null;
    checkPeopleCount?: boolean | null;
    isArtifactEnabled?: boolean | null;
    isTest?: boolean | null;
    attendanceType?: AttendanceType | null;
    country?: Country | null;
    currency?: Currency | null;
    currency1?: Currency | null;
    deviceDetails?: DeviceDetails[] | null;
    documentMapping?: DocumentMapping[] | null;
    eventArtifact?: EventArtifact[] | null;
    eventStatus?: EventStatus | null;
    termsAndCondition?: TermsAndCondition | null;
    eventAttendanceGroup?: EventAttendanceGroup[] | null;
    eventBadge?: EventBadge[] | null;
    eventDeadLine?: EventDeadLine[] | null;
    eventDiscount?: EventDiscount[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    eventFee?: EventFee[] | null;
    eventFeeMutualExclusive?: EventFeeMutualExclusive[] | null;
    eventType?: EventType | null;
    user?: User | null;
    user1?: User | null;
    eventRegistration?: EventRegistration[] | null;
    eventSession?: EventSession[] | null;
    eventTemplate?: EventTemplate[] | null;
    eventTemplateContent?: EventTemplateContent[] | null;
    eventTempStaffMapping?: EventTempStaffMapping[] | null;
    fee?: Fee[] | null;
    onsiteUser?: OnsiteUser[] | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    userArtefactManualApproved?: UserArtefactManualApproved[] | null;

    constructor(data?: IEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventTypeId = _data["EventTypeId"] !== undefined ? _data["EventTypeId"] : <any>null;
            this.eventCode = _data["EventCode"] !== undefined ? _data["EventCode"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>null;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>null;
            this.resourcePerson = _data["ResourcePerson"] !== undefined ? _data["ResourcePerson"] : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.venueAddress = _data["VenueAddress"] !== undefined ? _data["VenueAddress"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.eventAmount = _data["EventAmount"] !== undefined ? _data["EventAmount"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.ledgerCode = _data["LedgerCode"] !== undefined ? _data["LedgerCode"] : <any>null;
            this.cancelReason = _data["CancelReason"] !== undefined ? _data["CancelReason"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.registrationCloseDate = _data["RegistrationCloseDate"] ? new Date(_data["RegistrationCloseDate"].toString()) : <any>null;
            this.eventCloseDate = _data["EventCloseDate"] ? new Date(_data["EventCloseDate"].toString()) : <any>null;
            this.isAutoCloseApplicable = _data["IsAutoCloseApplicable"] !== undefined ? _data["IsAutoCloseApplicable"] : <any>null;
            this.eventStatusId = _data["EventStatusId"] !== undefined ? _data["EventStatusId"] : <any>null;
            this.isCashAcceptable = _data["IsCashAcceptable"] !== undefined ? _data["IsCashAcceptable"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.isDeadlineApplicable = _data["IsDeadlineApplicable"] !== undefined ? _data["IsDeadlineApplicable"] : <any>null;
            this.isGroupRegnAllowed = _data["IsGroupRegnAllowed"] !== undefined ? _data["IsGroupRegnAllowed"] : <any>null;
            this.isExhibitorRegnAllowed = _data["IsExhibitorRegnAllowed"] !== undefined ? _data["IsExhibitorRegnAllowed"] : <any>null;
            this.isScholarshipApplicable = _data["IsScholarshipApplicable"] !== undefined ? _data["IsScholarshipApplicable"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.termsAndConditionsId = _data["TermsAndConditionsId"] !== undefined ? _data["TermsAndConditionsId"] : <any>null;
            this.isExchangeRateApplicable = _data["IsExchangeRateApplicable"] !== undefined ? _data["IsExchangeRateApplicable"] : <any>null;
            this.exchangeRate = _data["ExchangeRate"] !== undefined ? _data["ExchangeRate"] : <any>null;
            this.selectedCurrencyId = _data["SelectedCurrencyId"] !== undefined ? _data["SelectedCurrencyId"] : <any>null;
            this.badgeTemplate = _data["BadgeTemplate"] !== undefined ? _data["BadgeTemplate"] : <any>null;
            this.appOpenDate = _data["AppOpenDate"] ? new Date(_data["AppOpenDate"].toString()) : <any>null;
            this.appCloseDate = _data["AppCloseDate"] ? new Date(_data["AppCloseDate"].toString()) : <any>null;
            this.attendanceTypeId = _data["AttendanceTypeId"] !== undefined ? _data["AttendanceTypeId"] : <any>null;
            this.tempStaffOpenOn = _data["TempStaffOpenOn"] ? new Date(_data["TempStaffOpenOn"].toString()) : <any>null;
            this.tempStaffCloseOn = _data["TempStaffCloseOn"] ? new Date(_data["TempStaffCloseOn"].toString()) : <any>null;
            this.isCOAEnabled = _data["IsCOAEnabled"] !== undefined ? _data["IsCOAEnabled"] : <any>null;
            this.groupConfirmLetterAvailableOn = _data["GroupConfirmLetterAvailableOn"] ? new Date(_data["GroupConfirmLetterAvailableOn"].toString()) : <any>null;
            this.printUnpaidGroup = _data["PrintUnpaidGroup"] !== undefined ? _data["PrintUnpaidGroup"] : <any>null;
            this.printUnpaidExhibitor = _data["PrintUnpaidExhibitor"] !== undefined ? _data["PrintUnpaidExhibitor"] : <any>null;
            this.currencyId = _data["CurrencyId"] !== undefined ? _data["CurrencyId"] : <any>null;
            this.isFacialRecEnabled = _data["IsFacialRecEnabled"] !== undefined ? _data["IsFacialRecEnabled"] : <any>null;
            this.timeZone = _data["TimeZone"] ? new Date(_data["TimeZone"].toString()) : <any>null;
            this.imageName = _data["ImageName"] !== undefined ? _data["ImageName"] : <any>null;
            this.isStarred = _data["IsStarred"] !== undefined ? _data["IsStarred"] : <any>null;
            this.displayPriority = _data["DisplayPriority"] !== undefined ? _data["DisplayPriority"] : <any>null;
            this.discountCoupon = _data["DiscountCoupon"] !== undefined ? _data["DiscountCoupon"] : <any>null;
            this.checkPeopleCount = _data["CheckPeopleCount"] !== undefined ? _data["CheckPeopleCount"] : <any>null;
            this.isArtifactEnabled = _data["IsArtifactEnabled"] !== undefined ? _data["IsArtifactEnabled"] : <any>null;
            this.isTest = _data["IsTest"] !== undefined ? _data["IsTest"] : <any>null;
            this.attendanceType = _data["AttendanceType"] ? AttendanceType.fromJS(_data["AttendanceType"]) : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            this.currency = _data["Currency"] ? Currency.fromJS(_data["Currency"]) : <any>null;
            this.currency1 = _data["Currency1"] ? Currency.fromJS(_data["Currency1"]) : <any>null;
            if (Array.isArray(_data["DeviceDetails"])) {
                this.deviceDetails = [] as any;
                for (let item of _data["DeviceDetails"])
                    this.deviceDetails!.push(DeviceDetails.fromJS(item));
            }
            else {
                this.deviceDetails = <any>null;
            }
            if (Array.isArray(_data["DocumentMapping"])) {
                this.documentMapping = [] as any;
                for (let item of _data["DocumentMapping"])
                    this.documentMapping!.push(DocumentMapping.fromJS(item));
            }
            else {
                this.documentMapping = <any>null;
            }
            if (Array.isArray(_data["EventArtifact"])) {
                this.eventArtifact = [] as any;
                for (let item of _data["EventArtifact"])
                    this.eventArtifact!.push(EventArtifact.fromJS(item));
            }
            else {
                this.eventArtifact = <any>null;
            }
            this.eventStatus = _data["EventStatus"] ? EventStatus.fromJS(_data["EventStatus"]) : <any>null;
            this.termsAndCondition = _data["TermsAndCondition"] ? TermsAndCondition.fromJS(_data["TermsAndCondition"]) : <any>null;
            if (Array.isArray(_data["EventAttendanceGroup"])) {
                this.eventAttendanceGroup = [] as any;
                for (let item of _data["EventAttendanceGroup"])
                    this.eventAttendanceGroup!.push(EventAttendanceGroup.fromJS(item));
            }
            else {
                this.eventAttendanceGroup = <any>null;
            }
            if (Array.isArray(_data["EventBadge"])) {
                this.eventBadge = [] as any;
                for (let item of _data["EventBadge"])
                    this.eventBadge!.push(EventBadge.fromJS(item));
            }
            else {
                this.eventBadge = <any>null;
            }
            if (Array.isArray(_data["EventDeadLine"])) {
                this.eventDeadLine = [] as any;
                for (let item of _data["EventDeadLine"])
                    this.eventDeadLine!.push(EventDeadLine.fromJS(item));
            }
            else {
                this.eventDeadLine = <any>null;
            }
            if (Array.isArray(_data["EventDiscount"])) {
                this.eventDiscount = [] as any;
                for (let item of _data["EventDiscount"])
                    this.eventDiscount!.push(EventDiscount.fromJS(item));
            }
            else {
                this.eventDiscount = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorProduct"])) {
                this.eventExhibitorProduct = [] as any;
                for (let item of _data["EventExhibitorProduct"])
                    this.eventExhibitorProduct!.push(EventExhibitorProduct.fromJS(item));
            }
            else {
                this.eventExhibitorProduct = <any>null;
            }
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
            if (Array.isArray(_data["EventFeeMutualExclusive"])) {
                this.eventFeeMutualExclusive = [] as any;
                for (let item of _data["EventFeeMutualExclusive"])
                    this.eventFeeMutualExclusive!.push(EventFeeMutualExclusive.fromJS(item));
            }
            else {
                this.eventFeeMutualExclusive = <any>null;
            }
            this.eventType = _data["EventType"] ? EventType.fromJS(_data["EventType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
            if (Array.isArray(_data["EventSession"])) {
                this.eventSession = [] as any;
                for (let item of _data["EventSession"])
                    this.eventSession!.push(EventSession.fromJS(item));
            }
            else {
                this.eventSession = <any>null;
            }
            if (Array.isArray(_data["EventTemplate"])) {
                this.eventTemplate = [] as any;
                for (let item of _data["EventTemplate"])
                    this.eventTemplate!.push(EventTemplate.fromJS(item));
            }
            else {
                this.eventTemplate = <any>null;
            }
            if (Array.isArray(_data["EventTemplateContent"])) {
                this.eventTemplateContent = [] as any;
                for (let item of _data["EventTemplateContent"])
                    this.eventTemplateContent!.push(EventTemplateContent.fromJS(item));
            }
            else {
                this.eventTemplateContent = <any>null;
            }
            if (Array.isArray(_data["EventTempStaffMapping"])) {
                this.eventTempStaffMapping = [] as any;
                for (let item of _data["EventTempStaffMapping"])
                    this.eventTempStaffMapping!.push(EventTempStaffMapping.fromJS(item));
            }
            else {
                this.eventTempStaffMapping = <any>null;
            }
            if (Array.isArray(_data["Fee"])) {
                this.fee = [] as any;
                for (let item of _data["Fee"])
                    this.fee!.push(Fee.fromJS(item));
            }
            else {
                this.fee = <any>null;
            }
            if (Array.isArray(_data["OnsiteUser"])) {
                this.onsiteUser = [] as any;
                for (let item of _data["OnsiteUser"])
                    this.onsiteUser!.push(OnsiteUser.fromJS(item));
            }
            else {
                this.onsiteUser = <any>null;
            }
            if (Array.isArray(_data["PaymentTypeMapping"])) {
                this.paymentTypeMapping = [] as any;
                for (let item of _data["PaymentTypeMapping"])
                    this.paymentTypeMapping!.push(PaymentTypeMapping.fromJS(item));
            }
            else {
                this.paymentTypeMapping = <any>null;
            }
            if (Array.isArray(_data["UserArtefactManualApproved"])) {
                this.userArtefactManualApproved = [] as any;
                for (let item of _data["UserArtefactManualApproved"])
                    this.userArtefactManualApproved!.push(UserArtefactManualApproved.fromJS(item));
            }
            else {
                this.userArtefactManualApproved = <any>null;
            }
        }
    }

    static fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventTypeId"] = this.eventTypeId !== undefined ? this.eventTypeId : <any>null;
        data["EventCode"] = this.eventCode !== undefined ? this.eventCode : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["ResourcePerson"] = this.resourcePerson !== undefined ? this.resourcePerson : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["VenueAddress"] = this.venueAddress !== undefined ? this.venueAddress : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["EventAmount"] = this.eventAmount !== undefined ? this.eventAmount : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["LedgerCode"] = this.ledgerCode !== undefined ? this.ledgerCode : <any>null;
        data["CancelReason"] = this.cancelReason !== undefined ? this.cancelReason : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["RegistrationCloseDate"] = this.registrationCloseDate ? this.registrationCloseDate.toISOString() : <any>null;
        data["EventCloseDate"] = this.eventCloseDate ? this.eventCloseDate.toISOString() : <any>null;
        data["IsAutoCloseApplicable"] = this.isAutoCloseApplicable !== undefined ? this.isAutoCloseApplicable : <any>null;
        data["EventStatusId"] = this.eventStatusId !== undefined ? this.eventStatusId : <any>null;
        data["IsCashAcceptable"] = this.isCashAcceptable !== undefined ? this.isCashAcceptable : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["IsDeadlineApplicable"] = this.isDeadlineApplicable !== undefined ? this.isDeadlineApplicable : <any>null;
        data["IsGroupRegnAllowed"] = this.isGroupRegnAllowed !== undefined ? this.isGroupRegnAllowed : <any>null;
        data["IsExhibitorRegnAllowed"] = this.isExhibitorRegnAllowed !== undefined ? this.isExhibitorRegnAllowed : <any>null;
        data["IsScholarshipApplicable"] = this.isScholarshipApplicable !== undefined ? this.isScholarshipApplicable : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["TermsAndConditionsId"] = this.termsAndConditionsId !== undefined ? this.termsAndConditionsId : <any>null;
        data["IsExchangeRateApplicable"] = this.isExchangeRateApplicable !== undefined ? this.isExchangeRateApplicable : <any>null;
        data["ExchangeRate"] = this.exchangeRate !== undefined ? this.exchangeRate : <any>null;
        data["SelectedCurrencyId"] = this.selectedCurrencyId !== undefined ? this.selectedCurrencyId : <any>null;
        data["BadgeTemplate"] = this.badgeTemplate !== undefined ? this.badgeTemplate : <any>null;
        data["AppOpenDate"] = this.appOpenDate ? this.appOpenDate.toISOString() : <any>null;
        data["AppCloseDate"] = this.appCloseDate ? this.appCloseDate.toISOString() : <any>null;
        data["AttendanceTypeId"] = this.attendanceTypeId !== undefined ? this.attendanceTypeId : <any>null;
        data["TempStaffOpenOn"] = this.tempStaffOpenOn ? this.tempStaffOpenOn.toISOString() : <any>null;
        data["TempStaffCloseOn"] = this.tempStaffCloseOn ? this.tempStaffCloseOn.toISOString() : <any>null;
        data["IsCOAEnabled"] = this.isCOAEnabled !== undefined ? this.isCOAEnabled : <any>null;
        data["GroupConfirmLetterAvailableOn"] = this.groupConfirmLetterAvailableOn ? this.groupConfirmLetterAvailableOn.toISOString() : <any>null;
        data["PrintUnpaidGroup"] = this.printUnpaidGroup !== undefined ? this.printUnpaidGroup : <any>null;
        data["PrintUnpaidExhibitor"] = this.printUnpaidExhibitor !== undefined ? this.printUnpaidExhibitor : <any>null;
        data["CurrencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        data["IsFacialRecEnabled"] = this.isFacialRecEnabled !== undefined ? this.isFacialRecEnabled : <any>null;
        data["TimeZone"] = this.timeZone ? this.timeZone.toISOString() : <any>null;
        data["ImageName"] = this.imageName !== undefined ? this.imageName : <any>null;
        data["IsStarred"] = this.isStarred !== undefined ? this.isStarred : <any>null;
        data["DisplayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["DiscountCoupon"] = this.discountCoupon !== undefined ? this.discountCoupon : <any>null;
        data["CheckPeopleCount"] = this.checkPeopleCount !== undefined ? this.checkPeopleCount : <any>null;
        data["IsArtifactEnabled"] = this.isArtifactEnabled !== undefined ? this.isArtifactEnabled : <any>null;
        data["IsTest"] = this.isTest !== undefined ? this.isTest : <any>null;
        data["AttendanceType"] = this.attendanceType ? this.attendanceType.toJSON() : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        data["Currency"] = this.currency ? this.currency.toJSON() : <any>null;
        data["Currency1"] = this.currency1 ? this.currency1.toJSON() : <any>null;
        if (Array.isArray(this.deviceDetails)) {
            data["DeviceDetails"] = [];
            for (let item of this.deviceDetails)
                data["DeviceDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.documentMapping)) {
            data["DocumentMapping"] = [];
            for (let item of this.documentMapping)
                data["DocumentMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.eventArtifact)) {
            data["EventArtifact"] = [];
            for (let item of this.eventArtifact)
                data["EventArtifact"].push(item.toJSON());
        }
        data["EventStatus"] = this.eventStatus ? this.eventStatus.toJSON() : <any>null;
        data["TermsAndCondition"] = this.termsAndCondition ? this.termsAndCondition.toJSON() : <any>null;
        if (Array.isArray(this.eventAttendanceGroup)) {
            data["EventAttendanceGroup"] = [];
            for (let item of this.eventAttendanceGroup)
                data["EventAttendanceGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventBadge)) {
            data["EventBadge"] = [];
            for (let item of this.eventBadge)
                data["EventBadge"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDeadLine)) {
            data["EventDeadLine"] = [];
            for (let item of this.eventDeadLine)
                data["EventDeadLine"].push(item.toJSON());
        }
        if (Array.isArray(this.eventDiscount)) {
            data["EventDiscount"] = [];
            for (let item of this.eventDiscount)
                data["EventDiscount"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorProduct)) {
            data["EventExhibitorProduct"] = [];
            for (let item of this.eventExhibitorProduct)
                data["EventExhibitorProduct"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFeeMutualExclusive)) {
            data["EventFeeMutualExclusive"] = [];
            for (let item of this.eventFeeMutualExclusive)
                data["EventFeeMutualExclusive"].push(item.toJSON());
        }
        data["EventType"] = this.eventType ? this.eventType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        if (Array.isArray(this.eventSession)) {
            data["EventSession"] = [];
            for (let item of this.eventSession)
                data["EventSession"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTemplate)) {
            data["EventTemplate"] = [];
            for (let item of this.eventTemplate)
                data["EventTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTemplateContent)) {
            data["EventTemplateContent"] = [];
            for (let item of this.eventTemplateContent)
                data["EventTemplateContent"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTempStaffMapping)) {
            data["EventTempStaffMapping"] = [];
            for (let item of this.eventTempStaffMapping)
                data["EventTempStaffMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.fee)) {
            data["Fee"] = [];
            for (let item of this.fee)
                data["Fee"].push(item.toJSON());
        }
        if (Array.isArray(this.onsiteUser)) {
            data["OnsiteUser"] = [];
            for (let item of this.onsiteUser)
                data["OnsiteUser"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTypeMapping)) {
            data["PaymentTypeMapping"] = [];
            for (let item of this.paymentTypeMapping)
                data["PaymentTypeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.userArtefactManualApproved)) {
            data["UserArtefactManualApproved"] = [];
            for (let item of this.userArtefactManualApproved)
                data["UserArtefactManualApproved"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEvent {
    id?: number | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    name?: string | null;
    description?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    countryId?: number | null;
    eventAmount?: number | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    cancelReason?: string | null;
    registrationLimit?: number | null;
    registrationCloseDate?: Date | null;
    eventCloseDate?: Date | null;
    isAutoCloseApplicable?: boolean | null;
    eventStatusId?: number | null;
    isCashAcceptable?: boolean | null;
    impersonateUserId?: string | null;
    isDeadlineApplicable?: boolean | null;
    isGroupRegnAllowed?: boolean | null;
    isExhibitorRegnAllowed?: boolean | null;
    isScholarshipApplicable?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    termsAndConditionsId?: number | null;
    isExchangeRateApplicable?: boolean | null;
    exchangeRate?: number | null;
    selectedCurrencyId?: number | null;
    badgeTemplate?: string | null;
    appOpenDate?: Date | null;
    appCloseDate?: Date | null;
    attendanceTypeId?: number | null;
    tempStaffOpenOn?: Date | null;
    tempStaffCloseOn?: Date | null;
    isCOAEnabled?: boolean | null;
    groupConfirmLetterAvailableOn?: Date | null;
    printUnpaidGroup?: boolean | null;
    printUnpaidExhibitor?: boolean | null;
    currencyId?: number | null;
    isFacialRecEnabled?: boolean | null;
    timeZone?: Date | null;
    imageName?: string | null;
    isStarred?: boolean | null;
    displayPriority?: number | null;
    discountCoupon?: boolean | null;
    checkPeopleCount?: boolean | null;
    isArtifactEnabled?: boolean | null;
    isTest?: boolean | null;
    attendanceType?: AttendanceType | null;
    country?: Country | null;
    currency?: Currency | null;
    currency1?: Currency | null;
    deviceDetails?: DeviceDetails[] | null;
    documentMapping?: DocumentMapping[] | null;
    eventArtifact?: EventArtifact[] | null;
    eventStatus?: EventStatus | null;
    termsAndCondition?: TermsAndCondition | null;
    eventAttendanceGroup?: EventAttendanceGroup[] | null;
    eventBadge?: EventBadge[] | null;
    eventDeadLine?: EventDeadLine[] | null;
    eventDiscount?: EventDiscount[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    eventFee?: EventFee[] | null;
    eventFeeMutualExclusive?: EventFeeMutualExclusive[] | null;
    eventType?: EventType | null;
    user?: User | null;
    user1?: User | null;
    eventRegistration?: EventRegistration[] | null;
    eventSession?: EventSession[] | null;
    eventTemplate?: EventTemplate[] | null;
    eventTemplateContent?: EventTemplateContent[] | null;
    eventTempStaffMapping?: EventTempStaffMapping[] | null;
    fee?: Fee[] | null;
    onsiteUser?: OnsiteUser[] | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    userArtefactManualApproved?: UserArtefactManualApproved[] | null;
}

export class EventArtifact implements IEventArtifact {
    id?: number | null;
    eventId?: number | null;
    title?: string | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    userEventArtifact?: UserEventArtifact[] | null;

    constructor(data?: IEventArtifact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.title = _data["Title"] !== undefined ? _data["Title"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["UserEventArtifact"])) {
                this.userEventArtifact = [] as any;
                for (let item of _data["UserEventArtifact"])
                    this.userEventArtifact!.push(UserEventArtifact.fromJS(item));
            }
            else {
                this.userEventArtifact = <any>null;
            }
        }
    }

    static fromJS(data: any): EventArtifact {
        data = typeof data === 'object' ? data : {};
        let result = new EventArtifact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["Title"] = this.title !== undefined ? this.title : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.userEventArtifact)) {
            data["UserEventArtifact"] = [];
            for (let item of this.userEventArtifact)
                data["UserEventArtifact"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventArtifact {
    id?: number | null;
    eventId?: number | null;
    title?: string | null;
    isActive?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    userEventArtifact?: UserEventArtifact[] | null;
}

export class EventAttendance implements IEventAttendance {
    id?: number | null;
    userId?: string | null;
    eventSessionId?: number | null;
    attendanceDateTime?: Date | null;
    scannedby?: string | null;
    createdOn?: Date | null;
    accesoryState?: number | null;
    badgeId?: string | null;
    deviceId?: string | null;
    isManual?: boolean | null;
    isActive?: boolean | null;
    eventSession?: EventSession | null;
    user?: User | null;

    constructor(data?: IEventAttendance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.eventSessionId = _data["EventSessionId"] !== undefined ? _data["EventSessionId"] : <any>null;
            this.attendanceDateTime = _data["AttendanceDateTime"] ? new Date(_data["AttendanceDateTime"].toString()) : <any>null;
            this.scannedby = _data["Scannedby"] !== undefined ? _data["Scannedby"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.accesoryState = _data["AccesoryState"] !== undefined ? _data["AccesoryState"] : <any>null;
            this.badgeId = _data["BadgeId"] !== undefined ? _data["BadgeId"] : <any>null;
            this.deviceId = _data["DeviceId"] !== undefined ? _data["DeviceId"] : <any>null;
            this.isManual = _data["IsManual"] !== undefined ? _data["IsManual"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.eventSession = _data["EventSession"] ? EventSession.fromJS(_data["EventSession"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): EventAttendance {
        data = typeof data === 'object' ? data : {};
        let result = new EventAttendance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EventSessionId"] = this.eventSessionId !== undefined ? this.eventSessionId : <any>null;
        data["AttendanceDateTime"] = this.attendanceDateTime ? this.attendanceDateTime.toISOString() : <any>null;
        data["Scannedby"] = this.scannedby !== undefined ? this.scannedby : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["AccesoryState"] = this.accesoryState !== undefined ? this.accesoryState : <any>null;
        data["BadgeId"] = this.badgeId !== undefined ? this.badgeId : <any>null;
        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["IsManual"] = this.isManual !== undefined ? this.isManual : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["EventSession"] = this.eventSession ? this.eventSession.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IEventAttendance {
    id?: number | null;
    userId?: string | null;
    eventSessionId?: number | null;
    attendanceDateTime?: Date | null;
    scannedby?: string | null;
    createdOn?: Date | null;
    accesoryState?: number | null;
    badgeId?: string | null;
    deviceId?: string | null;
    isManual?: boolean | null;
    isActive?: boolean | null;
    eventSession?: EventSession | null;
    user?: User | null;
}

export class EventBadge implements IEventBadge {
    id?: number | null;
    uniqueCode?: string | null;
    eventId?: number | null;
    participantId?: string | null;
    exhibitorPersonId?: number | null;
    duplicateReason?: string | null;
    isPrinted?: boolean | null;
    isValid?: boolean | null;
    printedOn?: Date | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    replacementReason?: string | null;
    qRImage?: string | null;
    couchBadge?: string | null;
    isVirtual?: boolean | null;
    event?: Event | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    user?: User | null;

    constructor(data?: IEventBadge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.uniqueCode = _data["UniqueCode"] !== undefined ? _data["UniqueCode"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.participantId = _data["ParticipantId"] !== undefined ? _data["ParticipantId"] : <any>null;
            this.exhibitorPersonId = _data["ExhibitorPersonId"] !== undefined ? _data["ExhibitorPersonId"] : <any>null;
            this.duplicateReason = _data["DuplicateReason"] !== undefined ? _data["DuplicateReason"] : <any>null;
            this.isPrinted = _data["IsPrinted"] !== undefined ? _data["IsPrinted"] : <any>null;
            this.isValid = _data["IsValid"] !== undefined ? _data["IsValid"] : <any>null;
            this.printedOn = _data["PrintedOn"] ? new Date(_data["PrintedOn"].toString()) : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.replacementReason = _data["ReplacementReason"] !== undefined ? _data["ReplacementReason"] : <any>null;
            this.qRImage = _data["QRImage"] !== undefined ? _data["QRImage"] : <any>null;
            this.couchBadge = _data["CouchBadge"] !== undefined ? _data["CouchBadge"] : <any>null;
            this.isVirtual = _data["IsVirtual"] !== undefined ? _data["IsVirtual"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventExhibitorPerson = _data["EventExhibitorPerson"] ? EventExhibitorPerson.fromJS(_data["EventExhibitorPerson"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): EventBadge {
        data = typeof data === 'object' ? data : {};
        let result = new EventBadge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UniqueCode"] = this.uniqueCode !== undefined ? this.uniqueCode : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["ParticipantId"] = this.participantId !== undefined ? this.participantId : <any>null;
        data["ExhibitorPersonId"] = this.exhibitorPersonId !== undefined ? this.exhibitorPersonId : <any>null;
        data["DuplicateReason"] = this.duplicateReason !== undefined ? this.duplicateReason : <any>null;
        data["IsPrinted"] = this.isPrinted !== undefined ? this.isPrinted : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["PrintedOn"] = this.printedOn ? this.printedOn.toISOString() : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ReplacementReason"] = this.replacementReason !== undefined ? this.replacementReason : <any>null;
        data["QRImage"] = this.qRImage !== undefined ? this.qRImage : <any>null;
        data["CouchBadge"] = this.couchBadge !== undefined ? this.couchBadge : <any>null;
        data["IsVirtual"] = this.isVirtual !== undefined ? this.isVirtual : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventExhibitorPerson"] = this.eventExhibitorPerson ? this.eventExhibitorPerson.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IEventBadge {
    id?: number | null;
    uniqueCode?: string | null;
    eventId?: number | null;
    participantId?: string | null;
    exhibitorPersonId?: number | null;
    duplicateReason?: string | null;
    isPrinted?: boolean | null;
    isValid?: boolean | null;
    printedOn?: Date | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    replacementReason?: string | null;
    qRImage?: string | null;
    couchBadge?: string | null;
    isVirtual?: boolean | null;
    event?: Event | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    user?: User | null;
}

export class EventDeadLine implements IEventDeadLine {
    id?: number | null;
    name?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    description?: string | null;
    eventId?: number | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    eventFee?: EventFee[] | null;

    constructor(data?: IEventDeadLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
        }
    }

    static fromJS(data: any): EventDeadLine {
        data = typeof data === 'object' ? data : {};
        let result = new EventDeadLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventDeadLine {
    id?: number | null;
    name?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    description?: string | null;
    eventId?: number | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    eventFee?: EventFee[] | null;
}

export class EventDiscount implements IEventDiscount {
    id?: number | null;
    name?: string | null;
    code?: string | null;
    eventId?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    discountValue?: number | null;
    numOfCoupons?: number | null;
    isDiscountInPercentage?: boolean | null;
    isMultiUse?: boolean | null;
    maxUsagePerCoupon?: number | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    eventDiscountCouponCode?: EventDiscountCouponCode[] | null;

    constructor(data?: IEventDiscount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.code = _data["Code"] !== undefined ? _data["Code"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.discountValue = _data["DiscountValue"] !== undefined ? _data["DiscountValue"] : <any>null;
            this.numOfCoupons = _data["NumOfCoupons"] !== undefined ? _data["NumOfCoupons"] : <any>null;
            this.isDiscountInPercentage = _data["IsDiscountInPercentage"] !== undefined ? _data["IsDiscountInPercentage"] : <any>null;
            this.isMultiUse = _data["IsMultiUse"] !== undefined ? _data["IsMultiUse"] : <any>null;
            this.maxUsagePerCoupon = _data["MaxUsagePerCoupon"] !== undefined ? _data["MaxUsagePerCoupon"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifedOn = _data["ModifedOn"] ? new Date(_data["ModifedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventDiscountCouponCode"])) {
                this.eventDiscountCouponCode = [] as any;
                for (let item of _data["EventDiscountCouponCode"])
                    this.eventDiscountCouponCode!.push(EventDiscountCouponCode.fromJS(item));
            }
            else {
                this.eventDiscountCouponCode = <any>null;
            }
        }
    }

    static fromJS(data: any): EventDiscount {
        data = typeof data === 'object' ? data : {};
        let result = new EventDiscount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["DiscountValue"] = this.discountValue !== undefined ? this.discountValue : <any>null;
        data["NumOfCoupons"] = this.numOfCoupons !== undefined ? this.numOfCoupons : <any>null;
        data["IsDiscountInPercentage"] = this.isDiscountInPercentage !== undefined ? this.isDiscountInPercentage : <any>null;
        data["IsMultiUse"] = this.isMultiUse !== undefined ? this.isMultiUse : <any>null;
        data["MaxUsagePerCoupon"] = this.maxUsagePerCoupon !== undefined ? this.maxUsagePerCoupon : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifedOn"] = this.modifedOn ? this.modifedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventDiscountCouponCode)) {
            data["EventDiscountCouponCode"] = [];
            for (let item of this.eventDiscountCouponCode)
                data["EventDiscountCouponCode"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventDiscount {
    id?: number | null;
    name?: string | null;
    code?: string | null;
    eventId?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    discountValue?: number | null;
    numOfCoupons?: number | null;
    isDiscountInPercentage?: boolean | null;
    isMultiUse?: boolean | null;
    maxUsagePerCoupon?: number | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifedOn?: Date | null;
    modifiedBy?: string | null;
    event?: Event | null;
    user?: User | null;
    user1?: User | null;
    eventDiscountCouponCode?: EventDiscountCouponCode[] | null;
}

export class EventDiscountCouponCode implements IEventDiscountCouponCode {
    id?: number | null;
    eventDiscountId?: number | null;
    code?: string | null;
    balance?: number | null;
    mappedTo?: string | null;
    eventDiscount?: EventDiscount | null;
    user?: User | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    paymentDemandDetail?: PaymentDemandDetail[] | null;

    constructor(data?: IEventDiscountCouponCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventDiscountId = _data["EventDiscountId"] !== undefined ? _data["EventDiscountId"] : <any>null;
            this.code = _data["Code"] !== undefined ? _data["Code"] : <any>null;
            this.balance = _data["Balance"] !== undefined ? _data["Balance"] : <any>null;
            this.mappedTo = _data["MappedTo"] !== undefined ? _data["MappedTo"] : <any>null;
            this.eventDiscount = _data["EventDiscount"] ? EventDiscount.fromJS(_data["EventDiscount"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            if (Array.isArray(_data["EventDiscountCouponCodeMapping"])) {
                this.eventDiscountCouponCodeMapping = [] as any;
                for (let item of _data["EventDiscountCouponCodeMapping"])
                    this.eventDiscountCouponCodeMapping!.push(EventDiscountCouponCodeMapping.fromJS(item));
            }
            else {
                this.eventDiscountCouponCodeMapping = <any>null;
            }
            if (Array.isArray(_data["PaymentDemandDetail"])) {
                this.paymentDemandDetail = [] as any;
                for (let item of _data["PaymentDemandDetail"])
                    this.paymentDemandDetail!.push(PaymentDemandDetail.fromJS(item));
            }
            else {
                this.paymentDemandDetail = <any>null;
            }
        }
    }

    static fromJS(data: any): EventDiscountCouponCode {
        data = typeof data === 'object' ? data : {};
        let result = new EventDiscountCouponCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventDiscountId"] = this.eventDiscountId !== undefined ? this.eventDiscountId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["Balance"] = this.balance !== undefined ? this.balance : <any>null;
        data["MappedTo"] = this.mappedTo !== undefined ? this.mappedTo : <any>null;
        data["EventDiscount"] = this.eventDiscount ? this.eventDiscount.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        if (Array.isArray(this.eventDiscountCouponCodeMapping)) {
            data["EventDiscountCouponCodeMapping"] = [];
            for (let item of this.eventDiscountCouponCodeMapping)
                data["EventDiscountCouponCodeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentDemandDetail)) {
            data["PaymentDemandDetail"] = [];
            for (let item of this.paymentDemandDetail)
                data["PaymentDemandDetail"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventDiscountCouponCode {
    id?: number | null;
    eventDiscountId?: number | null;
    code?: string | null;
    balance?: number | null;
    mappedTo?: string | null;
    eventDiscount?: EventDiscount | null;
    user?: User | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    paymentDemandDetail?: PaymentDemandDetail[] | null;
}

export class EventDiscountCouponCodeMapping implements IEventDiscountCouponCodeMapping {
    id?: number | null;
    couponCodeId?: number | null;
    uniqueTransactionIdentifier?: string | null;
    paymentDemandId?: number | null;
    consumedBy?: string | null;
    consumedOn?: Date | null;
    modifedBy?: string | null;
    modifiedOn?: Date | null;
    eventDiscountCouponCode?: EventDiscountCouponCode | null;
    paymentDemand?: PaymentDemand | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEventDiscountCouponCodeMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.couponCodeId = _data["CouponCodeId"] !== undefined ? _data["CouponCodeId"] : <any>null;
            this.uniqueTransactionIdentifier = _data["UniqueTransactionIdentifier"] !== undefined ? _data["UniqueTransactionIdentifier"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.consumedBy = _data["ConsumedBy"] !== undefined ? _data["ConsumedBy"] : <any>null;
            this.consumedOn = _data["ConsumedOn"] ? new Date(_data["ConsumedOn"].toString()) : <any>null;
            this.modifedBy = _data["ModifedBy"] !== undefined ? _data["ModifedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.eventDiscountCouponCode = _data["EventDiscountCouponCode"] ? EventDiscountCouponCode.fromJS(_data["EventDiscountCouponCode"]) : <any>null;
            this.paymentDemand = _data["PaymentDemand"] ? PaymentDemand.fromJS(_data["PaymentDemand"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EventDiscountCouponCodeMapping {
        data = typeof data === 'object' ? data : {};
        let result = new EventDiscountCouponCodeMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["CouponCodeId"] = this.couponCodeId !== undefined ? this.couponCodeId : <any>null;
        data["UniqueTransactionIdentifier"] = this.uniqueTransactionIdentifier !== undefined ? this.uniqueTransactionIdentifier : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["ConsumedBy"] = this.consumedBy !== undefined ? this.consumedBy : <any>null;
        data["ConsumedOn"] = this.consumedOn ? this.consumedOn.toISOString() : <any>null;
        data["ModifedBy"] = this.modifedBy !== undefined ? this.modifedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["EventDiscountCouponCode"] = this.eventDiscountCouponCode ? this.eventDiscountCouponCode.toJSON() : <any>null;
        data["PaymentDemand"] = this.paymentDemand ? this.paymentDemand.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEventDiscountCouponCodeMapping {
    id?: number | null;
    couponCodeId?: number | null;
    uniqueTransactionIdentifier?: string | null;
    paymentDemandId?: number | null;
    consumedBy?: string | null;
    consumedOn?: Date | null;
    modifedBy?: string | null;
    modifiedOn?: Date | null;
    eventDiscountCouponCode?: EventDiscountCouponCode | null;
    paymentDemand?: PaymentDemand | null;
    user?: User | null;
    user1?: User | null;
}

export class EventExbSymposia implements IEventExbSymposia {
    id?: number | null;
    name?: string | null;
    date?: Date | null;
    time?: string | null;
    room?: string | null;
    noOfUnits?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    eventExhibitorId?: number | null;
    user?: User | null;
    eventExhibitor?: EventExhibitor | null;
    user1?: User | null;

    constructor(data?: IEventExbSymposia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>null;
            this.time = _data["Time"] !== undefined ? _data["Time"] : <any>null;
            this.room = _data["Room"] !== undefined ? _data["Room"] : <any>null;
            this.noOfUnits = _data["NoOfUnits"] !== undefined ? _data["NoOfUnits"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.eventExhibitor = _data["EventExhibitor"] ? EventExhibitor.fromJS(_data["EventExhibitor"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EventExbSymposia {
        data = typeof data === 'object' ? data : {};
        let result = new EventExbSymposia();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Date"] = this.date ? this.date.toISOString() : <any>null;
        data["Time"] = this.time !== undefined ? this.time : <any>null;
        data["Room"] = this.room !== undefined ? this.room : <any>null;
        data["NoOfUnits"] = this.noOfUnits !== undefined ? this.noOfUnits : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["EventExhibitor"] = this.eventExhibitor ? this.eventExhibitor.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEventExbSymposia {
    id?: number | null;
    name?: string | null;
    date?: Date | null;
    time?: string | null;
    room?: string | null;
    noOfUnits?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    eventExhibitorId?: number | null;
    user?: User | null;
    eventExhibitor?: EventExhibitor | null;
    user1?: User | null;
}

export class EventExhibitor implements IEventExhibitor {
    id?: number | null;
    exhibitorId?: number | null;
    primaryContactId?: string | null;
    hasOnsiteContact?: boolean | null;
    onsiteEmail?: string | null;
    onsiteFirstName?: string | null;
    onsiteLastName?: string | null;
    boothNumber?: string | null;
    boothSize?: string | null;
    location?: string | null;
    freePassCount?: number | null;
    productDetails?: string | null;
    mergedUserId?: string | null;
    addressId?: number | null;
    contractorPasses?: string | null;
    companyURL?: string | null;
    name?: string | null;
    isActive?: boolean | null;
    eventExbSymposia?: EventExbSymposia[] | null;
    exhibitor?: Exhibitor | null;
    userAddress?: UserAddress | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorPerson?: EventExhibitorPerson[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    user?: User | null;
    user1?: User | null;
    eventRegistration?: EventRegistration[] | null;

    constructor(data?: IEventExhibitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.exhibitorId = _data["ExhibitorId"] !== undefined ? _data["ExhibitorId"] : <any>null;
            this.primaryContactId = _data["PrimaryContactId"] !== undefined ? _data["PrimaryContactId"] : <any>null;
            this.hasOnsiteContact = _data["HasOnsiteContact"] !== undefined ? _data["HasOnsiteContact"] : <any>null;
            this.onsiteEmail = _data["OnsiteEmail"] !== undefined ? _data["OnsiteEmail"] : <any>null;
            this.onsiteFirstName = _data["OnsiteFirstName"] !== undefined ? _data["OnsiteFirstName"] : <any>null;
            this.onsiteLastName = _data["OnsiteLastName"] !== undefined ? _data["OnsiteLastName"] : <any>null;
            this.boothNumber = _data["BoothNumber"] !== undefined ? _data["BoothNumber"] : <any>null;
            this.boothSize = _data["BoothSize"] !== undefined ? _data["BoothSize"] : <any>null;
            this.location = _data["Location"] !== undefined ? _data["Location"] : <any>null;
            this.freePassCount = _data["FreePassCount"] !== undefined ? _data["FreePassCount"] : <any>null;
            this.productDetails = _data["ProductDetails"] !== undefined ? _data["ProductDetails"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.addressId = _data["AddressId"] !== undefined ? _data["AddressId"] : <any>null;
            this.contractorPasses = _data["ContractorPasses"] !== undefined ? _data["ContractorPasses"] : <any>null;
            this.companyURL = _data["CompanyURL"] !== undefined ? _data["CompanyURL"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventExbSymposia"])) {
                this.eventExbSymposia = [] as any;
                for (let item of _data["EventExbSymposia"])
                    this.eventExbSymposia!.push(EventExbSymposia.fromJS(item));
            }
            else {
                this.eventExbSymposia = <any>null;
            }
            this.exhibitor = _data["Exhibitor"] ? Exhibitor.fromJS(_data["Exhibitor"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
            if (Array.isArray(_data["EventExhibitorAccess"])) {
                this.eventExhibitorAccess = [] as any;
                for (let item of _data["EventExhibitorAccess"])
                    this.eventExhibitorAccess!.push(EventExhibitorAccess.fromJS(item));
            }
            else {
                this.eventExhibitorAccess = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorPerson"])) {
                this.eventExhibitorPerson = [] as any;
                for (let item of _data["EventExhibitorPerson"])
                    this.eventExhibitorPerson!.push(EventExhibitorPerson.fromJS(item));
            }
            else {
                this.eventExhibitorPerson = <any>null;
            }
            if (Array.isArray(_data["EventExhibitorProduct"])) {
                this.eventExhibitorProduct = [] as any;
                for (let item of _data["EventExhibitorProduct"])
                    this.eventExhibitorProduct!.push(EventExhibitorProduct.fromJS(item));
            }
            else {
                this.eventExhibitorProduct = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
        }
    }

    static fromJS(data: any): EventExhibitor {
        data = typeof data === 'object' ? data : {};
        let result = new EventExhibitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["ExhibitorId"] = this.exhibitorId !== undefined ? this.exhibitorId : <any>null;
        data["PrimaryContactId"] = this.primaryContactId !== undefined ? this.primaryContactId : <any>null;
        data["HasOnsiteContact"] = this.hasOnsiteContact !== undefined ? this.hasOnsiteContact : <any>null;
        data["OnsiteEmail"] = this.onsiteEmail !== undefined ? this.onsiteEmail : <any>null;
        data["OnsiteFirstName"] = this.onsiteFirstName !== undefined ? this.onsiteFirstName : <any>null;
        data["OnsiteLastName"] = this.onsiteLastName !== undefined ? this.onsiteLastName : <any>null;
        data["BoothNumber"] = this.boothNumber !== undefined ? this.boothNumber : <any>null;
        data["BoothSize"] = this.boothSize !== undefined ? this.boothSize : <any>null;
        data["Location"] = this.location !== undefined ? this.location : <any>null;
        data["FreePassCount"] = this.freePassCount !== undefined ? this.freePassCount : <any>null;
        data["ProductDetails"] = this.productDetails !== undefined ? this.productDetails : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["AddressId"] = this.addressId !== undefined ? this.addressId : <any>null;
        data["ContractorPasses"] = this.contractorPasses !== undefined ? this.contractorPasses : <any>null;
        data["CompanyURL"] = this.companyURL !== undefined ? this.companyURL : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventExbSymposia)) {
            data["EventExbSymposia"] = [];
            for (let item of this.eventExbSymposia)
                data["EventExbSymposia"].push(item.toJSON());
        }
        data["Exhibitor"] = this.exhibitor ? this.exhibitor.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        if (Array.isArray(this.eventExhibitorAccess)) {
            data["EventExhibitorAccess"] = [];
            for (let item of this.eventExhibitorAccess)
                data["EventExhibitorAccess"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorPerson)) {
            data["EventExhibitorPerson"] = [];
            for (let item of this.eventExhibitorPerson)
                data["EventExhibitorPerson"].push(item.toJSON());
        }
        if (Array.isArray(this.eventExhibitorProduct)) {
            data["EventExhibitorProduct"] = [];
            for (let item of this.eventExhibitorProduct)
                data["EventExhibitorProduct"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventExhibitor {
    id?: number | null;
    exhibitorId?: number | null;
    primaryContactId?: string | null;
    hasOnsiteContact?: boolean | null;
    onsiteEmail?: string | null;
    onsiteFirstName?: string | null;
    onsiteLastName?: string | null;
    boothNumber?: string | null;
    boothSize?: string | null;
    location?: string | null;
    freePassCount?: number | null;
    productDetails?: string | null;
    mergedUserId?: string | null;
    addressId?: number | null;
    contractorPasses?: string | null;
    companyURL?: string | null;
    name?: string | null;
    isActive?: boolean | null;
    eventExbSymposia?: EventExbSymposia[] | null;
    exhibitor?: Exhibitor | null;
    userAddress?: UserAddress | null;
    eventExhibitorAccess?: EventExhibitorAccess[] | null;
    eventExhibitorPerson?: EventExhibitorPerson[] | null;
    eventExhibitorProduct?: EventExhibitorProduct[] | null;
    user?: User | null;
    user1?: User | null;
    eventRegistration?: EventRegistration[] | null;
}

export class EventExhibitorProduct implements IEventExhibitorProduct {
    id?: number | null;
    eventId?: number | null;
    eventExhibitorId?: number | null;
    productName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    event?: Event | null;
    eventExhibitor?: EventExhibitor | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEventExhibitorProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.productName = _data["ProductName"] !== undefined ? _data["ProductName"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventExhibitor = _data["EventExhibitor"] ? EventExhibitor.fromJS(_data["EventExhibitor"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EventExhibitorProduct {
        data = typeof data === 'object' ? data : {};
        let result = new EventExhibitorProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["ProductName"] = this.productName !== undefined ? this.productName : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventExhibitor"] = this.eventExhibitor ? this.eventExhibitor.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEventExhibitorProduct {
    id?: number | null;
    eventId?: number | null;
    eventExhibitorId?: number | null;
    productName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    event?: Event | null;
    eventExhibitor?: EventExhibitor | null;
    user?: User | null;
    user1?: User | null;
}

export class EventFeeAttendanceGroup implements IEventFeeAttendanceGroup {
    id?: number | null;
    eventFeeId?: number | null;
    attendanceGroupId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    attendanceGroup?: AttendanceGroup | null;
    eventFee?: EventFee | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEventFeeAttendanceGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventFeeId = _data["EventFeeId"] !== undefined ? _data["EventFeeId"] : <any>null;
            this.attendanceGroupId = _data["AttendanceGroupId"] !== undefined ? _data["AttendanceGroupId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.attendanceGroup = _data["AttendanceGroup"] ? AttendanceGroup.fromJS(_data["AttendanceGroup"]) : <any>null;
            this.eventFee = _data["EventFee"] ? EventFee.fromJS(_data["EventFee"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EventFeeAttendanceGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeAttendanceGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventFeeId"] = this.eventFeeId !== undefined ? this.eventFeeId : <any>null;
        data["AttendanceGroupId"] = this.attendanceGroupId !== undefined ? this.attendanceGroupId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["AttendanceGroup"] = this.attendanceGroup ? this.attendanceGroup.toJSON() : <any>null;
        data["EventFee"] = this.eventFee ? this.eventFee.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEventFeeAttendanceGroup {
    id?: number | null;
    eventFeeId?: number | null;
    attendanceGroupId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    attendanceGroup?: AttendanceGroup | null;
    eventFee?: EventFee | null;
    user?: User | null;
    user1?: User | null;
}

export class EventGroup implements IEventGroup {
    id?: number | null;
    name?: string | null;
    leaderId?: string | null;
    billingAddressId?: number | null;
    hasOnsiteContact?: boolean | null;
    titleId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    mobile?: string | null;
    email?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    countryId?: number | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    duplicateEventGroupId?: number | null;
    personTitle?: PersonTitle | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;
    userAddress?: UserAddress | null;
    eventGroupMember?: EventGroupMember[] | null;
    eventRegistration?: EventRegistration[] | null;

    constructor(data?: IEventGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.leaderId = _data["LeaderId"] !== undefined ? _data["LeaderId"] : <any>null;
            this.billingAddressId = _data["BillingAddressId"] !== undefined ? _data["BillingAddressId"] : <any>null;
            this.hasOnsiteContact = _data["HasOnsiteContact"] !== undefined ? _data["HasOnsiteContact"] : <any>null;
            this.titleId = _data["TitleId"] !== undefined ? _data["TitleId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.mobile = _data["Mobile"] !== undefined ? _data["Mobile"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.duplicateEventGroupId = _data["DuplicateEventGroupId"] !== undefined ? _data["DuplicateEventGroupId"] : <any>null;
            this.personTitle = _data["PersonTitle"] ? PersonTitle.fromJS(_data["PersonTitle"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.user3 = _data["User3"] ? User.fromJS(_data["User3"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
            if (Array.isArray(_data["EventGroupMember"])) {
                this.eventGroupMember = [] as any;
                for (let item of _data["EventGroupMember"])
                    this.eventGroupMember!.push(EventGroupMember.fromJS(item));
            }
            else {
                this.eventGroupMember = <any>null;
            }
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
        }
    }

    static fromJS(data: any): EventGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EventGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["LeaderId"] = this.leaderId !== undefined ? this.leaderId : <any>null;
        data["BillingAddressId"] = this.billingAddressId !== undefined ? this.billingAddressId : <any>null;
        data["HasOnsiteContact"] = this.hasOnsiteContact !== undefined ? this.hasOnsiteContact : <any>null;
        data["TitleId"] = this.titleId !== undefined ? this.titleId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["Mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["DuplicateEventGroupId"] = this.duplicateEventGroupId !== undefined ? this.duplicateEventGroupId : <any>null;
        data["PersonTitle"] = this.personTitle ? this.personTitle.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["User3"] = this.user3 ? this.user3.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        if (Array.isArray(this.eventGroupMember)) {
            data["EventGroupMember"] = [];
            for (let item of this.eventGroupMember)
                data["EventGroupMember"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventGroup {
    id?: number | null;
    name?: string | null;
    leaderId?: string | null;
    billingAddressId?: number | null;
    hasOnsiteContact?: boolean | null;
    titleId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    mobile?: string | null;
    email?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    countryId?: number | null;
    isDeleted?: boolean | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    duplicateEventGroupId?: number | null;
    personTitle?: PersonTitle | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;
    userAddress?: UserAddress | null;
    eventGroupMember?: EventGroupMember[] | null;
    eventRegistration?: EventRegistration[] | null;
}

export class EventGroupMember implements IEventGroupMember {
    id?: number | null;
    groupId?: number | null;
    userId?: string | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    eventGroup?: EventGroup | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;

    constructor(data?: IEventGroupMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.eventGroup = _data["EventGroup"] ? EventGroup.fromJS(_data["EventGroup"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.user3 = _data["User3"] ? User.fromJS(_data["User3"]) : <any>null;
        }
    }

    static fromJS(data: any): EventGroupMember {
        data = typeof data === 'object' ? data : {};
        let result = new EventGroupMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["EventGroup"] = this.eventGroup ? this.eventGroup.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["User3"] = this.user3 ? this.user3.toJSON() : <any>null;
        return data;
    }
}

export interface IEventGroupMember {
    id?: number | null;
    groupId?: number | null;
    userId?: string | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    eventGroup?: EventGroup | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    user3?: User | null;
}

export class EventTemplate implements IEventTemplate {
    id?: number | null;
    templateId?: number | null;
    eventId?: number | null;
    fileName?: string | null;
    isActive?: boolean | null;
    eventAttendanceGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    eventAttendanceGroup?: EventAttendanceGroup | null;
    template?: Template | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IEventTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.templateId = _data["TemplateId"] !== undefined ? _data["TemplateId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.eventAttendanceGroupId = _data["EventAttendanceGroupId"] !== undefined ? _data["EventAttendanceGroupId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventAttendanceGroup = _data["EventAttendanceGroup"] ? EventAttendanceGroup.fromJS(_data["EventAttendanceGroup"]) : <any>null;
            this.template = _data["Template"] ? Template.fromJS(_data["Template"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new EventTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["TemplateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["EventAttendanceGroupId"] = this.eventAttendanceGroupId !== undefined ? this.eventAttendanceGroupId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventAttendanceGroup"] = this.eventAttendanceGroup ? this.eventAttendanceGroup.toJSON() : <any>null;
        data["Template"] = this.template ? this.template.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTemplate {
    id?: number | null;
    templateId?: number | null;
    eventId?: number | null;
    fileName?: string | null;
    isActive?: boolean | null;
    eventAttendanceGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    eventAttendanceGroup?: EventAttendanceGroup | null;
    template?: Template | null;
    user?: User | null;
    user1?: User | null;
}

export class EventTempStaffMapping implements IEventTempStaffMapping {
    eventId?: number | null;
    userId?: string | null;
    isActive?: boolean | null;
    event?: Event | null;
    user?: User | null;

    constructor(data?: IEventTempStaffMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTempStaffMapping {
        data = typeof data === 'object' ? data : {};
        let result = new EventTempStaffMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTempStaffMapping {
    eventId?: number | null;
    userId?: string | null;
    isActive?: boolean | null;
    event?: Event | null;
    user?: User | null;
}

export class Exhibitor implements IExhibitor {
    id?: number | null;
    name?: string | null;
    companyURL?: string | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    primaryContactId?: string | null;
    addressId?: number | null;
    productDetails?: string | null;
    eventExhibitor?: EventExhibitor[] | null;
    user?: User | null;
    userAddress?: UserAddress | null;

    constructor(data?: IExhibitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.companyURL = _data["CompanyURL"] !== undefined ? _data["CompanyURL"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.primaryContactId = _data["PrimaryContactId"] !== undefined ? _data["PrimaryContactId"] : <any>null;
            this.addressId = _data["AddressId"] !== undefined ? _data["AddressId"] : <any>null;
            this.productDetails = _data["ProductDetails"] !== undefined ? _data["ProductDetails"] : <any>null;
            if (Array.isArray(_data["EventExhibitor"])) {
                this.eventExhibitor = [] as any;
                for (let item of _data["EventExhibitor"])
                    this.eventExhibitor!.push(EventExhibitor.fromJS(item));
            }
            else {
                this.eventExhibitor = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
        }
    }

    static fromJS(data: any): Exhibitor {
        data = typeof data === 'object' ? data : {};
        let result = new Exhibitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CompanyURL"] = this.companyURL !== undefined ? this.companyURL : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["PrimaryContactId"] = this.primaryContactId !== undefined ? this.primaryContactId : <any>null;
        data["AddressId"] = this.addressId !== undefined ? this.addressId : <any>null;
        data["ProductDetails"] = this.productDetails !== undefined ? this.productDetails : <any>null;
        if (Array.isArray(this.eventExhibitor)) {
            data["EventExhibitor"] = [];
            for (let item of this.eventExhibitor)
                data["EventExhibitor"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        return data;
    }
}

export interface IExhibitor {
    id?: number | null;
    name?: string | null;
    companyURL?: string | null;
    isDeleted?: boolean | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    primaryContactId?: string | null;
    addressId?: number | null;
    productDetails?: string | null;
    eventExhibitor?: EventExhibitor[] | null;
    user?: User | null;
    userAddress?: UserAddress | null;
}

export class ExhibitorDeviceDetails implements IExhibitorDeviceDetails {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    deviceName?: string | null;
    lastSyncOn?: Date | null;
    isActive?: boolean | null;
    loggedInTime?: Date | null;
    loggedOutTime?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IExhibitorDeviceDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventExhibitorAccessId = _data["EventExhibitorAccessId"] !== undefined ? _data["EventExhibitorAccessId"] : <any>null;
            this.deviceName = _data["DeviceName"] !== undefined ? _data["DeviceName"] : <any>null;
            this.lastSyncOn = _data["LastSyncOn"] ? new Date(_data["LastSyncOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.loggedInTime = _data["LoggedInTime"] ? new Date(_data["LoggedInTime"].toString()) : <any>null;
            this.loggedOutTime = _data["LoggedOutTime"] ? new Date(_data["LoggedOutTime"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.eventExhibitorAccess = _data["EventExhibitorAccess"] ? EventExhibitorAccess.fromJS(_data["EventExhibitorAccess"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): ExhibitorDeviceDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ExhibitorDeviceDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventExhibitorAccessId"] = this.eventExhibitorAccessId !== undefined ? this.eventExhibitorAccessId : <any>null;
        data["DeviceName"] = this.deviceName !== undefined ? this.deviceName : <any>null;
        data["LastSyncOn"] = this.lastSyncOn ? this.lastSyncOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["LoggedInTime"] = this.loggedInTime ? this.loggedInTime.toISOString() : <any>null;
        data["LoggedOutTime"] = this.loggedOutTime ? this.loggedOutTime.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["EventExhibitorAccess"] = this.eventExhibitorAccess ? this.eventExhibitorAccess.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IExhibitorDeviceDetails {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    deviceName?: string | null;
    lastSyncOn?: Date | null;
    isActive?: boolean | null;
    loggedInTime?: Date | null;
    loggedOutTime?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;
    user?: User | null;
    user1?: User | null;
}

export class Invoice implements IInvoice {
    id?: number | null;
    invoiceDate?: Date | null;
    paymentDate?: Date | null;
    invoiceNumber?: string | null;
    invoiceStatus?: number | null;
    fileStatusId?: number | null;
    isRefunded?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    invoiceAddressId?: number | null;
    impersonateUserId?: string | null;
    creditNote?: CreditNote[] | null;
    user?: User | null;
    user1?: User | null;
    userAddress?: UserAddress | null;
    invoiceDiscountMapping?: InvoiceDiscountMapping[] | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;

    constructor(data?: IInvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.invoiceDate = _data["InvoiceDate"] ? new Date(_data["InvoiceDate"].toString()) : <any>null;
            this.paymentDate = _data["PaymentDate"] ? new Date(_data["PaymentDate"].toString()) : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.invoiceStatus = _data["InvoiceStatus"] !== undefined ? _data["InvoiceStatus"] : <any>null;
            this.fileStatusId = _data["FileStatusId"] !== undefined ? _data["FileStatusId"] : <any>null;
            this.isRefunded = _data["IsRefunded"] !== undefined ? _data["IsRefunded"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.invoiceAddressId = _data["InvoiceAddressId"] !== undefined ? _data["InvoiceAddressId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            if (Array.isArray(_data["CreditNote"])) {
                this.creditNote = [] as any;
                for (let item of _data["CreditNote"])
                    this.creditNote!.push(CreditNote.fromJS(item));
            }
            else {
                this.creditNote = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
            if (Array.isArray(_data["InvoiceDiscountMapping"])) {
                this.invoiceDiscountMapping = [] as any;
                for (let item of _data["InvoiceDiscountMapping"])
                    this.invoiceDiscountMapping!.push(InvoiceDiscountMapping.fromJS(item));
            }
            else {
                this.invoiceDiscountMapping = <any>null;
            }
            if (Array.isArray(_data["PaymentDetailsMapping"])) {
                this.paymentDetailsMapping = [] as any;
                for (let item of _data["PaymentDetailsMapping"])
                    this.paymentDetailsMapping!.push(PaymentDetailsMapping.fromJS(item));
            }
            else {
                this.paymentDetailsMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): Invoice {
        data = typeof data === 'object' ? data : {};
        let result = new Invoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["InvoiceStatus"] = this.invoiceStatus !== undefined ? this.invoiceStatus : <any>null;
        data["FileStatusId"] = this.fileStatusId !== undefined ? this.fileStatusId : <any>null;
        data["IsRefunded"] = this.isRefunded !== undefined ? this.isRefunded : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["InvoiceAddressId"] = this.invoiceAddressId !== undefined ? this.invoiceAddressId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        if (Array.isArray(this.creditNote)) {
            data["CreditNote"] = [];
            for (let item of this.creditNote)
                data["CreditNote"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        if (Array.isArray(this.invoiceDiscountMapping)) {
            data["InvoiceDiscountMapping"] = [];
            for (let item of this.invoiceDiscountMapping)
                data["InvoiceDiscountMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentDetailsMapping)) {
            data["PaymentDetailsMapping"] = [];
            for (let item of this.paymentDetailsMapping)
                data["PaymentDetailsMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInvoice {
    id?: number | null;
    invoiceDate?: Date | null;
    paymentDate?: Date | null;
    invoiceNumber?: string | null;
    invoiceStatus?: number | null;
    fileStatusId?: number | null;
    isRefunded?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    invoiceAddressId?: number | null;
    impersonateUserId?: string | null;
    creditNote?: CreditNote[] | null;
    user?: User | null;
    user1?: User | null;
    userAddress?: UserAddress | null;
    invoiceDiscountMapping?: InvoiceDiscountMapping[] | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;
}

export class JournalRole implements IJournalRole {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    journalId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    journal?: Journal | null;
    user?: User | null;
    user1?: User | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;

    constructor(data?: IJournalRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.journalId = _data["JournalId"] !== undefined ? _data["JournalId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.journal = _data["Journal"] ? Journal.fromJS(_data["Journal"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["JournalRoleUserMapping"])) {
                this.journalRoleUserMapping = [] as any;
                for (let item of _data["JournalRoleUserMapping"])
                    this.journalRoleUserMapping!.push(JournalRoleUserMapping.fromJS(item));
            }
            else {
                this.journalRoleUserMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): JournalRole {
        data = typeof data === 'object' ? data : {};
        let result = new JournalRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["JournalId"] = this.journalId !== undefined ? this.journalId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["Journal"] = this.journal ? this.journal.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.journalRoleUserMapping)) {
            data["JournalRoleUserMapping"] = [];
            for (let item of this.journalRoleUserMapping)
                data["JournalRoleUserMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJournalRole {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    journalId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    journal?: Journal | null;
    user?: User | null;
    user1?: User | null;
    journalRoleUserMapping?: JournalRoleUserMapping[] | null;
}

export class MembershipApplication implements IMembershipApplication {
    id?: number | null;
    createdDate?: Date | null;
    appliedDate?: Date | null;
    approvedDate?: Date | null;
    applicationStatusId?: number | null;
    isReviewed?: boolean | null;
    userId?: string | null;
    terminationDate?: Date | null;
    terminationReason?: string | null;
    displayInOnlineDirectory?: boolean | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isDeleted?: boolean | null;
    trainingCompletionYear?: number | null;
    inCompleteReason?: string | null;
    impersonateUserId?: string | null;
    reviewedDate?: Date | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    reInstateOn?: Date | null;
    applicationStatus?: ApplicationStatus | null;
    documentMapping?: DocumentMapping[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    memberSubscription?: MemberSubscription[] | null;

    constructor(data?: IMembershipApplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.createdDate = _data["CreatedDate"] ? new Date(_data["CreatedDate"].toString()) : <any>null;
            this.appliedDate = _data["AppliedDate"] ? new Date(_data["AppliedDate"].toString()) : <any>null;
            this.approvedDate = _data["ApprovedDate"] ? new Date(_data["ApprovedDate"].toString()) : <any>null;
            this.applicationStatusId = _data["ApplicationStatusId"] !== undefined ? _data["ApplicationStatusId"] : <any>null;
            this.isReviewed = _data["IsReviewed"] !== undefined ? _data["IsReviewed"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.terminationDate = _data["TerminationDate"] ? new Date(_data["TerminationDate"].toString()) : <any>null;
            this.terminationReason = _data["TerminationReason"] !== undefined ? _data["TerminationReason"] : <any>null;
            this.displayInOnlineDirectory = _data["DisplayInOnlineDirectory"] !== undefined ? _data["DisplayInOnlineDirectory"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.trainingCompletionYear = _data["TrainingCompletionYear"] !== undefined ? _data["TrainingCompletionYear"] : <any>null;
            this.inCompleteReason = _data["InCompleteReason"] !== undefined ? _data["InCompleteReason"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.reviewedDate = _data["ReviewedDate"] ? new Date(_data["ReviewedDate"].toString()) : <any>null;
            this.contactModifiedOn = _data["ContactModifiedOn"] ? new Date(_data["ContactModifiedOn"].toString()) : <any>null;
            this.contactLastSyncOn = _data["ContactLastSyncOn"] ? new Date(_data["ContactLastSyncOn"].toString()) : <any>null;
            this.reInstateOn = _data["ReInstateOn"] ? new Date(_data["ReInstateOn"].toString()) : <any>null;
            this.applicationStatus = _data["ApplicationStatus"] ? ApplicationStatus.fromJS(_data["ApplicationStatus"]) : <any>null;
            if (Array.isArray(_data["DocumentMapping"])) {
                this.documentMapping = [] as any;
                for (let item of _data["DocumentMapping"])
                    this.documentMapping!.push(DocumentMapping.fromJS(item));
            }
            else {
                this.documentMapping = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            if (Array.isArray(_data["MemberSubscription"])) {
                this.memberSubscription = [] as any;
                for (let item of _data["MemberSubscription"])
                    this.memberSubscription!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription = <any>null;
            }
        }
    }

    static fromJS(data: any): MembershipApplication {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipApplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["CreatedDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["AppliedDate"] = this.appliedDate ? this.appliedDate.toISOString() : <any>null;
        data["ApprovedDate"] = this.approvedDate ? this.approvedDate.toISOString() : <any>null;
        data["ApplicationStatusId"] = this.applicationStatusId !== undefined ? this.applicationStatusId : <any>null;
        data["IsReviewed"] = this.isReviewed !== undefined ? this.isReviewed : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["TerminationDate"] = this.terminationDate ? this.terminationDate.toISOString() : <any>null;
        data["TerminationReason"] = this.terminationReason !== undefined ? this.terminationReason : <any>null;
        data["DisplayInOnlineDirectory"] = this.displayInOnlineDirectory !== undefined ? this.displayInOnlineDirectory : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["TrainingCompletionYear"] = this.trainingCompletionYear !== undefined ? this.trainingCompletionYear : <any>null;
        data["InCompleteReason"] = this.inCompleteReason !== undefined ? this.inCompleteReason : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["ReviewedDate"] = this.reviewedDate ? this.reviewedDate.toISOString() : <any>null;
        data["ContactModifiedOn"] = this.contactModifiedOn ? this.contactModifiedOn.toISOString() : <any>null;
        data["ContactLastSyncOn"] = this.contactLastSyncOn ? this.contactLastSyncOn.toISOString() : <any>null;
        data["ReInstateOn"] = this.reInstateOn ? this.reInstateOn.toISOString() : <any>null;
        data["ApplicationStatus"] = this.applicationStatus ? this.applicationStatus.toJSON() : <any>null;
        if (Array.isArray(this.documentMapping)) {
            data["DocumentMapping"] = [];
            for (let item of this.documentMapping)
                data["DocumentMapping"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        if (Array.isArray(this.memberSubscription)) {
            data["MemberSubscription"] = [];
            for (let item of this.memberSubscription)
                data["MemberSubscription"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMembershipApplication {
    id?: number | null;
    createdDate?: Date | null;
    appliedDate?: Date | null;
    approvedDate?: Date | null;
    applicationStatusId?: number | null;
    isReviewed?: boolean | null;
    userId?: string | null;
    terminationDate?: Date | null;
    terminationReason?: string | null;
    displayInOnlineDirectory?: boolean | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isDeleted?: boolean | null;
    trainingCompletionYear?: number | null;
    inCompleteReason?: string | null;
    impersonateUserId?: string | null;
    reviewedDate?: Date | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    reInstateOn?: Date | null;
    applicationStatus?: ApplicationStatus | null;
    documentMapping?: DocumentMapping[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    memberSubscription?: MemberSubscription[] | null;
}

export class MembershipAutoRenewal implements IMembershipAutoRenewal {
    id?: number | null;
    userId?: string | null;
    membershipTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    renewalType?: number | null;
    isActive?: boolean | null;
    reason?: string | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    user?: User | null;
    membershipType?: MembershipType | null;
    user1?: User | null;
    renewalType1?: RenewalType | null;
    user2?: User | null;

    constructor(data?: IMembershipAutoRenewal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTo = _data["ValidTo"] ? new Date(_data["ValidTo"].toString()) : <any>null;
            this.renewalType = _data["RenewalType"] !== undefined ? _data["RenewalType"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.reason = _data["Reason"] !== undefined ? _data["Reason"] : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.renewalType1 = _data["RenewalType1"] ? RenewalType.fromJS(_data["RenewalType1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): MembershipAutoRenewal {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipAutoRenewal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["RenewalType"] = this.renewalType !== undefined ? this.renewalType : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Reason"] = this.reason !== undefined ? this.reason : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["RenewalType1"] = this.renewalType1 ? this.renewalType1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IMembershipAutoRenewal {
    id?: number | null;
    userId?: string | null;
    membershipTypeId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    renewalType?: number | null;
    isActive?: boolean | null;
    reason?: string | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    user?: User | null;
    membershipType?: MembershipType | null;
    user1?: User | null;
    renewalType1?: RenewalType | null;
    user2?: User | null;
}

export class MembershipType implements IMembershipType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    isVisibleToUser?: boolean | null;
    applicableForEvent?: number | null;
    isAutoRenew?: boolean | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isCertificateTemplateRequired?: boolean | null;
    currentMembership?: CurrentMembership[] | null;
    currentMembership1?: CurrentMembership[] | null;
    fee?: Fee[] | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;
    membershipTypeTranslation?: MembershipTypeTranslation[] | null;
    memberSubscription?: MemberSubscription[] | null;
    oUPChange?: OUPChange[] | null;
    oUPChange1?: OUPChange[] | null;
    user?: User | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate[] | null;

    constructor(data?: IMembershipType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.isVisibleToUser = _data["IsVisibleToUser"] !== undefined ? _data["IsVisibleToUser"] : <any>null;
            this.applicableForEvent = _data["ApplicableForEvent"] !== undefined ? _data["ApplicableForEvent"] : <any>null;
            this.isAutoRenew = _data["IsAutoRenew"] !== undefined ? _data["IsAutoRenew"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.isCertificateTemplateRequired = _data["IsCertificateTemplateRequired"] !== undefined ? _data["IsCertificateTemplateRequired"] : <any>null;
            if (Array.isArray(_data["CurrentMembership"])) {
                this.currentMembership = [] as any;
                for (let item of _data["CurrentMembership"])
                    this.currentMembership!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership = <any>null;
            }
            if (Array.isArray(_data["CurrentMembership1"])) {
                this.currentMembership1 = [] as any;
                for (let item of _data["CurrentMembership1"])
                    this.currentMembership1!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership1 = <any>null;
            }
            if (Array.isArray(_data["Fee"])) {
                this.fee = [] as any;
                for (let item of _data["Fee"])
                    this.fee!.push(Fee.fromJS(item));
            }
            else {
                this.fee = <any>null;
            }
            if (Array.isArray(_data["MembershipAutoRenewal"])) {
                this.membershipAutoRenewal = [] as any;
                for (let item of _data["MembershipAutoRenewal"])
                    this.membershipAutoRenewal!.push(MembershipAutoRenewal.fromJS(item));
            }
            else {
                this.membershipAutoRenewal = <any>null;
            }
            if (Array.isArray(_data["MembershipTypeTranslation"])) {
                this.membershipTypeTranslation = [] as any;
                for (let item of _data["MembershipTypeTranslation"])
                    this.membershipTypeTranslation!.push(MembershipTypeTranslation.fromJS(item));
            }
            else {
                this.membershipTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["MemberSubscription"])) {
                this.memberSubscription = [] as any;
                for (let item of _data["MemberSubscription"])
                    this.memberSubscription!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription = <any>null;
            }
            if (Array.isArray(_data["OUPChange"])) {
                this.oUPChange = [] as any;
                for (let item of _data["OUPChange"])
                    this.oUPChange!.push(OUPChange.fromJS(item));
            }
            else {
                this.oUPChange = <any>null;
            }
            if (Array.isArray(_data["OUPChange1"])) {
                this.oUPChange1 = [] as any;
                for (let item of _data["OUPChange1"])
                    this.oUPChange1!.push(OUPChange.fromJS(item));
            }
            else {
                this.oUPChange1 = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            if (Array.isArray(_data["MembershipCertificateTemplate"])) {
                this.membershipCertificateTemplate = [] as any;
                for (let item of _data["MembershipCertificateTemplate"])
                    this.membershipCertificateTemplate!.push(MembershipCertificateTemplate.fromJS(item));
            }
            else {
                this.membershipCertificateTemplate = <any>null;
            }
        }
    }

    static fromJS(data: any): MembershipType {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["IsVisibleToUser"] = this.isVisibleToUser !== undefined ? this.isVisibleToUser : <any>null;
        data["ApplicableForEvent"] = this.applicableForEvent !== undefined ? this.applicableForEvent : <any>null;
        data["IsAutoRenew"] = this.isAutoRenew !== undefined ? this.isAutoRenew : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["IsCertificateTemplateRequired"] = this.isCertificateTemplateRequired !== undefined ? this.isCertificateTemplateRequired : <any>null;
        if (Array.isArray(this.currentMembership)) {
            data["CurrentMembership"] = [];
            for (let item of this.currentMembership)
                data["CurrentMembership"].push(item.toJSON());
        }
        if (Array.isArray(this.currentMembership1)) {
            data["CurrentMembership1"] = [];
            for (let item of this.currentMembership1)
                data["CurrentMembership1"].push(item.toJSON());
        }
        if (Array.isArray(this.fee)) {
            data["Fee"] = [];
            for (let item of this.fee)
                data["Fee"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipAutoRenewal)) {
            data["MembershipAutoRenewal"] = [];
            for (let item of this.membershipAutoRenewal)
                data["MembershipAutoRenewal"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipTypeTranslation)) {
            data["MembershipTypeTranslation"] = [];
            for (let item of this.membershipTypeTranslation)
                data["MembershipTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.memberSubscription)) {
            data["MemberSubscription"] = [];
            for (let item of this.memberSubscription)
                data["MemberSubscription"].push(item.toJSON());
        }
        if (Array.isArray(this.oUPChange)) {
            data["OUPChange"] = [];
            for (let item of this.oUPChange)
                data["OUPChange"].push(item.toJSON());
        }
        if (Array.isArray(this.oUPChange1)) {
            data["OUPChange1"] = [];
            for (let item of this.oUPChange1)
                data["OUPChange1"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        if (Array.isArray(this.membershipCertificateTemplate)) {
            data["MembershipCertificateTemplate"] = [];
            for (let item of this.membershipCertificateTemplate)
                data["MembershipCertificateTemplate"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMembershipType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    isVisibleToUser?: boolean | null;
    applicableForEvent?: number | null;
    isAutoRenew?: boolean | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    isCertificateTemplateRequired?: boolean | null;
    currentMembership?: CurrentMembership[] | null;
    currentMembership1?: CurrentMembership[] | null;
    fee?: Fee[] | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;
    membershipTypeTranslation?: MembershipTypeTranslation[] | null;
    memberSubscription?: MemberSubscription[] | null;
    oUPChange?: OUPChange[] | null;
    oUPChange1?: OUPChange[] | null;
    user?: User | null;
    membershipCertificateTemplate?: MembershipCertificateTemplate[] | null;
}

export class MemberSubscription implements IMemberSubscription {
    id?: number | null;
    applicationId?: number | null;
    userId?: string | null;
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    subscriptionStatus?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    userAddressId?: number | null;
    impersonateUserId?: string | null;
    reminderCount?: number | null;
    isFirstYear?: boolean | null;
    membershipApplication?: MembershipApplication | null;
    membershipType?: MembershipType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    userAddress?: UserAddress | null;

    constructor(data?: IMemberSubscription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.applicationId = _data["ApplicationId"] !== undefined ? _data["ApplicationId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.memberTypeId = _data["MemberTypeId"] !== undefined ? _data["MemberTypeId"] : <any>null;
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>null;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>null;
            this.subscriptionStatus = _data["SubscriptionStatus"] !== undefined ? _data["SubscriptionStatus"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.userAddressId = _data["UserAddressId"] !== undefined ? _data["UserAddressId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.reminderCount = _data["ReminderCount"] !== undefined ? _data["ReminderCount"] : <any>null;
            this.isFirstYear = _data["IsFirstYear"] !== undefined ? _data["IsFirstYear"] : <any>null;
            this.membershipApplication = _data["MembershipApplication"] ? MembershipApplication.fromJS(_data["MembershipApplication"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
        }
    }

    static fromJS(data: any): MemberSubscription {
        data = typeof data === 'object' ? data : {};
        let result = new MemberSubscription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["ApplicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["MemberTypeId"] = this.memberTypeId !== undefined ? this.memberTypeId : <any>null;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["SubscriptionStatus"] = this.subscriptionStatus !== undefined ? this.subscriptionStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["UserAddressId"] = this.userAddressId !== undefined ? this.userAddressId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["ReminderCount"] = this.reminderCount !== undefined ? this.reminderCount : <any>null;
        data["IsFirstYear"] = this.isFirstYear !== undefined ? this.isFirstYear : <any>null;
        data["MembershipApplication"] = this.membershipApplication ? this.membershipApplication.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        return data;
    }
}

export interface IMemberSubscription {
    id?: number | null;
    applicationId?: number | null;
    userId?: string | null;
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    subscriptionStatus?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    userAddressId?: number | null;
    impersonateUserId?: string | null;
    reminderCount?: number | null;
    isFirstYear?: boolean | null;
    membershipApplication?: MembershipApplication | null;
    membershipType?: MembershipType | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    userAddress?: UserAddress | null;
}

export class Notification implements INotification {
    id?: number | null;
    notifyFrom?: string | null;
    notifyTo?: string | null;
    message?: string | null;
    isVisible?: boolean | null;
    isRead?: boolean | null;
    sentOn?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    typeId?: number | null;
    isDeleted?: boolean | null;
    deletedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: INotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.notifyFrom = _data["NotifyFrom"] !== undefined ? _data["NotifyFrom"] : <any>null;
            this.notifyTo = _data["NotifyTo"] !== undefined ? _data["NotifyTo"] : <any>null;
            this.message = _data["Message"] !== undefined ? _data["Message"] : <any>null;
            this.isVisible = _data["IsVisible"] !== undefined ? _data["IsVisible"] : <any>null;
            this.isRead = _data["IsRead"] !== undefined ? _data["IsRead"] : <any>null;
            this.sentOn = _data["SentOn"] ? new Date(_data["SentOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.typeId = _data["TypeId"] !== undefined ? _data["TypeId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.deletedOn = _data["DeletedOn"] ? new Date(_data["DeletedOn"].toString()) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): Notification {
        data = typeof data === 'object' ? data : {};
        let result = new Notification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["NotifyFrom"] = this.notifyFrom !== undefined ? this.notifyFrom : <any>null;
        data["NotifyTo"] = this.notifyTo !== undefined ? this.notifyTo : <any>null;
        data["Message"] = this.message !== undefined ? this.message : <any>null;
        data["IsVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["IsRead"] = this.isRead !== undefined ? this.isRead : <any>null;
        data["SentOn"] = this.sentOn ? this.sentOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["DeletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface INotification {
    id?: number | null;
    notifyFrom?: string | null;
    notifyTo?: string | null;
    message?: string | null;
    isVisible?: boolean | null;
    isRead?: boolean | null;
    sentOn?: Date | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    typeId?: number | null;
    isDeleted?: boolean | null;
    deletedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class OnsiteUser implements IOnsiteUser {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    countryId?: number | null;
    feeCategoryId?: number | null;
    eventId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    count?: number | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    isPrinted?: boolean | null;
    country?: Country | null;
    event?: Event | null;
    eventFeeCategory?: EventFeeCategory | null;
    user?: User | null;

    constructor(data?: IOnsiteUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.count = _data["Count"] !== undefined ? _data["Count"] : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.isPrinted = _data["IsPrinted"] !== undefined ? _data["IsPrinted"] : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.eventFeeCategory = _data["EventFeeCategory"] ? EventFeeCategory.fromJS(_data["EventFeeCategory"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): OnsiteUser {
        data = typeof data === 'object' ? data : {};
        let result = new OnsiteUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["Count"] = this.count !== undefined ? this.count : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["IsPrinted"] = this.isPrinted !== undefined ? this.isPrinted : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["EventFeeCategory"] = this.eventFeeCategory ? this.eventFeeCategory.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IOnsiteUser {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    countryId?: number | null;
    feeCategoryId?: number | null;
    eventId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    count?: number | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isDeleted?: boolean | null;
    isPrinted?: boolean | null;
    country?: Country | null;
    event?: Event | null;
    eventFeeCategory?: EventFeeCategory | null;
    user?: User | null;
}

export class Organisation implements IOrganisation {
    id?: number | null;
    name?: string | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    primaryEmail?: string | null;
    supportEmail?: string | null;
    mobile?: string | null;
    phone?: string | null;
    url?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    bankDetail?: BankDetail[] | null;
    country?: Country | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IOrganisation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.street1 = _data["Street1"] !== undefined ? _data["Street1"] : <any>null;
            this.street2 = _data["Street2"] !== undefined ? _data["Street2"] : <any>null;
            this.postalCode = _data["PostalCode"] !== undefined ? _data["PostalCode"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.stateOrProvince = _data["StateOrProvince"] !== undefined ? _data["StateOrProvince"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.primaryEmail = _data["PrimaryEmail"] !== undefined ? _data["PrimaryEmail"] : <any>null;
            this.supportEmail = _data["SupportEmail"] !== undefined ? _data["SupportEmail"] : <any>null;
            this.mobile = _data["Mobile"] !== undefined ? _data["Mobile"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.url = _data["Url"] !== undefined ? _data["Url"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["BankDetail"])) {
                this.bankDetail = [] as any;
                for (let item of _data["BankDetail"])
                    this.bankDetail!.push(BankDetail.fromJS(item));
            }
            else {
                this.bankDetail = <any>null;
            }
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): Organisation {
        data = typeof data === 'object' ? data : {};
        let result = new Organisation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Street1"] = this.street1 !== undefined ? this.street1 : <any>null;
        data["Street2"] = this.street2 !== undefined ? this.street2 : <any>null;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["StateOrProvince"] = this.stateOrProvince !== undefined ? this.stateOrProvince : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["PrimaryEmail"] = this.primaryEmail !== undefined ? this.primaryEmail : <any>null;
        data["SupportEmail"] = this.supportEmail !== undefined ? this.supportEmail : <any>null;
        data["Mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["Url"] = this.url !== undefined ? this.url : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.bankDetail)) {
            data["BankDetail"] = [];
            for (let item of this.bankDetail)
                data["BankDetail"].push(item.toJSON());
        }
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IOrganisation {
    id?: number | null;
    name?: string | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    primaryEmail?: string | null;
    supportEmail?: string | null;
    mobile?: string | null;
    phone?: string | null;
    url?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    bankDetail?: BankDetail[] | null;
    country?: Country | null;
    user?: User | null;
    user1?: User | null;
}

export class OUPChange implements IOUPChange {
    id?: number | null;
    userId?: string | null;
    oUPType?: number | null;
    actionOn?: Date | null;
    actionBy?: string | null;
    typeFrom?: number | null;
    typeTo?: number | null;
    effectiveFrom?: Date | null;
    membershipType?: MembershipType | null;
    membershipType1?: MembershipType | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IOUPChange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.oUPType = _data["OUPType"] !== undefined ? _data["OUPType"] : <any>null;
            this.actionOn = _data["ActionOn"] ? new Date(_data["ActionOn"].toString()) : <any>null;
            this.actionBy = _data["ActionBy"] !== undefined ? _data["ActionBy"] : <any>null;
            this.typeFrom = _data["TypeFrom"] !== undefined ? _data["TypeFrom"] : <any>null;
            this.typeTo = _data["TypeTo"] !== undefined ? _data["TypeTo"] : <any>null;
            this.effectiveFrom = _data["EffectiveFrom"] ? new Date(_data["EffectiveFrom"].toString()) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
            this.membershipType1 = _data["MembershipType1"] ? MembershipType.fromJS(_data["MembershipType1"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): OUPChange {
        data = typeof data === 'object' ? data : {};
        let result = new OUPChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["OUPType"] = this.oUPType !== undefined ? this.oUPType : <any>null;
        data["ActionOn"] = this.actionOn ? this.actionOn.toISOString() : <any>null;
        data["ActionBy"] = this.actionBy !== undefined ? this.actionBy : <any>null;
        data["TypeFrom"] = this.typeFrom !== undefined ? this.typeFrom : <any>null;
        data["TypeTo"] = this.typeTo !== undefined ? this.typeTo : <any>null;
        data["EffectiveFrom"] = this.effectiveFrom ? this.effectiveFrom.toISOString() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        data["MembershipType1"] = this.membershipType1 ? this.membershipType1.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IOUPChange {
    id?: number | null;
    userId?: string | null;
    oUPType?: number | null;
    actionOn?: Date | null;
    actionBy?: string | null;
    typeFrom?: number | null;
    typeTo?: number | null;
    effectiveFrom?: Date | null;
    membershipType?: MembershipType | null;
    membershipType1?: MembershipType | null;
    user?: User | null;
    user1?: User | null;
}

export class PaymentTransaction implements IPaymentTransaction {
    id?: number | null;
    userId?: string | null;
    paymentGatewayId?: number | null;
    paymentTypeId?: number | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    status?: number | null;
    paymentReference?: string | null;
    responseDetails?: string | null;
    cardBrand?: number | null;
    mergedUserId?: string | null;
    duplicatePaymentTransactionId?: number | null;
    internalReferenceNumber?: string | null;
    hostedCheckoutId?: string | null;
    redirectUrl?: string | null;
    returnMac?: string | null;
    actualAmount?: number | null;
    previousTransactionId?: number | null;
    creditNoteId?: number | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;
    paymentGateway?: PaymentGateway | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IPaymentTransaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.paymentGatewayId = _data["PaymentGatewayId"] !== undefined ? _data["PaymentGatewayId"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.initiatedOn = _data["InitiatedOn"] ? new Date(_data["InitiatedOn"].toString()) : <any>null;
            this.completedOn = _data["CompletedOn"] ? new Date(_data["CompletedOn"].toString()) : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.paymentReference = _data["PaymentReference"] !== undefined ? _data["PaymentReference"] : <any>null;
            this.responseDetails = _data["ResponseDetails"] !== undefined ? _data["ResponseDetails"] : <any>null;
            this.cardBrand = _data["CardBrand"] !== undefined ? _data["CardBrand"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.duplicatePaymentTransactionId = _data["DuplicatePaymentTransactionId"] !== undefined ? _data["DuplicatePaymentTransactionId"] : <any>null;
            this.internalReferenceNumber = _data["InternalReferenceNumber"] !== undefined ? _data["InternalReferenceNumber"] : <any>null;
            this.hostedCheckoutId = _data["HostedCheckoutId"] !== undefined ? _data["HostedCheckoutId"] : <any>null;
            this.redirectUrl = _data["RedirectUrl"] !== undefined ? _data["RedirectUrl"] : <any>null;
            this.returnMac = _data["ReturnMac"] !== undefined ? _data["ReturnMac"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
            this.previousTransactionId = _data["PreviousTransactionId"] !== undefined ? _data["PreviousTransactionId"] : <any>null;
            this.creditNoteId = _data["CreditNoteId"] !== undefined ? _data["CreditNoteId"] : <any>null;
            if (Array.isArray(_data["PaymentDetailsMapping"])) {
                this.paymentDetailsMapping = [] as any;
                for (let item of _data["PaymentDetailsMapping"])
                    this.paymentDetailsMapping!.push(PaymentDetailsMapping.fromJS(item));
            }
            else {
                this.paymentDetailsMapping = <any>null;
            }
            this.paymentGateway = _data["PaymentGateway"] ? PaymentGateway.fromJS(_data["PaymentGateway"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentTransaction {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTransaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["PaymentGatewayId"] = this.paymentGatewayId !== undefined ? this.paymentGatewayId : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["InitiatedOn"] = this.initiatedOn ? this.initiatedOn.toISOString() : <any>null;
        data["CompletedOn"] = this.completedOn ? this.completedOn.toISOString() : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["PaymentReference"] = this.paymentReference !== undefined ? this.paymentReference : <any>null;
        data["ResponseDetails"] = this.responseDetails !== undefined ? this.responseDetails : <any>null;
        data["CardBrand"] = this.cardBrand !== undefined ? this.cardBrand : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["DuplicatePaymentTransactionId"] = this.duplicatePaymentTransactionId !== undefined ? this.duplicatePaymentTransactionId : <any>null;
        data["InternalReferenceNumber"] = this.internalReferenceNumber !== undefined ? this.internalReferenceNumber : <any>null;
        data["HostedCheckoutId"] = this.hostedCheckoutId !== undefined ? this.hostedCheckoutId : <any>null;
        data["RedirectUrl"] = this.redirectUrl !== undefined ? this.redirectUrl : <any>null;
        data["ReturnMac"] = this.returnMac !== undefined ? this.returnMac : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        data["PreviousTransactionId"] = this.previousTransactionId !== undefined ? this.previousTransactionId : <any>null;
        data["CreditNoteId"] = this.creditNoteId !== undefined ? this.creditNoteId : <any>null;
        if (Array.isArray(this.paymentDetailsMapping)) {
            data["PaymentDetailsMapping"] = [];
            for (let item of this.paymentDetailsMapping)
                data["PaymentDetailsMapping"].push(item.toJSON());
        }
        data["PaymentGateway"] = this.paymentGateway ? this.paymentGateway.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentTransaction {
    id?: number | null;
    userId?: string | null;
    paymentGatewayId?: number | null;
    paymentTypeId?: number | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    status?: number | null;
    paymentReference?: string | null;
    responseDetails?: string | null;
    cardBrand?: number | null;
    mergedUserId?: string | null;
    duplicatePaymentTransactionId?: number | null;
    internalReferenceNumber?: string | null;
    hostedCheckoutId?: string | null;
    redirectUrl?: string | null;
    returnMac?: string | null;
    actualAmount?: number | null;
    previousTransactionId?: number | null;
    creditNoteId?: number | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;
    paymentGateway?: PaymentGateway | null;
    user?: User | null;
    user1?: User | null;
}

export class Person implements IPerson {
    userId?: string | null;
    titleId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    middleName?: string | null;
    dateOfBirth?: Date | null;
    jobTitle?: string | null;
    isDeceased?: boolean | null;
    fax?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    requireNewsLetter?: boolean | null;
    nationality?: number | null;
    academicDegree?: string | null;
    professionTypeId?: number | null;
    position?: string | null;
    comments?: string | null;
    gender?: number | null;
    passportNumber?: string | null;
    passportExpiryDate?: Date | null;
    isCommentsVisible?: boolean | null;
    impersonateUserId?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    isPrivacyPolicyAgreed?: boolean | null;
    privacyPolicyAgreedOn?: Date | null;
    expertise?: string | null;
    biography?: string | null;
    consent?: boolean | null;
    country?: Country | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;
    personTitle?: PersonTitle | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.titleId = _data["TitleId"] !== undefined ? _data["TitleId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.middleName = _data["MiddleName"] !== undefined ? _data["MiddleName"] : <any>null;
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>null;
            this.jobTitle = _data["JobTitle"] !== undefined ? _data["JobTitle"] : <any>null;
            this.isDeceased = _data["IsDeceased"] !== undefined ? _data["IsDeceased"] : <any>null;
            this.fax = _data["Fax"] !== undefined ? _data["Fax"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.requireNewsLetter = _data["RequireNewsLetter"] !== undefined ? _data["RequireNewsLetter"] : <any>null;
            this.nationality = _data["Nationality"] !== undefined ? _data["Nationality"] : <any>null;
            this.academicDegree = _data["AcademicDegree"] !== undefined ? _data["AcademicDegree"] : <any>null;
            this.professionTypeId = _data["ProfessionTypeId"] !== undefined ? _data["ProfessionTypeId"] : <any>null;
            this.position = _data["Position"] !== undefined ? _data["Position"] : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.gender = _data["Gender"] !== undefined ? _data["Gender"] : <any>null;
            this.passportNumber = _data["PassportNumber"] !== undefined ? _data["PassportNumber"] : <any>null;
            this.passportExpiryDate = _data["PassportExpiryDate"] ? new Date(_data["PassportExpiryDate"].toString()) : <any>null;
            this.isCommentsVisible = _data["IsCommentsVisible"] !== undefined ? _data["IsCommentsVisible"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.contactModifiedOn = _data["ContactModifiedOn"] ? new Date(_data["ContactModifiedOn"].toString()) : <any>null;
            this.contactLastSyncOn = _data["ContactLastSyncOn"] ? new Date(_data["ContactLastSyncOn"].toString()) : <any>null;
            this.isPrivacyPolicyAgreed = _data["IsPrivacyPolicyAgreed"] !== undefined ? _data["IsPrivacyPolicyAgreed"] : <any>null;
            this.privacyPolicyAgreedOn = _data["PrivacyPolicyAgreedOn"] ? new Date(_data["PrivacyPolicyAgreedOn"].toString()) : <any>null;
            this.expertise = _data["Expertise"] !== undefined ? _data["Expertise"] : <any>null;
            this.biography = _data["Biography"] !== undefined ? _data["Biography"] : <any>null;
            this.consent = _data["Consent"] !== undefined ? _data["Consent"] : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            if (Array.isArray(_data["HistoricalEventRegistration"])) {
                this.historicalEventRegistration = [] as any;
                for (let item of _data["HistoricalEventRegistration"])
                    this.historicalEventRegistration!.push(HistoricalEventRegistration.fromJS(item));
            }
            else {
                this.historicalEventRegistration = <any>null;
            }
            this.personTitle = _data["PersonTitle"] ? PersonTitle.fromJS(_data["PersonTitle"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["TitleId"] = this.titleId !== undefined ? this.titleId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["MiddleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["JobTitle"] = this.jobTitle !== undefined ? this.jobTitle : <any>null;
        data["IsDeceased"] = this.isDeceased !== undefined ? this.isDeceased : <any>null;
        data["Fax"] = this.fax !== undefined ? this.fax : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["RequireNewsLetter"] = this.requireNewsLetter !== undefined ? this.requireNewsLetter : <any>null;
        data["Nationality"] = this.nationality !== undefined ? this.nationality : <any>null;
        data["AcademicDegree"] = this.academicDegree !== undefined ? this.academicDegree : <any>null;
        data["ProfessionTypeId"] = this.professionTypeId !== undefined ? this.professionTypeId : <any>null;
        data["Position"] = this.position !== undefined ? this.position : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["Gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["PassportNumber"] = this.passportNumber !== undefined ? this.passportNumber : <any>null;
        data["PassportExpiryDate"] = this.passportExpiryDate ? this.passportExpiryDate.toISOString() : <any>null;
        data["IsCommentsVisible"] = this.isCommentsVisible !== undefined ? this.isCommentsVisible : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["ContactModifiedOn"] = this.contactModifiedOn ? this.contactModifiedOn.toISOString() : <any>null;
        data["ContactLastSyncOn"] = this.contactLastSyncOn ? this.contactLastSyncOn.toISOString() : <any>null;
        data["IsPrivacyPolicyAgreed"] = this.isPrivacyPolicyAgreed !== undefined ? this.isPrivacyPolicyAgreed : <any>null;
        data["PrivacyPolicyAgreedOn"] = this.privacyPolicyAgreedOn ? this.privacyPolicyAgreedOn.toISOString() : <any>null;
        data["Expertise"] = this.expertise !== undefined ? this.expertise : <any>null;
        data["Biography"] = this.biography !== undefined ? this.biography : <any>null;
        data["Consent"] = this.consent !== undefined ? this.consent : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        if (Array.isArray(this.historicalEventRegistration)) {
            data["HistoricalEventRegistration"] = [];
            for (let item of this.historicalEventRegistration)
                data["HistoricalEventRegistration"].push(item.toJSON());
        }
        data["PersonTitle"] = this.personTitle ? this.personTitle.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IPerson {
    userId?: string | null;
    titleId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    middleName?: string | null;
    dateOfBirth?: Date | null;
    jobTitle?: string | null;
    isDeceased?: boolean | null;
    fax?: string | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    requireNewsLetter?: boolean | null;
    nationality?: number | null;
    academicDegree?: string | null;
    professionTypeId?: number | null;
    position?: string | null;
    comments?: string | null;
    gender?: number | null;
    passportNumber?: string | null;
    passportExpiryDate?: Date | null;
    isCommentsVisible?: boolean | null;
    impersonateUserId?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    isPrivacyPolicyAgreed?: boolean | null;
    privacyPolicyAgreedOn?: Date | null;
    expertise?: string | null;
    biography?: string | null;
    consent?: boolean | null;
    country?: Country | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;
    personTitle?: PersonTitle | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class RecentUsersByStaff implements IRecentUsersByStaff {
    id?: number | null;
    staffUserId?: string | null;
    userId?: string | null;
    createdOn?: Date | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IRecentUsersByStaff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.staffUserId = _data["StaffUserId"] !== undefined ? _data["StaffUserId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): RecentUsersByStaff {
        data = typeof data === 'object' ? data : {};
        let result = new RecentUsersByStaff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["StaffUserId"] = this.staffUserId !== undefined ? this.staffUserId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IRecentUsersByStaff {
    id?: number | null;
    staffUserId?: string | null;
    userId?: string | null;
    createdOn?: Date | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
}

export class Search implements ISearch {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    category?: number | null;
    condition?: string | null;
    searchTypeId?: number | null;
    impersonateUserId?: string | null;
    eventId?: number | null;
    searchListDetail?: SearchListDetail[] | null;
    search1?: Search | null;
    search2?: Search | null;
    user?: User | null;

    constructor(data?: ISearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.category = _data["Category"] !== undefined ? _data["Category"] : <any>null;
            this.condition = _data["Condition"] !== undefined ? _data["Condition"] : <any>null;
            this.searchTypeId = _data["SearchTypeId"] !== undefined ? _data["SearchTypeId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            if (Array.isArray(_data["SearchListDetail"])) {
                this.searchListDetail = [] as any;
                for (let item of _data["SearchListDetail"])
                    this.searchListDetail!.push(SearchListDetail.fromJS(item));
            }
            else {
                this.searchListDetail = <any>null;
            }
            this.search1 = _data["Search1"] ? Search.fromJS(_data["Search1"]) : <any>null;
            this.search2 = _data["Search2"] ? Search.fromJS(_data["Search2"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): Search {
        data = typeof data === 'object' ? data : {};
        let result = new Search();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Category"] = this.category !== undefined ? this.category : <any>null;
        data["Condition"] = this.condition !== undefined ? this.condition : <any>null;
        data["SearchTypeId"] = this.searchTypeId !== undefined ? this.searchTypeId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        if (Array.isArray(this.searchListDetail)) {
            data["SearchListDetail"] = [];
            for (let item of this.searchListDetail)
                data["SearchListDetail"].push(item.toJSON());
        }
        data["Search1"] = this.search1 ? this.search1.toJSON() : <any>null;
        data["Search2"] = this.search2 ? this.search2.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface ISearch {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    category?: number | null;
    condition?: string | null;
    searchTypeId?: number | null;
    impersonateUserId?: string | null;
    eventId?: number | null;
    searchListDetail?: SearchListDetail[] | null;
    search1?: Search | null;
    search2?: Search | null;
    user?: User | null;
}

export class SelfNomination implements ISelfNomination {
    id?: number | null;
    userNominationId?: number | null;
    committeeId?: number | null;
    nominationStatusId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    assessmentDate?: Date | null;
    initiatedOn?: Date | null;
    initiatedBy?: string | null;
    isVisibleToUser?: boolean | null;
    reason?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    committeeRoleId?: number | null;
    impersonateUserId?: string | null;
    isDeleted?: boolean | null;
    deletedReason?: string | null;
    committeeList?: CommitteeList | null;
    committeeTaskForceRole?: CommitteeTaskForceRole | null;
    nominationStatus?: NominationStatus | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    userNomination?: UserNomination | null;

    constructor(data?: ISelfNomination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userNominationId = _data["UserNominationId"] !== undefined ? _data["UserNominationId"] : <any>null;
            this.committeeId = _data["CommitteeId"] !== undefined ? _data["CommitteeId"] : <any>null;
            this.nominationStatusId = _data["NominationStatusId"] !== undefined ? _data["NominationStatusId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTo = _data["ValidTo"] ? new Date(_data["ValidTo"].toString()) : <any>null;
            this.assessmentDate = _data["AssessmentDate"] ? new Date(_data["AssessmentDate"].toString()) : <any>null;
            this.initiatedOn = _data["InitiatedOn"] ? new Date(_data["InitiatedOn"].toString()) : <any>null;
            this.initiatedBy = _data["InitiatedBy"] !== undefined ? _data["InitiatedBy"] : <any>null;
            this.isVisibleToUser = _data["IsVisibleToUser"] !== undefined ? _data["IsVisibleToUser"] : <any>null;
            this.reason = _data["Reason"] !== undefined ? _data["Reason"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.committeeRoleId = _data["CommitteeRoleId"] !== undefined ? _data["CommitteeRoleId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.deletedReason = _data["DeletedReason"] !== undefined ? _data["DeletedReason"] : <any>null;
            this.committeeList = _data["CommitteeList"] ? CommitteeList.fromJS(_data["CommitteeList"]) : <any>null;
            this.committeeTaskForceRole = _data["CommitteeTaskForceRole"] ? CommitteeTaskForceRole.fromJS(_data["CommitteeTaskForceRole"]) : <any>null;
            this.nominationStatus = _data["NominationStatus"] ? NominationStatus.fromJS(_data["NominationStatus"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
            this.userNomination = _data["UserNomination"] ? UserNomination.fromJS(_data["UserNomination"]) : <any>null;
        }
    }

    static fromJS(data: any): SelfNomination {
        data = typeof data === 'object' ? data : {};
        let result = new SelfNomination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserNominationId"] = this.userNominationId !== undefined ? this.userNominationId : <any>null;
        data["CommitteeId"] = this.committeeId !== undefined ? this.committeeId : <any>null;
        data["NominationStatusId"] = this.nominationStatusId !== undefined ? this.nominationStatusId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["AssessmentDate"] = this.assessmentDate ? this.assessmentDate.toISOString() : <any>null;
        data["InitiatedOn"] = this.initiatedOn ? this.initiatedOn.toISOString() : <any>null;
        data["InitiatedBy"] = this.initiatedBy !== undefined ? this.initiatedBy : <any>null;
        data["IsVisibleToUser"] = this.isVisibleToUser !== undefined ? this.isVisibleToUser : <any>null;
        data["Reason"] = this.reason !== undefined ? this.reason : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["CommitteeRoleId"] = this.committeeRoleId !== undefined ? this.committeeRoleId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["DeletedReason"] = this.deletedReason !== undefined ? this.deletedReason : <any>null;
        data["CommitteeList"] = this.committeeList ? this.committeeList.toJSON() : <any>null;
        data["CommitteeTaskForceRole"] = this.committeeTaskForceRole ? this.committeeTaskForceRole.toJSON() : <any>null;
        data["NominationStatus"] = this.nominationStatus ? this.nominationStatus.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        data["UserNomination"] = this.userNomination ? this.userNomination.toJSON() : <any>null;
        return data;
    }
}

export interface ISelfNomination {
    id?: number | null;
    userNominationId?: number | null;
    committeeId?: number | null;
    nominationStatusId?: number | null;
    validFrom?: Date | null;
    validTo?: Date | null;
    assessmentDate?: Date | null;
    initiatedOn?: Date | null;
    initiatedBy?: string | null;
    isVisibleToUser?: boolean | null;
    reason?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    committeeRoleId?: number | null;
    impersonateUserId?: string | null;
    isDeleted?: boolean | null;
    deletedReason?: string | null;
    committeeList?: CommitteeList | null;
    committeeTaskForceRole?: CommitteeTaskForceRole | null;
    nominationStatus?: NominationStatus | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
    userNomination?: UserNomination | null;
}

export class SessionAccessory implements ISessionAccessory {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    quantity?: number | null;
    isReturnable?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;

    constructor(data?: ISessionAccessory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.isReturnable = _data["IsReturnable"] !== undefined ? _data["IsReturnable"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["SessionAccessoryMapping"])) {
                this.sessionAccessoryMapping = [] as any;
                for (let item of _data["SessionAccessoryMapping"])
                    this.sessionAccessoryMapping!.push(SessionAccessoryMapping.fromJS(item));
            }
            else {
                this.sessionAccessoryMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): SessionAccessory {
        data = typeof data === 'object' ? data : {};
        let result = new SessionAccessory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["IsReturnable"] = this.isReturnable !== undefined ? this.isReturnable : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.sessionAccessoryMapping)) {
            data["SessionAccessoryMapping"] = [];
            for (let item of this.sessionAccessoryMapping)
                data["SessionAccessoryMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISessionAccessory {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    quantity?: number | null;
    isReturnable?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;
}

export class SessionAccessoryMapping implements ISessionAccessoryMapping {
    id?: number | null;
    eventSessionId?: number | null;
    sessionAccessoryId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventSession?: EventSession | null;
    sessionAccessory?: SessionAccessory | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: ISessionAccessoryMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventSessionId = _data["EventSessionId"] !== undefined ? _data["EventSessionId"] : <any>null;
            this.sessionAccessoryId = _data["SessionAccessoryId"] !== undefined ? _data["SessionAccessoryId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.eventSession = _data["EventSession"] ? EventSession.fromJS(_data["EventSession"]) : <any>null;
            this.sessionAccessory = _data["SessionAccessory"] ? SessionAccessory.fromJS(_data["SessionAccessory"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): SessionAccessoryMapping {
        data = typeof data === 'object' ? data : {};
        let result = new SessionAccessoryMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventSessionId"] = this.eventSessionId !== undefined ? this.eventSessionId : <any>null;
        data["SessionAccessoryId"] = this.sessionAccessoryId !== undefined ? this.sessionAccessoryId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["EventSession"] = this.eventSession ? this.eventSession.toJSON() : <any>null;
        data["SessionAccessory"] = this.sessionAccessory ? this.sessionAccessory.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface ISessionAccessoryMapping {
    id?: number | null;
    eventSessionId?: number | null;
    sessionAccessoryId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventSession?: EventSession | null;
    sessionAccessory?: SessionAccessory | null;
    user?: User | null;
    user1?: User | null;
}

export class UserEventArtifact implements IUserEventArtifact {
    id?: number | null;
    eventArtifactId?: number | null;
    userId?: string | null;
    eventExhibitorPersonId?: number | null;
    comments?: string | null;
    status?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    documentMapping?: DocumentMapping[] | null;
    eventArtifact?: EventArtifact | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IUserEventArtifact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventArtifactId = _data["EventArtifactId"] !== undefined ? _data["EventArtifactId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.eventExhibitorPersonId = _data["EventExhibitorPersonId"] !== undefined ? _data["EventExhibitorPersonId"] : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            if (Array.isArray(_data["DocumentMapping"])) {
                this.documentMapping = [] as any;
                for (let item of _data["DocumentMapping"])
                    this.documentMapping!.push(DocumentMapping.fromJS(item));
            }
            else {
                this.documentMapping = <any>null;
            }
            this.eventArtifact = _data["EventArtifact"] ? EventArtifact.fromJS(_data["EventArtifact"]) : <any>null;
            this.eventExhibitorPerson = _data["EventExhibitorPerson"] ? EventExhibitorPerson.fromJS(_data["EventExhibitorPerson"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): UserEventArtifact {
        data = typeof data === 'object' ? data : {};
        let result = new UserEventArtifact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventArtifactId"] = this.eventArtifactId !== undefined ? this.eventArtifactId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EventExhibitorPersonId"] = this.eventExhibitorPersonId !== undefined ? this.eventExhibitorPersonId : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        if (Array.isArray(this.documentMapping)) {
            data["DocumentMapping"] = [];
            for (let item of this.documentMapping)
                data["DocumentMapping"].push(item.toJSON());
        }
        data["EventArtifact"] = this.eventArtifact ? this.eventArtifact.toJSON() : <any>null;
        data["EventExhibitorPerson"] = this.eventExhibitorPerson ? this.eventExhibitorPerson.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IUserEventArtifact {
    id?: number | null;
    eventArtifactId?: number | null;
    userId?: string | null;
    eventExhibitorPersonId?: number | null;
    comments?: string | null;
    status?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedOn?: Date | null;
    modifiedBy?: string | null;
    documentMapping?: DocumentMapping[] | null;
    eventArtifact?: EventArtifact | null;
    eventExhibitorPerson?: EventExhibitorPerson | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class HistoricalEventRegistration implements IHistoricalEventRegistration {
    eventId?: number | null;
    userId?: string | null;
    userAddressId?: number | null;
    groupId?: number | null;
    paymentDemandNumber?: string | null;
    invoiceNumber?: string | null;
    creditNoteNumber?: string | null;
    createdDate?: string | null;
    invoiceDate?: string | null;
    paymentDate?: string | null;
    paymentStatus?: string | null;
    fee?: string | null;
    paymentReference?: string | null;
    createdBy?: string | null;
    paymentType?: string | null;
    netAmount?: number | null;
    vATAmount?: number | null;
    grossAmount?: number | null;
    refundAmount?: number | null;
    id?: number | null;
    historicalEvent?: HistoricalEvent | null;
    person?: Person | null;
    user?: User | null;

    constructor(data?: IHistoricalEventRegistration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.userAddressId = _data["UserAddressId"] !== undefined ? _data["UserAddressId"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.creditNoteNumber = _data["CreditNoteNumber"] !== undefined ? _data["CreditNoteNumber"] : <any>null;
            this.createdDate = _data["CreatedDate"] !== undefined ? _data["CreatedDate"] : <any>null;
            this.invoiceDate = _data["InvoiceDate"] !== undefined ? _data["InvoiceDate"] : <any>null;
            this.paymentDate = _data["PaymentDate"] !== undefined ? _data["PaymentDate"] : <any>null;
            this.paymentStatus = _data["PaymentStatus"] !== undefined ? _data["PaymentStatus"] : <any>null;
            this.fee = _data["Fee"] !== undefined ? _data["Fee"] : <any>null;
            this.paymentReference = _data["PaymentReference"] !== undefined ? _data["PaymentReference"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            this.netAmount = _data["NetAmount"] !== undefined ? _data["NetAmount"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.grossAmount = _data["GrossAmount"] !== undefined ? _data["GrossAmount"] : <any>null;
            this.refundAmount = _data["RefundAmount"] !== undefined ? _data["RefundAmount"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.historicalEvent = _data["HistoricalEvent"] ? HistoricalEvent.fromJS(_data["HistoricalEvent"]) : <any>null;
            this.person = _data["Person"] ? Person.fromJS(_data["Person"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): HistoricalEventRegistration {
        data = typeof data === 'object' ? data : {};
        let result = new HistoricalEventRegistration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["UserAddressId"] = this.userAddressId !== undefined ? this.userAddressId : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["CreditNoteNumber"] = this.creditNoteNumber !== undefined ? this.creditNoteNumber : <any>null;
        data["CreatedDate"] = this.createdDate !== undefined ? this.createdDate : <any>null;
        data["InvoiceDate"] = this.invoiceDate !== undefined ? this.invoiceDate : <any>null;
        data["PaymentDate"] = this.paymentDate !== undefined ? this.paymentDate : <any>null;
        data["PaymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : <any>null;
        data["Fee"] = this.fee !== undefined ? this.fee : <any>null;
        data["PaymentReference"] = this.paymentReference !== undefined ? this.paymentReference : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        data["NetAmount"] = this.netAmount !== undefined ? this.netAmount : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["GrossAmount"] = this.grossAmount !== undefined ? this.grossAmount : <any>null;
        data["RefundAmount"] = this.refundAmount !== undefined ? this.refundAmount : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["HistoricalEvent"] = this.historicalEvent ? this.historicalEvent.toJSON() : <any>null;
        data["Person"] = this.person ? this.person.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IHistoricalEventRegistration {
    eventId?: number | null;
    userId?: string | null;
    userAddressId?: number | null;
    groupId?: number | null;
    paymentDemandNumber?: string | null;
    invoiceNumber?: string | null;
    creditNoteNumber?: string | null;
    createdDate?: string | null;
    invoiceDate?: string | null;
    paymentDate?: string | null;
    paymentStatus?: string | null;
    fee?: string | null;
    paymentReference?: string | null;
    createdBy?: string | null;
    paymentType?: string | null;
    netAmount?: number | null;
    vATAmount?: number | null;
    grossAmount?: number | null;
    refundAmount?: number | null;
    id?: number | null;
    historicalEvent?: HistoricalEvent | null;
    person?: Person | null;
    user?: User | null;
}

export class UserStatus implements IUserStatus {
    id?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    user?: User[] | null;

    constructor(data?: IUserStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["User"])) {
                this.user = [] as any;
                for (let item of _data["User"])
                    this.user!.push(User.fromJS(item));
            }
            else {
                this.user = <any>null;
            }
        }
    }

    static fromJS(data: any): UserStatus {
        data = typeof data === 'object' ? data : {};
        let result = new UserStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.user)) {
            data["User"] = [];
            for (let item of this.user)
                data["User"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserStatus {
    id?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    user?: User[] | null;
}

export class UserAddress implements IUserAddress {
    id?: number | null;
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    companyName?: string | null;
    department?: string | null;
    impersonateUserId?: string | null;
    phone?: string | null;
    vATNumber?: string | null;
    isDefault?: boolean | null;
    mobilePhone?: string | null;
    purchaseOrder?: string | null;
    addressModifiedOn?: Date | null;
    stateCode?: string | null;
    isActive?: boolean | null;
    addressType?: AddressType | null;
    country?: Country | null;
    eventExhibitor?: EventExhibitor[] | null;
    eventGroup?: EventGroup[] | null;
    eventRegistration?: EventRegistration[] | null;
    exhibitor?: Exhibitor[] | null;
    invoice?: Invoice[] | null;
    memberSubscription?: MemberSubscription[] | null;
    paymentDemand?: PaymentDemand[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IUserAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.addressTypeId = _data["AddressTypeId"] !== undefined ? _data["AddressTypeId"] : <any>null;
            this.street1 = _data["Street1"] !== undefined ? _data["Street1"] : <any>null;
            this.street2 = _data["Street2"] !== undefined ? _data["Street2"] : <any>null;
            this.postalCode = _data["PostalCode"] !== undefined ? _data["PostalCode"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.stateOrProvince = _data["StateOrProvince"] !== undefined ? _data["StateOrProvince"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.companyName = _data["CompanyName"] !== undefined ? _data["CompanyName"] : <any>null;
            this.department = _data["Department"] !== undefined ? _data["Department"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.isDefault = _data["IsDefault"] !== undefined ? _data["IsDefault"] : <any>null;
            this.mobilePhone = _data["MobilePhone"] !== undefined ? _data["MobilePhone"] : <any>null;
            this.purchaseOrder = _data["PurchaseOrder"] !== undefined ? _data["PurchaseOrder"] : <any>null;
            this.addressModifiedOn = _data["AddressModifiedOn"] ? new Date(_data["AddressModifiedOn"].toString()) : <any>null;
            this.stateCode = _data["StateCode"] !== undefined ? _data["StateCode"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.addressType = _data["AddressType"] ? AddressType.fromJS(_data["AddressType"]) : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            if (Array.isArray(_data["EventExhibitor"])) {
                this.eventExhibitor = [] as any;
                for (let item of _data["EventExhibitor"])
                    this.eventExhibitor!.push(EventExhibitor.fromJS(item));
            }
            else {
                this.eventExhibitor = <any>null;
            }
            if (Array.isArray(_data["EventGroup"])) {
                this.eventGroup = [] as any;
                for (let item of _data["EventGroup"])
                    this.eventGroup!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup = <any>null;
            }
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
            if (Array.isArray(_data["Exhibitor"])) {
                this.exhibitor = [] as any;
                for (let item of _data["Exhibitor"])
                    this.exhibitor!.push(Exhibitor.fromJS(item));
            }
            else {
                this.exhibitor = <any>null;
            }
            if (Array.isArray(_data["Invoice"])) {
                this.invoice = [] as any;
                for (let item of _data["Invoice"])
                    this.invoice!.push(Invoice.fromJS(item));
            }
            else {
                this.invoice = <any>null;
            }
            if (Array.isArray(_data["MemberSubscription"])) {
                this.memberSubscription = [] as any;
                for (let item of _data["MemberSubscription"])
                    this.memberSubscription!.push(MemberSubscription.fromJS(item));
            }
            else {
                this.memberSubscription = <any>null;
            }
            if (Array.isArray(_data["PaymentDemand"])) {
                this.paymentDemand = [] as any;
                for (let item of _data["PaymentDemand"])
                    this.paymentDemand!.push(PaymentDemand.fromJS(item));
            }
            else {
                this.paymentDemand = <any>null;
            }
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): UserAddress {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["AddressTypeId"] = this.addressTypeId !== undefined ? this.addressTypeId : <any>null;
        data["Street1"] = this.street1 !== undefined ? this.street1 : <any>null;
        data["Street2"] = this.street2 !== undefined ? this.street2 : <any>null;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["StateOrProvince"] = this.stateOrProvince !== undefined ? this.stateOrProvince : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["CompanyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["Department"] = this.department !== undefined ? this.department : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["IsDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["MobilePhone"] = this.mobilePhone !== undefined ? this.mobilePhone : <any>null;
        data["PurchaseOrder"] = this.purchaseOrder !== undefined ? this.purchaseOrder : <any>null;
        data["AddressModifiedOn"] = this.addressModifiedOn ? this.addressModifiedOn.toISOString() : <any>null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["AddressType"] = this.addressType ? this.addressType.toJSON() : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        if (Array.isArray(this.eventExhibitor)) {
            data["EventExhibitor"] = [];
            for (let item of this.eventExhibitor)
                data["EventExhibitor"].push(item.toJSON());
        }
        if (Array.isArray(this.eventGroup)) {
            data["EventGroup"] = [];
            for (let item of this.eventGroup)
                data["EventGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        if (Array.isArray(this.exhibitor)) {
            data["Exhibitor"] = [];
            for (let item of this.exhibitor)
                data["Exhibitor"].push(item.toJSON());
        }
        if (Array.isArray(this.invoice)) {
            data["Invoice"] = [];
            for (let item of this.invoice)
                data["Invoice"].push(item.toJSON());
        }
        if (Array.isArray(this.memberSubscription)) {
            data["MemberSubscription"] = [];
            for (let item of this.memberSubscription)
                data["MemberSubscription"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentDemand)) {
            data["PaymentDemand"] = [];
            for (let item of this.paymentDemand)
                data["PaymentDemand"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IUserAddress {
    id?: number | null;
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    companyName?: string | null;
    department?: string | null;
    impersonateUserId?: string | null;
    phone?: string | null;
    vATNumber?: string | null;
    isDefault?: boolean | null;
    mobilePhone?: string | null;
    purchaseOrder?: string | null;
    addressModifiedOn?: Date | null;
    stateCode?: string | null;
    isActive?: boolean | null;
    addressType?: AddressType | null;
    country?: Country | null;
    eventExhibitor?: EventExhibitor[] | null;
    eventGroup?: EventGroup[] | null;
    eventRegistration?: EventRegistration[] | null;
    exhibitor?: Exhibitor[] | null;
    invoice?: Invoice[] | null;
    memberSubscription?: MemberSubscription[] | null;
    paymentDemand?: PaymentDemand[] | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class UserAffiliation implements IUserAffiliation {
    id?: number | null;
    userId?: string | null;
    affiliationId?: number | null;
    affiliationNumber?: string | null;
    affiliationStatusId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    affiliationSince?: number | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    isDelete?: boolean | null;
    affiliation?: Affiliation | null;
    affiliationStatus?: AffiliationStatus | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IUserAffiliation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.affiliationId = _data["AffiliationId"] !== undefined ? _data["AffiliationId"] : <any>null;
            this.affiliationNumber = _data["AffiliationNumber"] !== undefined ? _data["AffiliationNumber"] : <any>null;
            this.affiliationStatusId = _data["AffiliationStatusId"] !== undefined ? _data["AffiliationStatusId"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.affiliationSince = _data["AffiliationSince"] !== undefined ? _data["AffiliationSince"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.mergedUserId = _data["MergedUserId"] !== undefined ? _data["MergedUserId"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.affiliation = _data["Affiliation"] ? Affiliation.fromJS(_data["Affiliation"]) : <any>null;
            this.affiliationStatus = _data["AffiliationStatus"] ? AffiliationStatus.fromJS(_data["AffiliationStatus"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): UserAffiliation {
        data = typeof data === 'object' ? data : {};
        let result = new UserAffiliation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["AffiliationId"] = this.affiliationId !== undefined ? this.affiliationId : <any>null;
        data["AffiliationNumber"] = this.affiliationNumber !== undefined ? this.affiliationNumber : <any>null;
        data["AffiliationStatusId"] = this.affiliationStatusId !== undefined ? this.affiliationStatusId : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["AffiliationSince"] = this.affiliationSince !== undefined ? this.affiliationSince : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["MergedUserId"] = this.mergedUserId !== undefined ? this.mergedUserId : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["Affiliation"] = this.affiliation ? this.affiliation.toJSON() : <any>null;
        data["AffiliationStatus"] = this.affiliationStatus ? this.affiliationStatus.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IUserAffiliation {
    id?: number | null;
    userId?: string | null;
    affiliationId?: number | null;
    affiliationNumber?: string | null;
    affiliationStatusId?: number | null;
    createdOn?: Date | null;
    createdBy?: string | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    affiliationSince?: number | null;
    impersonateUserId?: string | null;
    mergedUserId?: string | null;
    isDelete?: boolean | null;
    affiliation?: Affiliation | null;
    affiliationStatus?: AffiliationStatus | null;
    user?: User | null;
    user1?: User | null;
}

export class UserArtefactManualApproved implements IUserArtefactManualApproved {
    id?: number | null;
    eventId?: number | null;
    userId?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    event?: Event | null;
    user?: User | null;

    constructor(data?: IUserArtefactManualApproved) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserArtefactManualApproved {
        data = typeof data === 'object' ? data : {};
        let result = new UserArtefactManualApproved();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserArtefactManualApproved {
    id?: number | null;
    eventId?: number | null;
    userId?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    event?: Event | null;
    user?: User | null;
}

export class UserClaim implements IUserClaim {
    id?: string | null;
    userId?: string | null;
    claimType?: string | null;
    claimValue?: string | null;
    user?: User | null;

    constructor(data?: IUserClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.claimType = _data["ClaimType"] !== undefined ? _data["ClaimType"] : <any>null;
            this.claimValue = _data["ClaimValue"] !== undefined ? _data["ClaimValue"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserClaim {
        data = typeof data === 'object' ? data : {};
        let result = new UserClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["ClaimType"] = this.claimType !== undefined ? this.claimType : <any>null;
        data["ClaimValue"] = this.claimValue !== undefined ? this.claimValue : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserClaim {
    id?: string | null;
    userId?: string | null;
    claimType?: string | null;
    claimValue?: string | null;
    user?: User | null;
}

export class UserConsentMailPreference implements IUserConsentMailPreference {
    id?: number | null;
    userId?: string | null;
    hasExpressed?: boolean | null;
    actionOn?: Date | null;
    actionBy?: string | null;
    consentSource?: number | null;
    user?: User | null;
    user1?: User | null;

    constructor(data?: IUserConsentMailPreference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.hasExpressed = _data["HasExpressed"] !== undefined ? _data["HasExpressed"] : <any>null;
            this.actionOn = _data["ActionOn"] ? new Date(_data["ActionOn"].toString()) : <any>null;
            this.actionBy = _data["ActionBy"] !== undefined ? _data["ActionBy"] : <any>null;
            this.consentSource = _data["ConsentSource"] !== undefined ? _data["ConsentSource"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
        }
    }

    static fromJS(data: any): UserConsentMailPreference {
        data = typeof data === 'object' ? data : {};
        let result = new UserConsentMailPreference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["HasExpressed"] = this.hasExpressed !== undefined ? this.hasExpressed : <any>null;
        data["ActionOn"] = this.actionOn ? this.actionOn.toISOString() : <any>null;
        data["ActionBy"] = this.actionBy !== undefined ? this.actionBy : <any>null;
        data["ConsentSource"] = this.consentSource !== undefined ? this.consentSource : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        return data;
    }
}

export interface IUserConsentMailPreference {
    id?: number | null;
    userId?: string | null;
    hasExpressed?: boolean | null;
    actionOn?: Date | null;
    actionBy?: string | null;
    consentSource?: number | null;
    user?: User | null;
    user1?: User | null;
}

export class UserCorporateSession implements IUserCorporateSession {
    userId?: string | null;
    maskedUserId?: string | null;
    user?: User | null;

    constructor(data?: IUserCorporateSession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.maskedUserId = _data["MaskedUserId"] !== undefined ? _data["MaskedUserId"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserCorporateSession {
        data = typeof data === 'object' ? data : {};
        let result = new UserCorporateSession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["MaskedUserId"] = this.maskedUserId !== undefined ? this.maskedUserId : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserCorporateSession {
    userId?: string | null;
    maskedUserId?: string | null;
    user?: User | null;
}

export class UserEmailPreference implements IUserEmailPreference {
    id?: number | null;
    userId?: string | null;
    emailPreferenceId?: number | null;
    isActive?: boolean | null;
    activatedOn?: Date | null;
    activatedBy?: string | null;
    deactivatedOn?: Date | null;
    deactivatedBy?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    emailPreference?: EmailPreference | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;

    constructor(data?: IUserEmailPreference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.emailPreferenceId = _data["EmailPreferenceId"] !== undefined ? _data["EmailPreferenceId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.activatedOn = _data["ActivatedOn"] ? new Date(_data["ActivatedOn"].toString()) : <any>null;
            this.activatedBy = _data["ActivatedBy"] !== undefined ? _data["ActivatedBy"] : <any>null;
            this.deactivatedOn = _data["DeactivatedOn"] ? new Date(_data["DeactivatedOn"].toString()) : <any>null;
            this.deactivatedBy = _data["DeactivatedBy"] !== undefined ? _data["DeactivatedBy"] : <any>null;
            this.contactModifiedOn = _data["ContactModifiedOn"] ? new Date(_data["ContactModifiedOn"].toString()) : <any>null;
            this.contactLastSyncOn = _data["ContactLastSyncOn"] ? new Date(_data["ContactLastSyncOn"].toString()) : <any>null;
            this.emailPreference = _data["EmailPreference"] ? EmailPreference.fromJS(_data["EmailPreference"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            this.user2 = _data["User2"] ? User.fromJS(_data["User2"]) : <any>null;
        }
    }

    static fromJS(data: any): UserEmailPreference {
        data = typeof data === 'object' ? data : {};
        let result = new UserEmailPreference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EmailPreferenceId"] = this.emailPreferenceId !== undefined ? this.emailPreferenceId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["ActivatedOn"] = this.activatedOn ? this.activatedOn.toISOString() : <any>null;
        data["ActivatedBy"] = this.activatedBy !== undefined ? this.activatedBy : <any>null;
        data["DeactivatedOn"] = this.deactivatedOn ? this.deactivatedOn.toISOString() : <any>null;
        data["DeactivatedBy"] = this.deactivatedBy !== undefined ? this.deactivatedBy : <any>null;
        data["ContactModifiedOn"] = this.contactModifiedOn ? this.contactModifiedOn.toISOString() : <any>null;
        data["ContactLastSyncOn"] = this.contactLastSyncOn ? this.contactLastSyncOn.toISOString() : <any>null;
        data["EmailPreference"] = this.emailPreference ? this.emailPreference.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        data["User2"] = this.user2 ? this.user2.toJSON() : <any>null;
        return data;
    }
}

export interface IUserEmailPreference {
    id?: number | null;
    userId?: string | null;
    emailPreferenceId?: number | null;
    isActive?: boolean | null;
    activatedOn?: Date | null;
    activatedBy?: string | null;
    deactivatedOn?: Date | null;
    deactivatedBy?: string | null;
    contactModifiedOn?: Date | null;
    contactLastSyncOn?: Date | null;
    emailPreference?: EmailPreference | null;
    user?: User | null;
    user1?: User | null;
    user2?: User | null;
}

export class UserInterest implements IUserInterest {
    id?: number | null;
    userId?: string | null;
    interestTopicId?: number | null;
    interestTopic?: InterestTopic | null;
    user?: User | null;

    constructor(data?: IUserInterest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.interestTopicId = _data["InterestTopicId"] !== undefined ? _data["InterestTopicId"] : <any>null;
            this.interestTopic = _data["InterestTopic"] ? InterestTopic.fromJS(_data["InterestTopic"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserInterest {
        data = typeof data === 'object' ? data : {};
        let result = new UserInterest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["InterestTopicId"] = this.interestTopicId !== undefined ? this.interestTopicId : <any>null;
        data["InterestTopic"] = this.interestTopic ? this.interestTopic.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserInterest {
    id?: number | null;
    userId?: string | null;
    interestTopicId?: number | null;
    interestTopic?: InterestTopic | null;
    user?: User | null;
}

export class UserLogin implements IUserLogin {
    userId?: string | null;
    loginProvider?: string | null;
    providerKey?: string | null;
    user?: User | null;

    constructor(data?: IUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.loginProvider = _data["LoginProvider"] !== undefined ? _data["LoginProvider"] : <any>null;
            this.providerKey = _data["ProviderKey"] !== undefined ? _data["ProviderKey"] : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new UserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["LoginProvider"] = this.loginProvider !== undefined ? this.loginProvider : <any>null;
        data["ProviderKey"] = this.providerKey !== undefined ? this.providerKey : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserLogin {
    userId?: string | null;
    loginProvider?: string | null;
    providerKey?: string | null;
    user?: User | null;
}

export class UserRole implements IUserRole {
    userId?: string | null;
    roleId?: string | null;
    isActive?: boolean | null;
    role?: Role | null;
    user?: User | null;

    constructor(data?: IUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.roleId = _data["RoleId"] !== undefined ? _data["RoleId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.role = _data["Role"] ? Role.fromJS(_data["Role"]) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["RoleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Role"] = this.role ? this.role.toJSON() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export interface IUserRole {
    userId?: string | null;
    roleId?: string | null;
    isActive?: boolean | null;
    role?: Role | null;
    user?: User | null;
}

export class ConflictOfInterestIncomeType implements IConflictOfInterestIncomeType {
    id?: number | null;
    incomeType?: string | null;
    isActive?: boolean | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;

    constructor(data?: IConflictOfInterestIncomeType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.incomeType = _data["IncomeType"] !== undefined ? _data["IncomeType"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["ConflictOfInterest"])) {
                this.conflictOfInterest = [] as any;
                for (let item of _data["ConflictOfInterest"])
                    this.conflictOfInterest!.push(ConflictOfInterest.fromJS(item));
            }
            else {
                this.conflictOfInterest = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterestArchived"])) {
                this.conflictOfInterestArchived = [] as any;
                for (let item of _data["ConflictOfInterestArchived"])
                    this.conflictOfInterestArchived!.push(ConflictOfInterestArchived.fromJS(item));
            }
            else {
                this.conflictOfInterestArchived = <any>null;
            }
        }
    }

    static fromJS(data: any): ConflictOfInterestIncomeType {
        data = typeof data === 'object' ? data : {};
        let result = new ConflictOfInterestIncomeType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["IncomeType"] = this.incomeType !== undefined ? this.incomeType : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.conflictOfInterest)) {
            data["ConflictOfInterest"] = [];
            for (let item of this.conflictOfInterest)
                data["ConflictOfInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterestArchived)) {
            data["ConflictOfInterestArchived"] = [];
            for (let item of this.conflictOfInterestArchived)
                data["ConflictOfInterestArchived"].push(item.toJSON());
        }
        return data;
    }
}

export interface IConflictOfInterestIncomeType {
    id?: number | null;
    incomeType?: string | null;
    isActive?: boolean | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
}

export class ConflictType implements IConflictType {
    id?: number | null;
    typeOfAffiliation?: string | null;
    parentId?: number | null;
    isActive?: boolean | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    conflictType1?: ConflictType[] | null;
    conflictType2?: ConflictType | null;

    constructor(data?: IConflictType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.typeOfAffiliation = _data["TypeOfAffiliation"] !== undefined ? _data["TypeOfAffiliation"] : <any>null;
            this.parentId = _data["ParentId"] !== undefined ? _data["ParentId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["ConflictOfInterest"])) {
                this.conflictOfInterest = [] as any;
                for (let item of _data["ConflictOfInterest"])
                    this.conflictOfInterest!.push(ConflictOfInterest.fromJS(item));
            }
            else {
                this.conflictOfInterest = <any>null;
            }
            if (Array.isArray(_data["ConflictOfInterestArchived"])) {
                this.conflictOfInterestArchived = [] as any;
                for (let item of _data["ConflictOfInterestArchived"])
                    this.conflictOfInterestArchived!.push(ConflictOfInterestArchived.fromJS(item));
            }
            else {
                this.conflictOfInterestArchived = <any>null;
            }
            if (Array.isArray(_data["ConflictType1"])) {
                this.conflictType1 = [] as any;
                for (let item of _data["ConflictType1"])
                    this.conflictType1!.push(ConflictType.fromJS(item));
            }
            else {
                this.conflictType1 = <any>null;
            }
            this.conflictType2 = _data["ConflictType2"] ? ConflictType.fromJS(_data["ConflictType2"]) : <any>null;
        }
    }

    static fromJS(data: any): ConflictType {
        data = typeof data === 'object' ? data : {};
        let result = new ConflictType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["TypeOfAffiliation"] = this.typeOfAffiliation !== undefined ? this.typeOfAffiliation : <any>null;
        data["ParentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.conflictOfInterest)) {
            data["ConflictOfInterest"] = [];
            for (let item of this.conflictOfInterest)
                data["ConflictOfInterest"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictOfInterestArchived)) {
            data["ConflictOfInterestArchived"] = [];
            for (let item of this.conflictOfInterestArchived)
                data["ConflictOfInterestArchived"].push(item.toJSON());
        }
        if (Array.isArray(this.conflictType1)) {
            data["ConflictType1"] = [];
            for (let item of this.conflictType1)
                data["ConflictType1"].push(item.toJSON());
        }
        data["ConflictType2"] = this.conflictType2 ? this.conflictType2.toJSON() : <any>null;
        return data;
    }
}

export interface IConflictType {
    id?: number | null;
    typeOfAffiliation?: string | null;
    parentId?: number | null;
    isActive?: boolean | null;
    conflictOfInterest?: ConflictOfInterest[] | null;
    conflictOfInterestArchived?: ConflictOfInterestArchived[] | null;
    conflictType1?: ConflictType[] | null;
    conflictType2?: ConflictType | null;
}

export class DeclarationTemplateType implements IDeclarationTemplateType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    declarationTemplate?: DeclarationTemplate[] | null;
    declarationTemplateTypeTranslation?: DeclarationTemplateTypeTranslation[] | null;

    constructor(data?: IDeclarationTemplateType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["DeclarationTemplate"])) {
                this.declarationTemplate = [] as any;
                for (let item of _data["DeclarationTemplate"])
                    this.declarationTemplate!.push(DeclarationTemplate.fromJS(item));
            }
            else {
                this.declarationTemplate = <any>null;
            }
            if (Array.isArray(_data["DeclarationTemplateTypeTranslation"])) {
                this.declarationTemplateTypeTranslation = [] as any;
                for (let item of _data["DeclarationTemplateTypeTranslation"])
                    this.declarationTemplateTypeTranslation!.push(DeclarationTemplateTypeTranslation.fromJS(item));
            }
            else {
                this.declarationTemplateTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): DeclarationTemplateType {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarationTemplateType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.declarationTemplate)) {
            data["DeclarationTemplate"] = [];
            for (let item of this.declarationTemplate)
                data["DeclarationTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.declarationTemplateTypeTranslation)) {
            data["DeclarationTemplateTypeTranslation"] = [];
            for (let item of this.declarationTemplateTypeTranslation)
                data["DeclarationTemplateTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeclarationTemplateType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    declarationTemplate?: DeclarationTemplate[] | null;
    declarationTemplateTypeTranslation?: DeclarationTemplateTypeTranslation[] | null;
}

export class EventBoothScan implements IEventBoothScan {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    scannedOn?: Date | null;
    badgeUniqueId?: string | null;
    products?: string | null;
    comments?: string | null;
    createdOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;

    constructor(data?: IEventBoothScan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventExhibitorAccessId = _data["EventExhibitorAccessId"] !== undefined ? _data["EventExhibitorAccessId"] : <any>null;
            this.scannedOn = _data["ScannedOn"] ? new Date(_data["ScannedOn"].toString()) : <any>null;
            this.badgeUniqueId = _data["BadgeUniqueId"] !== undefined ? _data["BadgeUniqueId"] : <any>null;
            this.products = _data["Products"] !== undefined ? _data["Products"] : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.eventExhibitorAccess = _data["EventExhibitorAccess"] ? EventExhibitorAccess.fromJS(_data["EventExhibitorAccess"]) : <any>null;
        }
    }

    static fromJS(data: any): EventBoothScan {
        data = typeof data === 'object' ? data : {};
        let result = new EventBoothScan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventExhibitorAccessId"] = this.eventExhibitorAccessId !== undefined ? this.eventExhibitorAccessId : <any>null;
        data["ScannedOn"] = this.scannedOn ? this.scannedOn.toISOString() : <any>null;
        data["BadgeUniqueId"] = this.badgeUniqueId !== undefined ? this.badgeUniqueId : <any>null;
        data["Products"] = this.products !== undefined ? this.products : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["EventExhibitorAccess"] = this.eventExhibitorAccess ? this.eventExhibitorAccess.toJSON() : <any>null;
        return data;
    }
}

export interface IEventBoothScan {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    scannedOn?: Date | null;
    badgeUniqueId?: string | null;
    products?: string | null;
    comments?: string | null;
    createdOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;
}

export class EventSymposiaScan implements IEventSymposiaScan {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    scannedOn?: Date | null;
    symposiumId?: number | null;
    badgeUniqueId?: string | null;
    createdOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;

    constructor(data?: IEventSymposiaScan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventExhibitorAccessId = _data["EventExhibitorAccessId"] !== undefined ? _data["EventExhibitorAccessId"] : <any>null;
            this.scannedOn = _data["ScannedOn"] ? new Date(_data["ScannedOn"].toString()) : <any>null;
            this.symposiumId = _data["SymposiumId"] !== undefined ? _data["SymposiumId"] : <any>null;
            this.badgeUniqueId = _data["BadgeUniqueId"] !== undefined ? _data["BadgeUniqueId"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.eventExhibitorAccess = _data["EventExhibitorAccess"] ? EventExhibitorAccess.fromJS(_data["EventExhibitorAccess"]) : <any>null;
        }
    }

    static fromJS(data: any): EventSymposiaScan {
        data = typeof data === 'object' ? data : {};
        let result = new EventSymposiaScan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventExhibitorAccessId"] = this.eventExhibitorAccessId !== undefined ? this.eventExhibitorAccessId : <any>null;
        data["ScannedOn"] = this.scannedOn ? this.scannedOn.toISOString() : <any>null;
        data["SymposiumId"] = this.symposiumId !== undefined ? this.symposiumId : <any>null;
        data["BadgeUniqueId"] = this.badgeUniqueId !== undefined ? this.badgeUniqueId : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["EventExhibitorAccess"] = this.eventExhibitorAccess ? this.eventExhibitorAccess.toJSON() : <any>null;
        return data;
    }
}

export interface IEventSymposiaScan {
    id?: number | null;
    eventExhibitorAccessId?: number | null;
    scannedOn?: Date | null;
    symposiumId?: number | null;
    badgeUniqueId?: string | null;
    createdOn?: Date | null;
    eventExhibitorAccess?: EventExhibitorAccess | null;
}

export class EventFeeCategory implements IEventFeeCategory {
    id?: number | null;
    name?: string | null;
    isVisibleToAdmin?: boolean | null;
    hasRegistrationLimit?: boolean | null;
    hasMaxTicket?: boolean | null;
    applicableTo?: number | null;
    isVisibleToAdminEditable?: boolean | null;
    isApplicableToEditable?: boolean | null;
    eventFee?: EventFee[] | null;
    onsiteUser?: OnsiteUser[] | null;

    constructor(data?: IEventFeeCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isVisibleToAdmin = _data["IsVisibleToAdmin"] !== undefined ? _data["IsVisibleToAdmin"] : <any>null;
            this.hasRegistrationLimit = _data["HasRegistrationLimit"] !== undefined ? _data["HasRegistrationLimit"] : <any>null;
            this.hasMaxTicket = _data["HasMaxTicket"] !== undefined ? _data["HasMaxTicket"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.isVisibleToAdminEditable = _data["IsVisibleToAdminEditable"] !== undefined ? _data["IsVisibleToAdminEditable"] : <any>null;
            this.isApplicableToEditable = _data["IsApplicableToEditable"] !== undefined ? _data["IsApplicableToEditable"] : <any>null;
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
            if (Array.isArray(_data["OnsiteUser"])) {
                this.onsiteUser = [] as any;
                for (let item of _data["OnsiteUser"])
                    this.onsiteUser!.push(OnsiteUser.fromJS(item));
            }
            else {
                this.onsiteUser = <any>null;
            }
        }
    }

    static fromJS(data: any): EventFeeCategory {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsVisibleToAdmin"] = this.isVisibleToAdmin !== undefined ? this.isVisibleToAdmin : <any>null;
        data["HasRegistrationLimit"] = this.hasRegistrationLimit !== undefined ? this.hasRegistrationLimit : <any>null;
        data["HasMaxTicket"] = this.hasMaxTicket !== undefined ? this.hasMaxTicket : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["IsVisibleToAdminEditable"] = this.isVisibleToAdminEditable !== undefined ? this.isVisibleToAdminEditable : <any>null;
        data["IsApplicableToEditable"] = this.isApplicableToEditable !== undefined ? this.isApplicableToEditable : <any>null;
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        if (Array.isArray(this.onsiteUser)) {
            data["OnsiteUser"] = [];
            for (let item of this.onsiteUser)
                data["OnsiteUser"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventFeeCategory {
    id?: number | null;
    name?: string | null;
    isVisibleToAdmin?: boolean | null;
    hasRegistrationLimit?: boolean | null;
    hasMaxTicket?: boolean | null;
    applicableTo?: number | null;
    isVisibleToAdminEditable?: boolean | null;
    isApplicableToEditable?: boolean | null;
    eventFee?: EventFee[] | null;
    onsiteUser?: OnsiteUser[] | null;
}

export class EventFeeMutualExclusive implements IEventFeeMutualExclusive {
    id?: number | null;
    name?: string | null;
    eventId?: number | null;
    isActive?: boolean | null;
    event?: Event | null;
    eventFee?: EventFee[] | null;

    constructor(data?: IEventFeeMutualExclusive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
        }
    }

    static fromJS(data: any): EventFeeMutualExclusive {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeMutualExclusive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventFeeMutualExclusive {
    id?: number | null;
    name?: string | null;
    eventId?: number | null;
    isActive?: boolean | null;
    event?: Event | null;
    eventFee?: EventFee[] | null;
}

export class EventFeeType implements IEventFeeType {
    id?: number | null;
    feeGroupId?: number | null;
    name?: string | null;
    applicableForCourse?: boolean | null;
    applicableForConference?: boolean | null;
    registrationLimit?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventFee?: EventFee[] | null;
    eventFeeGroup?: EventFeeGroup | null;

    constructor(data?: IEventFeeType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.feeGroupId = _data["FeeGroupId"] !== undefined ? _data["FeeGroupId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.applicableForCourse = _data["ApplicableForCourse"] !== undefined ? _data["ApplicableForCourse"] : <any>null;
            this.applicableForConference = _data["ApplicableForConference"] !== undefined ? _data["ApplicableForConference"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["EventFee"])) {
                this.eventFee = [] as any;
                for (let item of _data["EventFee"])
                    this.eventFee!.push(EventFee.fromJS(item));
            }
            else {
                this.eventFee = <any>null;
            }
            this.eventFeeGroup = _data["EventFeeGroup"] ? EventFeeGroup.fromJS(_data["EventFeeGroup"]) : <any>null;
        }
    }

    static fromJS(data: any): EventFeeType {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FeeGroupId"] = this.feeGroupId !== undefined ? this.feeGroupId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["ApplicableForCourse"] = this.applicableForCourse !== undefined ? this.applicableForCourse : <any>null;
        data["ApplicableForConference"] = this.applicableForConference !== undefined ? this.applicableForConference : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.eventFee)) {
            data["EventFee"] = [];
            for (let item of this.eventFee)
                data["EventFee"].push(item.toJSON());
        }
        data["EventFeeGroup"] = this.eventFeeGroup ? this.eventFeeGroup.toJSON() : <any>null;
        return data;
    }
}

export interface IEventFeeType {
    id?: number | null;
    feeGroupId?: number | null;
    name?: string | null;
    applicableForCourse?: boolean | null;
    applicableForConference?: boolean | null;
    registrationLimit?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    isDelete?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    eventFee?: EventFee[] | null;
    eventFeeGroup?: EventFeeGroup | null;
}

export class SessionFeeMapping implements ISessionFeeMapping {
    id?: number | null;
    eventSessionId?: number | null;
    eventFeeId?: number | null;
    eventFee?: EventFee | null;
    eventSession?: EventSession | null;

    constructor(data?: ISessionFeeMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventSessionId = _data["EventSessionId"] !== undefined ? _data["EventSessionId"] : <any>null;
            this.eventFeeId = _data["EventFeeId"] !== undefined ? _data["EventFeeId"] : <any>null;
            this.eventFee = _data["EventFee"] ? EventFee.fromJS(_data["EventFee"]) : <any>null;
            this.eventSession = _data["EventSession"] ? EventSession.fromJS(_data["EventSession"]) : <any>null;
        }
    }

    static fromJS(data: any): SessionFeeMapping {
        data = typeof data === 'object' ? data : {};
        let result = new SessionFeeMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventSessionId"] = this.eventSessionId !== undefined ? this.eventSessionId : <any>null;
        data["EventFeeId"] = this.eventFeeId !== undefined ? this.eventFeeId : <any>null;
        data["EventFee"] = this.eventFee ? this.eventFee.toJSON() : <any>null;
        data["EventSession"] = this.eventSession ? this.eventSession.toJSON() : <any>null;
        return data;
    }
}

export interface ISessionFeeMapping {
    id?: number | null;
    eventSessionId?: number | null;
    eventFeeId?: number | null;
    eventFee?: EventFee | null;
    eventSession?: EventSession | null;
}

export class EventRegistrationStatus implements IEventRegistrationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventRegistration?: EventRegistration[] | null;
    eventRegistrationStatusTranslation?: EventRegistrationStatusTranslation[] | null;

    constructor(data?: IEventRegistrationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventRegistration"])) {
                this.eventRegistration = [] as any;
                for (let item of _data["EventRegistration"])
                    this.eventRegistration!.push(EventRegistration.fromJS(item));
            }
            else {
                this.eventRegistration = <any>null;
            }
            if (Array.isArray(_data["EventRegistrationStatusTranslation"])) {
                this.eventRegistrationStatusTranslation = [] as any;
                for (let item of _data["EventRegistrationStatusTranslation"])
                    this.eventRegistrationStatusTranslation!.push(EventRegistrationStatusTranslation.fromJS(item));
            }
            else {
                this.eventRegistrationStatusTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): EventRegistrationStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EventRegistrationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventRegistration)) {
            data["EventRegistration"] = [];
            for (let item of this.eventRegistration)
                data["EventRegistration"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistrationStatusTranslation)) {
            data["EventRegistrationStatusTranslation"] = [];
            for (let item of this.eventRegistrationStatusTranslation)
                data["EventRegistrationStatusTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventRegistrationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventRegistration?: EventRegistration[] | null;
    eventRegistrationStatusTranslation?: EventRegistrationStatusTranslation[] | null;
}

export class PaymentDemand implements IPaymentDemand {
    id?: number | null;
    paymentDemandDate?: Date | null;
    totalAmount?: number | null;
    paymentDemandNumber?: string | null;
    paymentDemandAddressId?: number | null;
    fileStatusId?: number | null;
    referenceId?: number | null;
    referenceTypeId?: number | null;
    impersonateUserId?: string | null;
    vATDetailId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    pDStatus?: number | null;
    isDeleted?: boolean | null;
    balanceAmount?: number | null;
    revisionNumber?: number | null;
    duplicatePaymentDemandId?: number | null;
    duplicateReferenceId?: number | null;
    writtenOffOn?: Date | null;
    deletedOn?: Date | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    eventTicketPaymentDemand?: EventTicketPaymentDemand[] | null;
    userAddress?: UserAddress | null;
    vATDetail?: VATDetail | null;
    paymentDemandDetail?: PaymentDemandDetail[] | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;

    constructor(data?: IPaymentDemand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.paymentDemandDate = _data["PaymentDemandDate"] ? new Date(_data["PaymentDemandDate"].toString()) : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.paymentDemandAddressId = _data["PaymentDemandAddressId"] !== undefined ? _data["PaymentDemandAddressId"] : <any>null;
            this.fileStatusId = _data["FileStatusId"] !== undefined ? _data["FileStatusId"] : <any>null;
            this.referenceId = _data["ReferenceId"] !== undefined ? _data["ReferenceId"] : <any>null;
            this.referenceTypeId = _data["ReferenceTypeId"] !== undefined ? _data["ReferenceTypeId"] : <any>null;
            this.impersonateUserId = _data["ImpersonateUserId"] !== undefined ? _data["ImpersonateUserId"] : <any>null;
            this.vATDetailId = _data["VATDetailId"] !== undefined ? _data["VATDetailId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.pDStatus = _data["PDStatus"] !== undefined ? _data["PDStatus"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.balanceAmount = _data["BalanceAmount"] !== undefined ? _data["BalanceAmount"] : <any>null;
            this.revisionNumber = _data["RevisionNumber"] !== undefined ? _data["RevisionNumber"] : <any>null;
            this.duplicatePaymentDemandId = _data["DuplicatePaymentDemandId"] !== undefined ? _data["DuplicatePaymentDemandId"] : <any>null;
            this.duplicateReferenceId = _data["DuplicateReferenceId"] !== undefined ? _data["DuplicateReferenceId"] : <any>null;
            this.writtenOffOn = _data["WrittenOffOn"] ? new Date(_data["WrittenOffOn"].toString()) : <any>null;
            this.deletedOn = _data["DeletedOn"] ? new Date(_data["DeletedOn"].toString()) : <any>null;
            if (Array.isArray(_data["EventDiscountCouponCodeMapping"])) {
                this.eventDiscountCouponCodeMapping = [] as any;
                for (let item of _data["EventDiscountCouponCodeMapping"])
                    this.eventDiscountCouponCodeMapping!.push(EventDiscountCouponCodeMapping.fromJS(item));
            }
            else {
                this.eventDiscountCouponCodeMapping = <any>null;
            }
            if (Array.isArray(_data["EventTicketPaymentDemand"])) {
                this.eventTicketPaymentDemand = [] as any;
                for (let item of _data["EventTicketPaymentDemand"])
                    this.eventTicketPaymentDemand!.push(EventTicketPaymentDemand.fromJS(item));
            }
            else {
                this.eventTicketPaymentDemand = <any>null;
            }
            this.userAddress = _data["UserAddress"] ? UserAddress.fromJS(_data["UserAddress"]) : <any>null;
            this.vATDetail = _data["VATDetail"] ? VATDetail.fromJS(_data["VATDetail"]) : <any>null;
            if (Array.isArray(_data["PaymentDemandDetail"])) {
                this.paymentDemandDetail = [] as any;
                for (let item of _data["PaymentDemandDetail"])
                    this.paymentDemandDetail!.push(PaymentDemandDetail.fromJS(item));
            }
            else {
                this.paymentDemandDetail = <any>null;
            }
            if (Array.isArray(_data["PaymentDetailsMapping"])) {
                this.paymentDetailsMapping = [] as any;
                for (let item of _data["PaymentDetailsMapping"])
                    this.paymentDetailsMapping!.push(PaymentDetailsMapping.fromJS(item));
            }
            else {
                this.paymentDetailsMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): PaymentDemand {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDemand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["PaymentDemandDate"] = this.paymentDemandDate ? this.paymentDemandDate.toISOString() : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["PaymentDemandAddressId"] = this.paymentDemandAddressId !== undefined ? this.paymentDemandAddressId : <any>null;
        data["FileStatusId"] = this.fileStatusId !== undefined ? this.fileStatusId : <any>null;
        data["ReferenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["ReferenceTypeId"] = this.referenceTypeId !== undefined ? this.referenceTypeId : <any>null;
        data["ImpersonateUserId"] = this.impersonateUserId !== undefined ? this.impersonateUserId : <any>null;
        data["VATDetailId"] = this.vATDetailId !== undefined ? this.vATDetailId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["PDStatus"] = this.pDStatus !== undefined ? this.pDStatus : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["BalanceAmount"] = this.balanceAmount !== undefined ? this.balanceAmount : <any>null;
        data["RevisionNumber"] = this.revisionNumber !== undefined ? this.revisionNumber : <any>null;
        data["DuplicatePaymentDemandId"] = this.duplicatePaymentDemandId !== undefined ? this.duplicatePaymentDemandId : <any>null;
        data["DuplicateReferenceId"] = this.duplicateReferenceId !== undefined ? this.duplicateReferenceId : <any>null;
        data["WrittenOffOn"] = this.writtenOffOn ? this.writtenOffOn.toISOString() : <any>null;
        data["DeletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>null;
        if (Array.isArray(this.eventDiscountCouponCodeMapping)) {
            data["EventDiscountCouponCodeMapping"] = [];
            for (let item of this.eventDiscountCouponCodeMapping)
                data["EventDiscountCouponCodeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTicketPaymentDemand)) {
            data["EventTicketPaymentDemand"] = [];
            for (let item of this.eventTicketPaymentDemand)
                data["EventTicketPaymentDemand"].push(item.toJSON());
        }
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        data["VATDetail"] = this.vATDetail ? this.vATDetail.toJSON() : <any>null;
        if (Array.isArray(this.paymentDemandDetail)) {
            data["PaymentDemandDetail"] = [];
            for (let item of this.paymentDemandDetail)
                data["PaymentDemandDetail"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentDetailsMapping)) {
            data["PaymentDetailsMapping"] = [];
            for (let item of this.paymentDetailsMapping)
                data["PaymentDetailsMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentDemand {
    id?: number | null;
    paymentDemandDate?: Date | null;
    totalAmount?: number | null;
    paymentDemandNumber?: string | null;
    paymentDemandAddressId?: number | null;
    fileStatusId?: number | null;
    referenceId?: number | null;
    referenceTypeId?: number | null;
    impersonateUserId?: string | null;
    vATDetailId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    pDStatus?: number | null;
    isDeleted?: boolean | null;
    balanceAmount?: number | null;
    revisionNumber?: number | null;
    duplicatePaymentDemandId?: number | null;
    duplicateReferenceId?: number | null;
    writtenOffOn?: Date | null;
    deletedOn?: Date | null;
    eventDiscountCouponCodeMapping?: EventDiscountCouponCodeMapping[] | null;
    eventTicketPaymentDemand?: EventTicketPaymentDemand[] | null;
    userAddress?: UserAddress | null;
    vATDetail?: VATDetail | null;
    paymentDemandDetail?: PaymentDemandDetail[] | null;
    paymentDetailsMapping?: PaymentDetailsMapping[] | null;
}

export class AttestationTypeTranslation implements IAttestationTypeTranslation {
    attestationTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    attestationType?: AttestationType | null;
    language?: Language | null;

    constructor(data?: IAttestationTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attestationTypeId = _data["AttestationTypeId"] !== undefined ? _data["AttestationTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.attestationType = _data["AttestationType"] ? AttestationType.fromJS(_data["AttestationType"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): AttestationTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new AttestationTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AttestationTypeId"] = this.attestationTypeId !== undefined ? this.attestationTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["AttestationType"] = this.attestationType ? this.attestationType.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IAttestationTypeTranslation {
    attestationTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    attestationType?: AttestationType | null;
    language?: Language | null;
}

export class Module implements IModule {
    id?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    auditLog?: AuditLog[] | null;
    emailLog?: EmailLog[] | null;

    constructor(data?: IModule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["AuditLog"])) {
                this.auditLog = [] as any;
                for (let item of _data["AuditLog"])
                    this.auditLog!.push(AuditLog.fromJS(item));
            }
            else {
                this.auditLog = <any>null;
            }
            if (Array.isArray(_data["EmailLog"])) {
                this.emailLog = [] as any;
                for (let item of _data["EmailLog"])
                    this.emailLog!.push(EmailLog.fromJS(item));
            }
            else {
                this.emailLog = <any>null;
            }
        }
    }

    static fromJS(data: any): Module {
        data = typeof data === 'object' ? data : {};
        let result = new Module();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.auditLog)) {
            data["AuditLog"] = [];
            for (let item of this.auditLog)
                data["AuditLog"].push(item.toJSON());
        }
        if (Array.isArray(this.emailLog)) {
            data["EmailLog"] = [];
            for (let item of this.emailLog)
                data["EmailLog"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModule {
    id?: number | null;
    description?: string | null;
    isActive?: boolean | null;
    auditLog?: AuditLog[] | null;
    emailLog?: EmailLog[] | null;
}

export class AuditLogType implements IAuditLogType {
    id?: number | null;
    description?: string | null;
    auditLog?: AuditLog[] | null;

    constructor(data?: IAuditLogType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            if (Array.isArray(_data["AuditLog"])) {
                this.auditLog = [] as any;
                for (let item of _data["AuditLog"])
                    this.auditLog!.push(AuditLog.fromJS(item));
            }
            else {
                this.auditLog = <any>null;
            }
        }
    }

    static fromJS(data: any): AuditLogType {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.auditLog)) {
            data["AuditLog"] = [];
            for (let item of this.auditLog)
                data["AuditLog"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAuditLogType {
    id?: number | null;
    description?: string | null;
    auditLog?: AuditLog[] | null;
}

export class Currency implements ICurrency {
    id?: number | null;
    name?: string | null;
    countryId?: number | null;
    iSOCode?: string | null;
    symbol?: string | null;
    bankDetail?: BankDetail[] | null;
    country?: Country | null;
    event?: Event[] | null;
    event1?: Event[] | null;
    paymentGatewayCurrency?: PaymentGatewayCurrency[] | null;

    constructor(data?: ICurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.iSOCode = _data["ISOCode"] !== undefined ? _data["ISOCode"] : <any>null;
            this.symbol = _data["Symbol"] !== undefined ? _data["Symbol"] : <any>null;
            if (Array.isArray(_data["BankDetail"])) {
                this.bankDetail = [] as any;
                for (let item of _data["BankDetail"])
                    this.bankDetail!.push(BankDetail.fromJS(item));
            }
            else {
                this.bankDetail = <any>null;
            }
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
            if (Array.isArray(_data["Event1"])) {
                this.event1 = [] as any;
                for (let item of _data["Event1"])
                    this.event1!.push(Event.fromJS(item));
            }
            else {
                this.event1 = <any>null;
            }
            if (Array.isArray(_data["PaymentGatewayCurrency"])) {
                this.paymentGatewayCurrency = [] as any;
                for (let item of _data["PaymentGatewayCurrency"])
                    this.paymentGatewayCurrency!.push(PaymentGatewayCurrency.fromJS(item));
            }
            else {
                this.paymentGatewayCurrency = <any>null;
            }
        }
    }

    static fromJS(data: any): Currency {
        data = typeof data === 'object' ? data : {};
        let result = new Currency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["ISOCode"] = this.iSOCode !== undefined ? this.iSOCode : <any>null;
        data["Symbol"] = this.symbol !== undefined ? this.symbol : <any>null;
        if (Array.isArray(this.bankDetail)) {
            data["BankDetail"] = [];
            for (let item of this.bankDetail)
                data["BankDetail"].push(item.toJSON());
        }
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        if (Array.isArray(this.event1)) {
            data["Event1"] = [];
            for (let item of this.event1)
                data["Event1"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentGatewayCurrency)) {
            data["PaymentGatewayCurrency"] = [];
            for (let item of this.paymentGatewayCurrency)
                data["PaymentGatewayCurrency"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICurrency {
    id?: number | null;
    name?: string | null;
    countryId?: number | null;
    iSOCode?: string | null;
    symbol?: string | null;
    bankDetail?: BankDetail[] | null;
    country?: Country | null;
    event?: Event[] | null;
    event1?: Event[] | null;
    paymentGatewayCurrency?: PaymentGatewayCurrency[] | null;
}

export class CommitteeRole implements ICommitteeRole {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    committeeGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    committee?: Committee[] | null;
    committeeGroup?: CommitteeGroup | null;

    constructor(data?: ICommitteeRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.committeeGroupId = _data["CommitteeGroupId"] !== undefined ? _data["CommitteeGroupId"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["Committee"])) {
                this.committee = [] as any;
                for (let item of _data["Committee"])
                    this.committee!.push(Committee.fromJS(item));
            }
            else {
                this.committee = <any>null;
            }
            this.committeeGroup = _data["CommitteeGroup"] ? CommitteeGroup.fromJS(_data["CommitteeGroup"]) : <any>null;
        }
    }

    static fromJS(data: any): CommitteeRole {
        data = typeof data === 'object' ? data : {};
        let result = new CommitteeRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["CommitteeGroupId"] = this.committeeGroupId !== undefined ? this.committeeGroupId : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.committee)) {
            data["Committee"] = [];
            for (let item of this.committee)
                data["Committee"].push(item.toJSON());
        }
        data["CommitteeGroup"] = this.committeeGroup ? this.committeeGroup.toJSON() : <any>null;
        return data;
    }
}

export interface ICommitteeRole {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    committeeGroupId?: number | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    committee?: Committee[] | null;
    committeeGroup?: CommitteeGroup | null;
}

export class PaymentType implements IPaymentType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    creditNote?: CreditNote[] | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    paymentTypeTranslation?: PaymentTypeTranslation[] | null;

    constructor(data?: IPaymentType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["CreditNote"])) {
                this.creditNote = [] as any;
                for (let item of _data["CreditNote"])
                    this.creditNote!.push(CreditNote.fromJS(item));
            }
            else {
                this.creditNote = <any>null;
            }
            if (Array.isArray(_data["PaymentTypeMapping"])) {
                this.paymentTypeMapping = [] as any;
                for (let item of _data["PaymentTypeMapping"])
                    this.paymentTypeMapping!.push(PaymentTypeMapping.fromJS(item));
            }
            else {
                this.paymentTypeMapping = <any>null;
            }
            if (Array.isArray(_data["PaymentTypeTranslation"])) {
                this.paymentTypeTranslation = [] as any;
                for (let item of _data["PaymentTypeTranslation"])
                    this.paymentTypeTranslation!.push(PaymentTypeTranslation.fromJS(item));
            }
            else {
                this.paymentTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): PaymentType {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.creditNote)) {
            data["CreditNote"] = [];
            for (let item of this.creditNote)
                data["CreditNote"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTypeMapping)) {
            data["PaymentTypeMapping"] = [];
            for (let item of this.paymentTypeMapping)
                data["PaymentTypeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTypeTranslation)) {
            data["PaymentTypeTranslation"] = [];
            for (let item of this.paymentTypeTranslation)
                data["PaymentTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    creditNote?: CreditNote[] | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    paymentTypeTranslation?: PaymentTypeTranslation[] | null;
}

export class MembershipStatus implements IMembershipStatus {
    id?: number | null;
    name?: string | null;
    sortOrderId?: number | null;
    isActive?: boolean | null;
    currentMembership?: CurrentMembership[] | null;
    currentMembership1?: CurrentMembership[] | null;
    currentMembership2?: CurrentMembership[] | null;
    currentMembership3?: CurrentMembership[] | null;
    membershipStatusTranslation?: MembershipStatusTranslation[] | null;

    constructor(data?: IMembershipStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.sortOrderId = _data["SortOrderId"] !== undefined ? _data["SortOrderId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["CurrentMembership"])) {
                this.currentMembership = [] as any;
                for (let item of _data["CurrentMembership"])
                    this.currentMembership!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership = <any>null;
            }
            if (Array.isArray(_data["CurrentMembership1"])) {
                this.currentMembership1 = [] as any;
                for (let item of _data["CurrentMembership1"])
                    this.currentMembership1!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership1 = <any>null;
            }
            if (Array.isArray(_data["CurrentMembership2"])) {
                this.currentMembership2 = [] as any;
                for (let item of _data["CurrentMembership2"])
                    this.currentMembership2!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership2 = <any>null;
            }
            if (Array.isArray(_data["CurrentMembership3"])) {
                this.currentMembership3 = [] as any;
                for (let item of _data["CurrentMembership3"])
                    this.currentMembership3!.push(CurrentMembership.fromJS(item));
            }
            else {
                this.currentMembership3 = <any>null;
            }
            if (Array.isArray(_data["MembershipStatusTranslation"])) {
                this.membershipStatusTranslation = [] as any;
                for (let item of _data["MembershipStatusTranslation"])
                    this.membershipStatusTranslation!.push(MembershipStatusTranslation.fromJS(item));
            }
            else {
                this.membershipStatusTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): MembershipStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["SortOrderId"] = this.sortOrderId !== undefined ? this.sortOrderId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.currentMembership)) {
            data["CurrentMembership"] = [];
            for (let item of this.currentMembership)
                data["CurrentMembership"].push(item.toJSON());
        }
        if (Array.isArray(this.currentMembership1)) {
            data["CurrentMembership1"] = [];
            for (let item of this.currentMembership1)
                data["CurrentMembership1"].push(item.toJSON());
        }
        if (Array.isArray(this.currentMembership2)) {
            data["CurrentMembership2"] = [];
            for (let item of this.currentMembership2)
                data["CurrentMembership2"].push(item.toJSON());
        }
        if (Array.isArray(this.currentMembership3)) {
            data["CurrentMembership3"] = [];
            for (let item of this.currentMembership3)
                data["CurrentMembership3"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipStatusTranslation)) {
            data["MembershipStatusTranslation"] = [];
            for (let item of this.membershipStatusTranslation)
                data["MembershipStatusTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMembershipStatus {
    id?: number | null;
    name?: string | null;
    sortOrderId?: number | null;
    isActive?: boolean | null;
    currentMembership?: CurrentMembership[] | null;
    currentMembership1?: CurrentMembership[] | null;
    currentMembership2?: CurrentMembership[] | null;
    currentMembership3?: CurrentMembership[] | null;
    membershipStatusTranslation?: MembershipStatusTranslation[] | null;
}

export class Fee implements IFee {
    id?: number | null;
    description?: string | null;
    amount?: number | null;
    membershipTypeId?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    eventId?: number | null;
    feeRuleId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    discount?: Discount[] | null;
    event?: Event | null;
    membershipType?: MembershipType | null;

    constructor(data?: IFee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.feeRuleId = _data["FeeRuleId"] !== undefined ? _data["FeeRuleId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            if (Array.isArray(_data["Discount"])) {
                this.discount = [] as any;
                for (let item of _data["Discount"])
                    this.discount!.push(Discount.fromJS(item));
            }
            else {
                this.discount = <any>null;
            }
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
        }
    }

    static fromJS(data: any): Fee {
        data = typeof data === 'object' ? data : {};
        let result = new Fee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["FeeRuleId"] = this.feeRuleId !== undefined ? this.feeRuleId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        if (Array.isArray(this.discount)) {
            data["Discount"] = [];
            for (let item of this.discount)
                data["Discount"].push(item.toJSON());
        }
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        return data;
    }
}

export interface IFee {
    id?: number | null;
    description?: string | null;
    amount?: number | null;
    membershipTypeId?: number | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    eventId?: number | null;
    feeRuleId?: number | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    discount?: Discount[] | null;
    event?: Event | null;
    membershipType?: MembershipType | null;
}

export class InvoiceDiscountMapping implements IInvoiceDiscountMapping {
    invoiceId?: number | null;
    discountId?: number | null;
    isActive?: boolean | null;
    discount?: Discount | null;
    invoice?: Invoice | null;

    constructor(data?: IInvoiceDiscountMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.discountId = _data["DiscountId"] !== undefined ? _data["DiscountId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.discount = _data["Discount"] ? Discount.fromJS(_data["Discount"]) : <any>null;
            this.invoice = _data["Invoice"] ? Invoice.fromJS(_data["Invoice"]) : <any>null;
        }
    }

    static fromJS(data: any): InvoiceDiscountMapping {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDiscountMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["DiscountId"] = this.discountId !== undefined ? this.discountId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Discount"] = this.discount ? this.discount.toJSON() : <any>null;
        data["Invoice"] = this.invoice ? this.invoice.toJSON() : <any>null;
        return data;
    }
}

export interface IInvoiceDiscountMapping {
    invoiceId?: number | null;
    discountId?: number | null;
    isActive?: boolean | null;
    discount?: Discount | null;
    invoice?: Invoice | null;
}

export class EmailStatus implements IEmailStatus {
    id?: number | null;
    name?: string | null;
    emailLog?: EmailLog[] | null;
    emailStatusTranslation?: EmailStatusTranslation[] | null;

    constructor(data?: IEmailStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["EmailLog"])) {
                this.emailLog = [] as any;
                for (let item of _data["EmailLog"])
                    this.emailLog!.push(EmailLog.fromJS(item));
            }
            else {
                this.emailLog = <any>null;
            }
            if (Array.isArray(_data["EmailStatusTranslation"])) {
                this.emailStatusTranslation = [] as any;
                for (let item of _data["EmailStatusTranslation"])
                    this.emailStatusTranslation!.push(EmailStatusTranslation.fromJS(item));
            }
            else {
                this.emailStatusTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): EmailStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EmailStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.emailLog)) {
            data["EmailLog"] = [];
            for (let item of this.emailLog)
                data["EmailLog"].push(item.toJSON());
        }
        if (Array.isArray(this.emailStatusTranslation)) {
            data["EmailStatusTranslation"] = [];
            for (let item of this.emailStatusTranslation)
                data["EmailStatusTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEmailStatus {
    id?: number | null;
    name?: string | null;
    emailLog?: EmailLog[] | null;
    emailStatusTranslation?: EmailStatusTranslation[] | null;
}

export class EmailType implements IEmailType {
    id?: number | null;
    description?: string | null;
    subject?: string | null;
    message?: string | null;
    isActive?: boolean | null;
    isAlert?: boolean | null;
    readReceiptApplicable?: boolean | null;
    readReceiptTo?: string | null;
    emailTypeSubGroupId?: number | null;
    emailLog?: EmailLog[] | null;
    emailTypeSubGroup?: EmailTypeSubGroup | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;

    constructor(data?: IEmailType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.subject = _data["Subject"] !== undefined ? _data["Subject"] : <any>null;
            this.message = _data["Message"] !== undefined ? _data["Message"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.isAlert = _data["IsAlert"] !== undefined ? _data["IsAlert"] : <any>null;
            this.readReceiptApplicable = _data["ReadReceiptApplicable"] !== undefined ? _data["ReadReceiptApplicable"] : <any>null;
            this.readReceiptTo = _data["ReadReceiptTo"] !== undefined ? _data["ReadReceiptTo"] : <any>null;
            this.emailTypeSubGroupId = _data["EmailTypeSubGroupId"] !== undefined ? _data["EmailTypeSubGroupId"] : <any>null;
            if (Array.isArray(_data["EmailLog"])) {
                this.emailLog = [] as any;
                for (let item of _data["EmailLog"])
                    this.emailLog!.push(EmailLog.fromJS(item));
            }
            else {
                this.emailLog = <any>null;
            }
            this.emailTypeSubGroup = _data["EmailTypeSubGroup"] ? EmailTypeSubGroup.fromJS(_data["EmailTypeSubGroup"]) : <any>null;
            if (Array.isArray(_data["EmailTypeTranslation"])) {
                this.emailTypeTranslation = [] as any;
                for (let item of _data["EmailTypeTranslation"])
                    this.emailTypeTranslation!.push(EmailTypeTranslation.fromJS(item));
            }
            else {
                this.emailTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): EmailType {
        data = typeof data === 'object' ? data : {};
        let result = new EmailType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Subject"] = this.subject !== undefined ? this.subject : <any>null;
        data["Message"] = this.message !== undefined ? this.message : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["IsAlert"] = this.isAlert !== undefined ? this.isAlert : <any>null;
        data["ReadReceiptApplicable"] = this.readReceiptApplicable !== undefined ? this.readReceiptApplicable : <any>null;
        data["ReadReceiptTo"] = this.readReceiptTo !== undefined ? this.readReceiptTo : <any>null;
        data["EmailTypeSubGroupId"] = this.emailTypeSubGroupId !== undefined ? this.emailTypeSubGroupId : <any>null;
        if (Array.isArray(this.emailLog)) {
            data["EmailLog"] = [];
            for (let item of this.emailLog)
                data["EmailLog"].push(item.toJSON());
        }
        data["EmailTypeSubGroup"] = this.emailTypeSubGroup ? this.emailTypeSubGroup.toJSON() : <any>null;
        if (Array.isArray(this.emailTypeTranslation)) {
            data["EmailTypeTranslation"] = [];
            for (let item of this.emailTypeTranslation)
                data["EmailTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEmailType {
    id?: number | null;
    description?: string | null;
    subject?: string | null;
    message?: string | null;
    isActive?: boolean | null;
    isAlert?: boolean | null;
    readReceiptApplicable?: boolean | null;
    readReceiptTo?: string | null;
    emailTypeSubGroupId?: number | null;
    emailLog?: EmailLog[] | null;
    emailTypeSubGroup?: EmailTypeSubGroup | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;
}

export class EmailPreferenceTranslation implements IEmailPreferenceTranslation {
    languageId?: number | null;
    emailPreferenceId?: number | null;
    text?: string | null;
    emailPreference?: EmailPreference | null;
    language?: Language | null;

    constructor(data?: IEmailPreferenceTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.emailPreferenceId = _data["EmailPreferenceId"] !== undefined ? _data["EmailPreferenceId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.emailPreference = _data["EmailPreference"] ? EmailPreference.fromJS(_data["EmailPreference"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailPreferenceTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EmailPreferenceTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["EmailPreferenceId"] = this.emailPreferenceId !== undefined ? this.emailPreferenceId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["EmailPreference"] = this.emailPreference ? this.emailPreference.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailPreferenceTranslation {
    languageId?: number | null;
    emailPreferenceId?: number | null;
    text?: string | null;
    emailPreference?: EmailPreference | null;
    language?: Language | null;
}

export class EmailTypeGroup implements IEmailTypeGroup {
    id?: number | null;
    name?: string | null;
    isInternal?: boolean | null;
    moduleId?: number | null;
    emailTypeSubGroup?: EmailTypeSubGroup[] | null;

    constructor(data?: IEmailTypeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isInternal = _data["IsInternal"] !== undefined ? _data["IsInternal"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            if (Array.isArray(_data["EmailTypeSubGroup"])) {
                this.emailTypeSubGroup = [] as any;
                for (let item of _data["EmailTypeSubGroup"])
                    this.emailTypeSubGroup!.push(EmailTypeSubGroup.fromJS(item));
            }
            else {
                this.emailTypeSubGroup = <any>null;
            }
        }
    }

    static fromJS(data: any): EmailTypeGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EmailTypeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsInternal"] = this.isInternal !== undefined ? this.isInternal : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        if (Array.isArray(this.emailTypeSubGroup)) {
            data["EmailTypeSubGroup"] = [];
            for (let item of this.emailTypeSubGroup)
                data["EmailTypeSubGroup"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEmailTypeGroup {
    id?: number | null;
    name?: string | null;
    isInternal?: boolean | null;
    moduleId?: number | null;
    emailTypeSubGroup?: EmailTypeSubGroup[] | null;
}

export class Language implements ILanguage {
    id?: number | null;
    name?: string | null;
    localizedDisplayText?: string | null;
    cultureCode?: string | null;
    sortOrder?: number | null;
    addressTypeTranslation?: AddressTypeTranslation[] | null;
    affiliationStatusTranslation?: AffiliationStatusTranslation[] | null;
    applicationStatusTranslation?: ApplicationStatusTranslation[] | null;
    attestationTypeTranslation?: AttestationTypeTranslation[] | null;
    countryTranslation?: CountryTranslation[] | null;
    emailPreferenceTranslation?: EmailPreferenceTranslation[] | null;
    emailStatusTranslation?: EmailStatusTranslation[] | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;
    eventRegistrationStatusTranslation?: EventRegistrationStatusTranslation[] | null;
    eventStatusTranslation?: EventStatusTranslation[] | null;
    eventTypeTranslation?: EventTypeTranslation[] | null;
    interestTopicTranslation?: InterestTopicTranslation[] | null;
    membershipStatusTranslation?: MembershipStatusTranslation[] | null;
    membershipTypeTranslation?: MembershipTypeTranslation[] | null;
    mMCTSRoleTranslation?: MMCTSRoleTranslation[] | null;
    paymentTypeTranslation?: PaymentTypeTranslation[] | null;
    personTitleTranslation?: PersonTitleTranslation[] | null;
    professionTypeTranslation?: ProfessionTypeTranslation[] | null;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.localizedDisplayText = _data["LocalizedDisplayText"] !== undefined ? _data["LocalizedDisplayText"] : <any>null;
            this.cultureCode = _data["CultureCode"] !== undefined ? _data["CultureCode"] : <any>null;
            this.sortOrder = _data["SortOrder"] !== undefined ? _data["SortOrder"] : <any>null;
            if (Array.isArray(_data["AddressTypeTranslation"])) {
                this.addressTypeTranslation = [] as any;
                for (let item of _data["AddressTypeTranslation"])
                    this.addressTypeTranslation!.push(AddressTypeTranslation.fromJS(item));
            }
            else {
                this.addressTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["AffiliationStatusTranslation"])) {
                this.affiliationStatusTranslation = [] as any;
                for (let item of _data["AffiliationStatusTranslation"])
                    this.affiliationStatusTranslation!.push(AffiliationStatusTranslation.fromJS(item));
            }
            else {
                this.affiliationStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["ApplicationStatusTranslation"])) {
                this.applicationStatusTranslation = [] as any;
                for (let item of _data["ApplicationStatusTranslation"])
                    this.applicationStatusTranslation!.push(ApplicationStatusTranslation.fromJS(item));
            }
            else {
                this.applicationStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["AttestationTypeTranslation"])) {
                this.attestationTypeTranslation = [] as any;
                for (let item of _data["AttestationTypeTranslation"])
                    this.attestationTypeTranslation!.push(AttestationTypeTranslation.fromJS(item));
            }
            else {
                this.attestationTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["CountryTranslation"])) {
                this.countryTranslation = [] as any;
                for (let item of _data["CountryTranslation"])
                    this.countryTranslation!.push(CountryTranslation.fromJS(item));
            }
            else {
                this.countryTranslation = <any>null;
            }
            if (Array.isArray(_data["EmailPreferenceTranslation"])) {
                this.emailPreferenceTranslation = [] as any;
                for (let item of _data["EmailPreferenceTranslation"])
                    this.emailPreferenceTranslation!.push(EmailPreferenceTranslation.fromJS(item));
            }
            else {
                this.emailPreferenceTranslation = <any>null;
            }
            if (Array.isArray(_data["EmailStatusTranslation"])) {
                this.emailStatusTranslation = [] as any;
                for (let item of _data["EmailStatusTranslation"])
                    this.emailStatusTranslation!.push(EmailStatusTranslation.fromJS(item));
            }
            else {
                this.emailStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["EmailTypeTranslation"])) {
                this.emailTypeTranslation = [] as any;
                for (let item of _data["EmailTypeTranslation"])
                    this.emailTypeTranslation!.push(EmailTypeTranslation.fromJS(item));
            }
            else {
                this.emailTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["EventRegistrationStatusTranslation"])) {
                this.eventRegistrationStatusTranslation = [] as any;
                for (let item of _data["EventRegistrationStatusTranslation"])
                    this.eventRegistrationStatusTranslation!.push(EventRegistrationStatusTranslation.fromJS(item));
            }
            else {
                this.eventRegistrationStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["EventStatusTranslation"])) {
                this.eventStatusTranslation = [] as any;
                for (let item of _data["EventStatusTranslation"])
                    this.eventStatusTranslation!.push(EventStatusTranslation.fromJS(item));
            }
            else {
                this.eventStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["EventTypeTranslation"])) {
                this.eventTypeTranslation = [] as any;
                for (let item of _data["EventTypeTranslation"])
                    this.eventTypeTranslation!.push(EventTypeTranslation.fromJS(item));
            }
            else {
                this.eventTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["InterestTopicTranslation"])) {
                this.interestTopicTranslation = [] as any;
                for (let item of _data["InterestTopicTranslation"])
                    this.interestTopicTranslation!.push(InterestTopicTranslation.fromJS(item));
            }
            else {
                this.interestTopicTranslation = <any>null;
            }
            if (Array.isArray(_data["MembershipStatusTranslation"])) {
                this.membershipStatusTranslation = [] as any;
                for (let item of _data["MembershipStatusTranslation"])
                    this.membershipStatusTranslation!.push(MembershipStatusTranslation.fromJS(item));
            }
            else {
                this.membershipStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["MembershipTypeTranslation"])) {
                this.membershipTypeTranslation = [] as any;
                for (let item of _data["MembershipTypeTranslation"])
                    this.membershipTypeTranslation!.push(MembershipTypeTranslation.fromJS(item));
            }
            else {
                this.membershipTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["MMCTSRoleTranslation"])) {
                this.mMCTSRoleTranslation = [] as any;
                for (let item of _data["MMCTSRoleTranslation"])
                    this.mMCTSRoleTranslation!.push(MMCTSRoleTranslation.fromJS(item));
            }
            else {
                this.mMCTSRoleTranslation = <any>null;
            }
            if (Array.isArray(_data["PaymentTypeTranslation"])) {
                this.paymentTypeTranslation = [] as any;
                for (let item of _data["PaymentTypeTranslation"])
                    this.paymentTypeTranslation!.push(PaymentTypeTranslation.fromJS(item));
            }
            else {
                this.paymentTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["PersonTitleTranslation"])) {
                this.personTitleTranslation = [] as any;
                for (let item of _data["PersonTitleTranslation"])
                    this.personTitleTranslation!.push(PersonTitleTranslation.fromJS(item));
            }
            else {
                this.personTitleTranslation = <any>null;
            }
            if (Array.isArray(_data["ProfessionTypeTranslation"])) {
                this.professionTypeTranslation = [] as any;
                for (let item of _data["ProfessionTypeTranslation"])
                    this.professionTypeTranslation!.push(ProfessionTypeTranslation.fromJS(item));
            }
            else {
                this.professionTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["LocalizedDisplayText"] = this.localizedDisplayText !== undefined ? this.localizedDisplayText : <any>null;
        data["CultureCode"] = this.cultureCode !== undefined ? this.cultureCode : <any>null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : <any>null;
        if (Array.isArray(this.addressTypeTranslation)) {
            data["AddressTypeTranslation"] = [];
            for (let item of this.addressTypeTranslation)
                data["AddressTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.affiliationStatusTranslation)) {
            data["AffiliationStatusTranslation"] = [];
            for (let item of this.affiliationStatusTranslation)
                data["AffiliationStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.applicationStatusTranslation)) {
            data["ApplicationStatusTranslation"] = [];
            for (let item of this.applicationStatusTranslation)
                data["ApplicationStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.attestationTypeTranslation)) {
            data["AttestationTypeTranslation"] = [];
            for (let item of this.attestationTypeTranslation)
                data["AttestationTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.countryTranslation)) {
            data["CountryTranslation"] = [];
            for (let item of this.countryTranslation)
                data["CountryTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.emailPreferenceTranslation)) {
            data["EmailPreferenceTranslation"] = [];
            for (let item of this.emailPreferenceTranslation)
                data["EmailPreferenceTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.emailStatusTranslation)) {
            data["EmailStatusTranslation"] = [];
            for (let item of this.emailStatusTranslation)
                data["EmailStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.emailTypeTranslation)) {
            data["EmailTypeTranslation"] = [];
            for (let item of this.emailTypeTranslation)
                data["EmailTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRegistrationStatusTranslation)) {
            data["EventRegistrationStatusTranslation"] = [];
            for (let item of this.eventRegistrationStatusTranslation)
                data["EventRegistrationStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.eventStatusTranslation)) {
            data["EventStatusTranslation"] = [];
            for (let item of this.eventStatusTranslation)
                data["EventStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTypeTranslation)) {
            data["EventTypeTranslation"] = [];
            for (let item of this.eventTypeTranslation)
                data["EventTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.interestTopicTranslation)) {
            data["InterestTopicTranslation"] = [];
            for (let item of this.interestTopicTranslation)
                data["InterestTopicTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipStatusTranslation)) {
            data["MembershipStatusTranslation"] = [];
            for (let item of this.membershipStatusTranslation)
                data["MembershipStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipTypeTranslation)) {
            data["MembershipTypeTranslation"] = [];
            for (let item of this.membershipTypeTranslation)
                data["MembershipTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.mMCTSRoleTranslation)) {
            data["MMCTSRoleTranslation"] = [];
            for (let item of this.mMCTSRoleTranslation)
                data["MMCTSRoleTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTypeTranslation)) {
            data["PaymentTypeTranslation"] = [];
            for (let item of this.paymentTypeTranslation)
                data["PaymentTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.personTitleTranslation)) {
            data["PersonTitleTranslation"] = [];
            for (let item of this.personTitleTranslation)
                data["PersonTitleTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.professionTypeTranslation)) {
            data["ProfessionTypeTranslation"] = [];
            for (let item of this.professionTypeTranslation)
                data["ProfessionTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILanguage {
    id?: number | null;
    name?: string | null;
    localizedDisplayText?: string | null;
    cultureCode?: string | null;
    sortOrder?: number | null;
    addressTypeTranslation?: AddressTypeTranslation[] | null;
    affiliationStatusTranslation?: AffiliationStatusTranslation[] | null;
    applicationStatusTranslation?: ApplicationStatusTranslation[] | null;
    attestationTypeTranslation?: AttestationTypeTranslation[] | null;
    countryTranslation?: CountryTranslation[] | null;
    emailPreferenceTranslation?: EmailPreferenceTranslation[] | null;
    emailStatusTranslation?: EmailStatusTranslation[] | null;
    emailTypeTranslation?: EmailTypeTranslation[] | null;
    eventRegistrationStatusTranslation?: EventRegistrationStatusTranslation[] | null;
    eventStatusTranslation?: EventStatusTranslation[] | null;
    eventTypeTranslation?: EventTypeTranslation[] | null;
    interestTopicTranslation?: InterestTopicTranslation[] | null;
    membershipStatusTranslation?: MembershipStatusTranslation[] | null;
    membershipTypeTranslation?: MembershipTypeTranslation[] | null;
    mMCTSRoleTranslation?: MMCTSRoleTranslation[] | null;
    paymentTypeTranslation?: PaymentTypeTranslation[] | null;
    personTitleTranslation?: PersonTitleTranslation[] | null;
    professionTypeTranslation?: ProfessionTypeTranslation[] | null;
}

export class AttendanceType implements IAttendanceType {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;

    constructor(data?: IAttendanceType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
        }
    }

    static fromJS(data: any): AttendanceType {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAttendanceType {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;
}

export class Country implements ICountry {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    isVisibleForEvent?: boolean | null;
    region?: string | null;
    timeZone?: string | null;
    countryTranslation?: CountryTranslation[] | null;
    currency?: Currency[] | null;
    event?: Event[] | null;
    vATHead?: VATHead[] | null;
    onsiteUser?: OnsiteUser[] | null;
    organisation?: Organisation[] | null;
    person?: Person[] | null;
    userAddress?: UserAddress[] | null;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.countryCode = _data["CountryCode"] !== undefined ? _data["CountryCode"] : <any>null;
            this.iSDCode = _data["ISDCode"] !== undefined ? _data["ISDCode"] : <any>null;
            this.isVisibleForEvent = _data["IsVisibleForEvent"] !== undefined ? _data["IsVisibleForEvent"] : <any>null;
            this.region = _data["Region"] !== undefined ? _data["Region"] : <any>null;
            this.timeZone = _data["TimeZone"] !== undefined ? _data["TimeZone"] : <any>null;
            if (Array.isArray(_data["CountryTranslation"])) {
                this.countryTranslation = [] as any;
                for (let item of _data["CountryTranslation"])
                    this.countryTranslation!.push(CountryTranslation.fromJS(item));
            }
            else {
                this.countryTranslation = <any>null;
            }
            if (Array.isArray(_data["Currency"])) {
                this.currency = [] as any;
                for (let item of _data["Currency"])
                    this.currency!.push(Currency.fromJS(item));
            }
            else {
                this.currency = <any>null;
            }
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
            if (Array.isArray(_data["VATHead"])) {
                this.vATHead = [] as any;
                for (let item of _data["VATHead"])
                    this.vATHead!.push(VATHead.fromJS(item));
            }
            else {
                this.vATHead = <any>null;
            }
            if (Array.isArray(_data["OnsiteUser"])) {
                this.onsiteUser = [] as any;
                for (let item of _data["OnsiteUser"])
                    this.onsiteUser!.push(OnsiteUser.fromJS(item));
            }
            else {
                this.onsiteUser = <any>null;
            }
            if (Array.isArray(_data["Organisation"])) {
                this.organisation = [] as any;
                for (let item of _data["Organisation"])
                    this.organisation!.push(Organisation.fromJS(item));
            }
            else {
                this.organisation = <any>null;
            }
            if (Array.isArray(_data["Person"])) {
                this.person = [] as any;
                for (let item of _data["Person"])
                    this.person!.push(Person.fromJS(item));
            }
            else {
                this.person = <any>null;
            }
            if (Array.isArray(_data["UserAddress"])) {
                this.userAddress = [] as any;
                for (let item of _data["UserAddress"])
                    this.userAddress!.push(UserAddress.fromJS(item));
            }
            else {
                this.userAddress = <any>null;
            }
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CountryCode"] = this.countryCode !== undefined ? this.countryCode : <any>null;
        data["ISDCode"] = this.iSDCode !== undefined ? this.iSDCode : <any>null;
        data["IsVisibleForEvent"] = this.isVisibleForEvent !== undefined ? this.isVisibleForEvent : <any>null;
        data["Region"] = this.region !== undefined ? this.region : <any>null;
        data["TimeZone"] = this.timeZone !== undefined ? this.timeZone : <any>null;
        if (Array.isArray(this.countryTranslation)) {
            data["CountryTranslation"] = [];
            for (let item of this.countryTranslation)
                data["CountryTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.currency)) {
            data["Currency"] = [];
            for (let item of this.currency)
                data["Currency"].push(item.toJSON());
        }
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        if (Array.isArray(this.vATHead)) {
            data["VATHead"] = [];
            for (let item of this.vATHead)
                data["VATHead"].push(item.toJSON());
        }
        if (Array.isArray(this.onsiteUser)) {
            data["OnsiteUser"] = [];
            for (let item of this.onsiteUser)
                data["OnsiteUser"].push(item.toJSON());
        }
        if (Array.isArray(this.organisation)) {
            data["Organisation"] = [];
            for (let item of this.organisation)
                data["Organisation"].push(item.toJSON());
        }
        if (Array.isArray(this.person)) {
            data["Person"] = [];
            for (let item of this.person)
                data["Person"].push(item.toJSON());
        }
        if (Array.isArray(this.userAddress)) {
            data["UserAddress"] = [];
            for (let item of this.userAddress)
                data["UserAddress"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICountry {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    isVisibleForEvent?: boolean | null;
    region?: string | null;
    timeZone?: string | null;
    countryTranslation?: CountryTranslation[] | null;
    currency?: Currency[] | null;
    event?: Event[] | null;
    vATHead?: VATHead[] | null;
    onsiteUser?: OnsiteUser[] | null;
    organisation?: Organisation[] | null;
    person?: Person[] | null;
    userAddress?: UserAddress[] | null;
}

export class EventStatus implements IEventStatus {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;
    eventStatusTranslation?: EventStatusTranslation[] | null;

    constructor(data?: IEventStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
            if (Array.isArray(_data["EventStatusTranslation"])) {
                this.eventStatusTranslation = [] as any;
                for (let item of _data["EventStatusTranslation"])
                    this.eventStatusTranslation!.push(EventStatusTranslation.fromJS(item));
            }
            else {
                this.eventStatusTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): EventStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EventStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        if (Array.isArray(this.eventStatusTranslation)) {
            data["EventStatusTranslation"] = [];
            for (let item of this.eventStatusTranslation)
                data["EventStatusTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventStatus {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;
    eventStatusTranslation?: EventStatusTranslation[] | null;
}

export class TermsAndCondition implements ITermsAndCondition {
    id?: number | null;
    fileName?: string | null;
    savedFileName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    event?: Event[] | null;

    constructor(data?: ITermsAndCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.savedFileName = _data["SavedFileName"] !== undefined ? _data["SavedFileName"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
        }
    }

    static fromJS(data: any): TermsAndCondition {
        data = typeof data === 'object' ? data : {};
        let result = new TermsAndCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["SavedFileName"] = this.savedFileName !== undefined ? this.savedFileName : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITermsAndCondition {
    id?: number | null;
    fileName?: string | null;
    savedFileName?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    event?: Event[] | null;
}

export class EventAttendanceGroup implements IEventAttendanceGroup {
    id?: number | null;
    eventId?: number | null;
    attendanceGroupId?: number | null;
    attendanceGroup?: AttendanceGroup | null;
    event?: Event | null;
    eventTemplate?: EventTemplate[] | null;

    constructor(data?: IEventAttendanceGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.attendanceGroupId = _data["AttendanceGroupId"] !== undefined ? _data["AttendanceGroupId"] : <any>null;
            this.attendanceGroup = _data["AttendanceGroup"] ? AttendanceGroup.fromJS(_data["AttendanceGroup"]) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            if (Array.isArray(_data["EventTemplate"])) {
                this.eventTemplate = [] as any;
                for (let item of _data["EventTemplate"])
                    this.eventTemplate!.push(EventTemplate.fromJS(item));
            }
            else {
                this.eventTemplate = <any>null;
            }
        }
    }

    static fromJS(data: any): EventAttendanceGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EventAttendanceGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["AttendanceGroupId"] = this.attendanceGroupId !== undefined ? this.attendanceGroupId : <any>null;
        data["AttendanceGroup"] = this.attendanceGroup ? this.attendanceGroup.toJSON() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        if (Array.isArray(this.eventTemplate)) {
            data["EventTemplate"] = [];
            for (let item of this.eventTemplate)
                data["EventTemplate"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventAttendanceGroup {
    id?: number | null;
    eventId?: number | null;
    attendanceGroupId?: number | null;
    attendanceGroup?: AttendanceGroup | null;
    event?: Event | null;
    eventTemplate?: EventTemplate[] | null;
}

export class EventType implements IEventType {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;
    eventTypeTranslation?: EventTypeTranslation[] | null;

    constructor(data?: IEventType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["Event"])) {
                this.event = [] as any;
                for (let item of _data["Event"])
                    this.event!.push(Event.fromJS(item));
            }
            else {
                this.event = <any>null;
            }
            if (Array.isArray(_data["EventTypeTranslation"])) {
                this.eventTypeTranslation = [] as any;
                for (let item of _data["EventTypeTranslation"])
                    this.eventTypeTranslation!.push(EventTypeTranslation.fromJS(item));
            }
            else {
                this.eventTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): EventType {
        data = typeof data === 'object' ? data : {};
        let result = new EventType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.event)) {
            data["Event"] = [];
            for (let item of this.event)
                data["Event"].push(item.toJSON());
        }
        if (Array.isArray(this.eventTypeTranslation)) {
            data["EventTypeTranslation"] = [];
            for (let item of this.eventTypeTranslation)
                data["EventTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventType {
    id?: number | null;
    name?: string | null;
    event?: Event[] | null;
    eventTypeTranslation?: EventTypeTranslation[] | null;
}

export class EventSession implements IEventSession {
    id?: number | null;
    eventId?: number | null;
    sessionDate?: Date | null;
    sessionTime?: string | null;
    room?: string | null;
    title?: string | null;
    sessionTypeId?: number | null;
    applicableTo?: string | null;
    checkPermission?: boolean | null;
    event?: Event | null;
    eventAttendance?: EventAttendance[] | null;
    sessionType?: SessionType | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;
    sessionFeeMapping?: SessionFeeMapping[] | null;

    constructor(data?: IEventSession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.sessionDate = _data["SessionDate"] ? new Date(_data["SessionDate"].toString()) : <any>null;
            this.sessionTime = _data["SessionTime"] !== undefined ? _data["SessionTime"] : <any>null;
            this.room = _data["Room"] !== undefined ? _data["Room"] : <any>null;
            this.title = _data["Title"] !== undefined ? _data["Title"] : <any>null;
            this.sessionTypeId = _data["SessionTypeId"] !== undefined ? _data["SessionTypeId"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.checkPermission = _data["CheckPermission"] !== undefined ? _data["CheckPermission"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            if (Array.isArray(_data["EventAttendance"])) {
                this.eventAttendance = [] as any;
                for (let item of _data["EventAttendance"])
                    this.eventAttendance!.push(EventAttendance.fromJS(item));
            }
            else {
                this.eventAttendance = <any>null;
            }
            this.sessionType = _data["SessionType"] ? SessionType.fromJS(_data["SessionType"]) : <any>null;
            if (Array.isArray(_data["SessionAccessoryMapping"])) {
                this.sessionAccessoryMapping = [] as any;
                for (let item of _data["SessionAccessoryMapping"])
                    this.sessionAccessoryMapping!.push(SessionAccessoryMapping.fromJS(item));
            }
            else {
                this.sessionAccessoryMapping = <any>null;
            }
            if (Array.isArray(_data["SessionFeeMapping"])) {
                this.sessionFeeMapping = [] as any;
                for (let item of _data["SessionFeeMapping"])
                    this.sessionFeeMapping!.push(SessionFeeMapping.fromJS(item));
            }
            else {
                this.sessionFeeMapping = <any>null;
            }
        }
    }

    static fromJS(data: any): EventSession {
        data = typeof data === 'object' ? data : {};
        let result = new EventSession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["SessionDate"] = this.sessionDate ? this.sessionDate.toISOString() : <any>null;
        data["SessionTime"] = this.sessionTime !== undefined ? this.sessionTime : <any>null;
        data["Room"] = this.room !== undefined ? this.room : <any>null;
        data["Title"] = this.title !== undefined ? this.title : <any>null;
        data["SessionTypeId"] = this.sessionTypeId !== undefined ? this.sessionTypeId : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["CheckPermission"] = this.checkPermission !== undefined ? this.checkPermission : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        if (Array.isArray(this.eventAttendance)) {
            data["EventAttendance"] = [];
            for (let item of this.eventAttendance)
                data["EventAttendance"].push(item.toJSON());
        }
        data["SessionType"] = this.sessionType ? this.sessionType.toJSON() : <any>null;
        if (Array.isArray(this.sessionAccessoryMapping)) {
            data["SessionAccessoryMapping"] = [];
            for (let item of this.sessionAccessoryMapping)
                data["SessionAccessoryMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.sessionFeeMapping)) {
            data["SessionFeeMapping"] = [];
            for (let item of this.sessionFeeMapping)
                data["SessionFeeMapping"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventSession {
    id?: number | null;
    eventId?: number | null;
    sessionDate?: Date | null;
    sessionTime?: string | null;
    room?: string | null;
    title?: string | null;
    sessionTypeId?: number | null;
    applicableTo?: string | null;
    checkPermission?: boolean | null;
    event?: Event | null;
    eventAttendance?: EventAttendance[] | null;
    sessionType?: SessionType | null;
    sessionAccessoryMapping?: SessionAccessoryMapping[] | null;
    sessionFeeMapping?: SessionFeeMapping[] | null;
}

export class EventTemplateContent implements IEventTemplateContent {
    id?: number | null;
    eventId?: number | null;
    contentTypeId?: number | null;
    template?: string | null;
    isActive?: boolean | null;
    event?: Event | null;

    constructor(data?: IEventTemplateContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.contentTypeId = _data["ContentTypeId"] !== undefined ? _data["ContentTypeId"] : <any>null;
            this.template = _data["Template"] !== undefined ? _data["Template"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTemplateContent {
        data = typeof data === 'object' ? data : {};
        let result = new EventTemplateContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["ContentTypeId"] = this.contentTypeId !== undefined ? this.contentTypeId : <any>null;
        data["Template"] = this.template !== undefined ? this.template : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTemplateContent {
    id?: number | null;
    eventId?: number | null;
    contentTypeId?: number | null;
    template?: string | null;
    isActive?: boolean | null;
    event?: Event | null;
}

export class PaymentTypeMapping implements IPaymentTypeMapping {
    id?: number | null;
    eventId?: number | null;
    roleId?: string | null;
    paymentTypeId?: number | null;
    isVisible?: boolean | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    paymentType?: PaymentType | null;
    role?: Role | null;

    constructor(data?: IPaymentTypeMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.roleId = _data["RoleId"] !== undefined ? _data["RoleId"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.isVisible = _data["IsVisible"] !== undefined ? _data["IsVisible"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.event = _data["Event"] ? Event.fromJS(_data["Event"]) : <any>null;
            this.paymentType = _data["PaymentType"] ? PaymentType.fromJS(_data["PaymentType"]) : <any>null;
            this.role = _data["Role"] ? Role.fromJS(_data["Role"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentTypeMapping {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["RoleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["IsVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        data["PaymentType"] = this.paymentType ? this.paymentType.toJSON() : <any>null;
        data["Role"] = this.role ? this.role.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentTypeMapping {
    id?: number | null;
    eventId?: number | null;
    roleId?: string | null;
    paymentTypeId?: number | null;
    isVisible?: boolean | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    event?: Event | null;
    paymentType?: PaymentType | null;
    role?: Role | null;
}

export class PaymentDemandDetail implements IPaymentDemandDetail {
    id?: number | null;
    quantity?: number | null;
    paymentDemandId?: number | null;
    unitPrice?: number | null;
    vAT?: number | null;
    vATAmount?: number | null;
    amount?: number | null;
    feeId?: number | null;
    isDelete?: boolean | null;
    revisionNumber?: number | null;
    couponCodeId?: number | null;
    discountedAmount?: number | null;
    eventDiscountCouponCode?: EventDiscountCouponCode | null;
    paymentDemand?: PaymentDemand | null;

    constructor(data?: IPaymentDemandDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.unitPrice = _data["UnitPrice"] !== undefined ? _data["UnitPrice"] : <any>null;
            this.vAT = _data["VAT"] !== undefined ? _data["VAT"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.isDelete = _data["IsDelete"] !== undefined ? _data["IsDelete"] : <any>null;
            this.revisionNumber = _data["RevisionNumber"] !== undefined ? _data["RevisionNumber"] : <any>null;
            this.couponCodeId = _data["CouponCodeId"] !== undefined ? _data["CouponCodeId"] : <any>null;
            this.discountedAmount = _data["DiscountedAmount"] !== undefined ? _data["DiscountedAmount"] : <any>null;
            this.eventDiscountCouponCode = _data["EventDiscountCouponCode"] ? EventDiscountCouponCode.fromJS(_data["EventDiscountCouponCode"]) : <any>null;
            this.paymentDemand = _data["PaymentDemand"] ? PaymentDemand.fromJS(_data["PaymentDemand"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentDemandDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDemandDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["UnitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        data["VAT"] = this.vAT !== undefined ? this.vAT : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["IsDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["RevisionNumber"] = this.revisionNumber !== undefined ? this.revisionNumber : <any>null;
        data["CouponCodeId"] = this.couponCodeId !== undefined ? this.couponCodeId : <any>null;
        data["DiscountedAmount"] = this.discountedAmount !== undefined ? this.discountedAmount : <any>null;
        data["EventDiscountCouponCode"] = this.eventDiscountCouponCode ? this.eventDiscountCouponCode.toJSON() : <any>null;
        data["PaymentDemand"] = this.paymentDemand ? this.paymentDemand.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentDemandDetail {
    id?: number | null;
    quantity?: number | null;
    paymentDemandId?: number | null;
    unitPrice?: number | null;
    vAT?: number | null;
    vATAmount?: number | null;
    amount?: number | null;
    feeId?: number | null;
    isDelete?: boolean | null;
    revisionNumber?: number | null;
    couponCodeId?: number | null;
    discountedAmount?: number | null;
    eventDiscountCouponCode?: EventDiscountCouponCode | null;
    paymentDemand?: PaymentDemand | null;
}

export class AttendanceGroup implements IAttendanceGroup {
    id?: number | null;
    name?: string | null;
    eventAttendanceGroup?: EventAttendanceGroup[] | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;

    constructor(data?: IAttendanceGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["EventAttendanceGroup"])) {
                this.eventAttendanceGroup = [] as any;
                for (let item of _data["EventAttendanceGroup"])
                    this.eventAttendanceGroup!.push(EventAttendanceGroup.fromJS(item));
            }
            else {
                this.eventAttendanceGroup = <any>null;
            }
            if (Array.isArray(_data["EventFeeAttendanceGroup"])) {
                this.eventFeeAttendanceGroup = [] as any;
                for (let item of _data["EventFeeAttendanceGroup"])
                    this.eventFeeAttendanceGroup!.push(EventFeeAttendanceGroup.fromJS(item));
            }
            else {
                this.eventFeeAttendanceGroup = <any>null;
            }
        }
    }

    static fromJS(data: any): AttendanceGroup {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.eventAttendanceGroup)) {
            data["EventAttendanceGroup"] = [];
            for (let item of this.eventAttendanceGroup)
                data["EventAttendanceGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.eventFeeAttendanceGroup)) {
            data["EventFeeAttendanceGroup"] = [];
            for (let item of this.eventFeeAttendanceGroup)
                data["EventFeeAttendanceGroup"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAttendanceGroup {
    id?: number | null;
    name?: string | null;
    eventAttendanceGroup?: EventAttendanceGroup[] | null;
    eventFeeAttendanceGroup?: EventFeeAttendanceGroup[] | null;
}

export class PersonTitle implements IPersonTitle {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventGroup?: EventGroup[] | null;
    person?: Person[] | null;
    personTitleTranslation?: PersonTitleTranslation[] | null;

    constructor(data?: IPersonTitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventGroup"])) {
                this.eventGroup = [] as any;
                for (let item of _data["EventGroup"])
                    this.eventGroup!.push(EventGroup.fromJS(item));
            }
            else {
                this.eventGroup = <any>null;
            }
            if (Array.isArray(_data["Person"])) {
                this.person = [] as any;
                for (let item of _data["Person"])
                    this.person!.push(Person.fromJS(item));
            }
            else {
                this.person = <any>null;
            }
            if (Array.isArray(_data["PersonTitleTranslation"])) {
                this.personTitleTranslation = [] as any;
                for (let item of _data["PersonTitleTranslation"])
                    this.personTitleTranslation!.push(PersonTitleTranslation.fromJS(item));
            }
            else {
                this.personTitleTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): PersonTitle {
        data = typeof data === 'object' ? data : {};
        let result = new PersonTitle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventGroup)) {
            data["EventGroup"] = [];
            for (let item of this.eventGroup)
                data["EventGroup"].push(item.toJSON());
        }
        if (Array.isArray(this.person)) {
            data["Person"] = [];
            for (let item of this.person)
                data["Person"].push(item.toJSON());
        }
        if (Array.isArray(this.personTitleTranslation)) {
            data["PersonTitleTranslation"] = [];
            for (let item of this.personTitleTranslation)
                data["PersonTitleTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPersonTitle {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventGroup?: EventGroup[] | null;
    person?: Person[] | null;
    personTitleTranslation?: PersonTitleTranslation[] | null;
}

export class Template implements ITemplate {
    id?: number | null;
    templateType?: string | null;
    isActive?: boolean | null;
    eventTemplate?: EventTemplate[] | null;

    constructor(data?: ITemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.templateType = _data["TemplateType"] !== undefined ? _data["TemplateType"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventTemplate"])) {
                this.eventTemplate = [] as any;
                for (let item of _data["EventTemplate"])
                    this.eventTemplate!.push(EventTemplate.fromJS(item));
            }
            else {
                this.eventTemplate = <any>null;
            }
        }
    }

    static fromJS(data: any): Template {
        data = typeof data === 'object' ? data : {};
        let result = new Template();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["TemplateType"] = this.templateType !== undefined ? this.templateType : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventTemplate)) {
            data["EventTemplate"] = [];
            for (let item of this.eventTemplate)
                data["EventTemplate"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITemplate {
    id?: number | null;
    templateType?: string | null;
    isActive?: boolean | null;
    eventTemplate?: EventTemplate[] | null;
}

export class PaymentDetailsMapping implements IPaymentDetailsMapping {
    id?: number | null;
    paymentDemandId?: number | null;
    paymentTransactionId?: number | null;
    invoiceId?: number | null;
    invoice?: Invoice | null;
    paymentDemand?: PaymentDemand | null;
    paymentTransaction?: PaymentTransaction | null;

    constructor(data?: IPaymentDetailsMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentTransactionId = _data["PaymentTransactionId"] !== undefined ? _data["PaymentTransactionId"] : <any>null;
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.invoice = _data["Invoice"] ? Invoice.fromJS(_data["Invoice"]) : <any>null;
            this.paymentDemand = _data["PaymentDemand"] ? PaymentDemand.fromJS(_data["PaymentDemand"]) : <any>null;
            this.paymentTransaction = _data["PaymentTransaction"] ? PaymentTransaction.fromJS(_data["PaymentTransaction"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentDetailsMapping {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDetailsMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentTransactionId"] = this.paymentTransactionId !== undefined ? this.paymentTransactionId : <any>null;
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["Invoice"] = this.invoice ? this.invoice.toJSON() : <any>null;
        data["PaymentDemand"] = this.paymentDemand ? this.paymentDemand.toJSON() : <any>null;
        data["PaymentTransaction"] = this.paymentTransaction ? this.paymentTransaction.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentDetailsMapping {
    id?: number | null;
    paymentDemandId?: number | null;
    paymentTransactionId?: number | null;
    invoiceId?: number | null;
    invoice?: Invoice | null;
    paymentDemand?: PaymentDemand | null;
    paymentTransaction?: PaymentTransaction | null;
}

export class Journal implements IJournal {
    id?: number | null;
    name?: string | null;
    journalRole?: JournalRole[] | null;

    constructor(data?: IJournal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["JournalRole"])) {
                this.journalRole = [] as any;
                for (let item of _data["JournalRole"])
                    this.journalRole!.push(JournalRole.fromJS(item));
            }
            else {
                this.journalRole = <any>null;
            }
        }
    }

    static fromJS(data: any): Journal {
        data = typeof data === 'object' ? data : {};
        let result = new Journal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.journalRole)) {
            data["JournalRole"] = [];
            for (let item of this.journalRole)
                data["JournalRole"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJournal {
    id?: number | null;
    name?: string | null;
    journalRole?: JournalRole[] | null;
}

export class ApplicationStatus implements IApplicationStatus {
    id?: number | null;
    name?: string | null;
    applicationStatusTranslation?: ApplicationStatusTranslation[] | null;
    membershipApplication?: MembershipApplication[] | null;

    constructor(data?: IApplicationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["ApplicationStatusTranslation"])) {
                this.applicationStatusTranslation = [] as any;
                for (let item of _data["ApplicationStatusTranslation"])
                    this.applicationStatusTranslation!.push(ApplicationStatusTranslation.fromJS(item));
            }
            else {
                this.applicationStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["MembershipApplication"])) {
                this.membershipApplication = [] as any;
                for (let item of _data["MembershipApplication"])
                    this.membershipApplication!.push(MembershipApplication.fromJS(item));
            }
            else {
                this.membershipApplication = <any>null;
            }
        }
    }

    static fromJS(data: any): ApplicationStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.applicationStatusTranslation)) {
            data["ApplicationStatusTranslation"] = [];
            for (let item of this.applicationStatusTranslation)
                data["ApplicationStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.membershipApplication)) {
            data["MembershipApplication"] = [];
            for (let item of this.membershipApplication)
                data["MembershipApplication"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApplicationStatus {
    id?: number | null;
    name?: string | null;
    applicationStatusTranslation?: ApplicationStatusTranslation[] | null;
    membershipApplication?: MembershipApplication[] | null;
}

export class RenewalType implements IRenewalType {
    id?: number | null;
    type?: string | null;
    isActive?: boolean | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;

    constructor(data?: IRenewalType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.type = _data["Type"] !== undefined ? _data["Type"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["MembershipAutoRenewal"])) {
                this.membershipAutoRenewal = [] as any;
                for (let item of _data["MembershipAutoRenewal"])
                    this.membershipAutoRenewal!.push(MembershipAutoRenewal.fromJS(item));
            }
            else {
                this.membershipAutoRenewal = <any>null;
            }
        }
    }

    static fromJS(data: any): RenewalType {
        data = typeof data === 'object' ? data : {};
        let result = new RenewalType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Type"] = this.type !== undefined ? this.type : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.membershipAutoRenewal)) {
            data["MembershipAutoRenewal"] = [];
            for (let item of this.membershipAutoRenewal)
                data["MembershipAutoRenewal"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRenewalType {
    id?: number | null;
    type?: string | null;
    isActive?: boolean | null;
    membershipAutoRenewal?: MembershipAutoRenewal[] | null;
}

export class MembershipTypeTranslation implements IMembershipTypeTranslation {
    membershipTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    membershipType?: MembershipType | null;

    constructor(data?: IMembershipTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.membershipType = _data["MembershipType"] ? MembershipType.fromJS(_data["MembershipType"]) : <any>null;
        }
    }

    static fromJS(data: any): MembershipTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["MembershipType"] = this.membershipType ? this.membershipType.toJSON() : <any>null;
        return data;
    }
}

export interface IMembershipTypeTranslation {
    membershipTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    membershipType?: MembershipType | null;
}

export class PaymentGateway implements IPaymentGateway {
    id?: number | null;
    paymentGatewayTypeId?: number | null;
    merchantId?: string | null;
    merchantName?: string | null;
    apiKey?: string | null;
    secretApiKey?: string | null;
    apiURL?: string | null;
    isActive?: boolean | null;
    paymentURL?: string | null;
    redirectURL?: string | null;
    aPIUserName?: string | null;
    aPIUserPassword?: string | null;
    refundURL?: string | null;
    paymentStatusURL?: string | null;
    operation?: string | null;
    paymentGatewayType?: PaymentGatewayType | null;
    paymentGatewayCurrency?: PaymentGatewayCurrency[] | null;
    paymentTransaction?: PaymentTransaction[] | null;

    constructor(data?: IPaymentGateway) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.paymentGatewayTypeId = _data["PaymentGatewayTypeId"] !== undefined ? _data["PaymentGatewayTypeId"] : <any>null;
            this.merchantId = _data["MerchantId"] !== undefined ? _data["MerchantId"] : <any>null;
            this.merchantName = _data["MerchantName"] !== undefined ? _data["MerchantName"] : <any>null;
            this.apiKey = _data["ApiKey"] !== undefined ? _data["ApiKey"] : <any>null;
            this.secretApiKey = _data["SecretApiKey"] !== undefined ? _data["SecretApiKey"] : <any>null;
            this.apiURL = _data["ApiURL"] !== undefined ? _data["ApiURL"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.paymentURL = _data["PaymentURL"] !== undefined ? _data["PaymentURL"] : <any>null;
            this.redirectURL = _data["RedirectURL"] !== undefined ? _data["RedirectURL"] : <any>null;
            this.aPIUserName = _data["APIUserName"] !== undefined ? _data["APIUserName"] : <any>null;
            this.aPIUserPassword = _data["APIUserPassword"] !== undefined ? _data["APIUserPassword"] : <any>null;
            this.refundURL = _data["RefundURL"] !== undefined ? _data["RefundURL"] : <any>null;
            this.paymentStatusURL = _data["PaymentStatusURL"] !== undefined ? _data["PaymentStatusURL"] : <any>null;
            this.operation = _data["Operation"] !== undefined ? _data["Operation"] : <any>null;
            this.paymentGatewayType = _data["PaymentGatewayType"] ? PaymentGatewayType.fromJS(_data["PaymentGatewayType"]) : <any>null;
            if (Array.isArray(_data["PaymentGatewayCurrency"])) {
                this.paymentGatewayCurrency = [] as any;
                for (let item of _data["PaymentGatewayCurrency"])
                    this.paymentGatewayCurrency!.push(PaymentGatewayCurrency.fromJS(item));
            }
            else {
                this.paymentGatewayCurrency = <any>null;
            }
            if (Array.isArray(_data["PaymentTransaction"])) {
                this.paymentTransaction = [] as any;
                for (let item of _data["PaymentTransaction"])
                    this.paymentTransaction!.push(PaymentTransaction.fromJS(item));
            }
            else {
                this.paymentTransaction = <any>null;
            }
        }
    }

    static fromJS(data: any): PaymentGateway {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentGateway();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["PaymentGatewayTypeId"] = this.paymentGatewayTypeId !== undefined ? this.paymentGatewayTypeId : <any>null;
        data["MerchantId"] = this.merchantId !== undefined ? this.merchantId : <any>null;
        data["MerchantName"] = this.merchantName !== undefined ? this.merchantName : <any>null;
        data["ApiKey"] = this.apiKey !== undefined ? this.apiKey : <any>null;
        data["SecretApiKey"] = this.secretApiKey !== undefined ? this.secretApiKey : <any>null;
        data["ApiURL"] = this.apiURL !== undefined ? this.apiURL : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["PaymentURL"] = this.paymentURL !== undefined ? this.paymentURL : <any>null;
        data["RedirectURL"] = this.redirectURL !== undefined ? this.redirectURL : <any>null;
        data["APIUserName"] = this.aPIUserName !== undefined ? this.aPIUserName : <any>null;
        data["APIUserPassword"] = this.aPIUserPassword !== undefined ? this.aPIUserPassword : <any>null;
        data["RefundURL"] = this.refundURL !== undefined ? this.refundURL : <any>null;
        data["PaymentStatusURL"] = this.paymentStatusURL !== undefined ? this.paymentStatusURL : <any>null;
        data["Operation"] = this.operation !== undefined ? this.operation : <any>null;
        data["PaymentGatewayType"] = this.paymentGatewayType ? this.paymentGatewayType.toJSON() : <any>null;
        if (Array.isArray(this.paymentGatewayCurrency)) {
            data["PaymentGatewayCurrency"] = [];
            for (let item of this.paymentGatewayCurrency)
                data["PaymentGatewayCurrency"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTransaction)) {
            data["PaymentTransaction"] = [];
            for (let item of this.paymentTransaction)
                data["PaymentTransaction"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentGateway {
    id?: number | null;
    paymentGatewayTypeId?: number | null;
    merchantId?: string | null;
    merchantName?: string | null;
    apiKey?: string | null;
    secretApiKey?: string | null;
    apiURL?: string | null;
    isActive?: boolean | null;
    paymentURL?: string | null;
    redirectURL?: string | null;
    aPIUserName?: string | null;
    aPIUserPassword?: string | null;
    refundURL?: string | null;
    paymentStatusURL?: string | null;
    operation?: string | null;
    paymentGatewayType?: PaymentGatewayType | null;
    paymentGatewayCurrency?: PaymentGatewayCurrency[] | null;
    paymentTransaction?: PaymentTransaction[] | null;
}

export class SearchListDetail implements ISearchListDetail {
    searchId?: number | null;
    fieldId?: number | null;
    fieldValue?: string | null;
    isSelected?: boolean | null;
    id?: number | null;
    condition?: string | null;
    sortOrder?: number | null;
    search?: Search | null;

    constructor(data?: ISearchListDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchId = _data["SearchId"] !== undefined ? _data["SearchId"] : <any>null;
            this.fieldId = _data["FieldId"] !== undefined ? _data["FieldId"] : <any>null;
            this.fieldValue = _data["FieldValue"] !== undefined ? _data["FieldValue"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.condition = _data["Condition"] !== undefined ? _data["Condition"] : <any>null;
            this.sortOrder = _data["SortOrder"] !== undefined ? _data["SortOrder"] : <any>null;
            this.search = _data["Search"] ? Search.fromJS(_data["Search"]) : <any>null;
        }
    }

    static fromJS(data: any): SearchListDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SearchListDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchId"] = this.searchId !== undefined ? this.searchId : <any>null;
        data["FieldId"] = this.fieldId !== undefined ? this.fieldId : <any>null;
        data["FieldValue"] = this.fieldValue !== undefined ? this.fieldValue : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Condition"] = this.condition !== undefined ? this.condition : <any>null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : <any>null;
        data["Search"] = this.search ? this.search.toJSON() : <any>null;
        return data;
    }
}

export interface ISearchListDetail {
    searchId?: number | null;
    fieldId?: number | null;
    fieldValue?: string | null;
    isSelected?: boolean | null;
    id?: number | null;
    condition?: string | null;
    sortOrder?: number | null;
    search?: Search | null;
}

export class NominationStatus implements INominationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    selfNomination?: SelfNomination[] | null;

    constructor(data?: INominationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["SelfNomination"])) {
                this.selfNomination = [] as any;
                for (let item of _data["SelfNomination"])
                    this.selfNomination!.push(SelfNomination.fromJS(item));
            }
            else {
                this.selfNomination = <any>null;
            }
        }
    }

    static fromJS(data: any): NominationStatus {
        data = typeof data === 'object' ? data : {};
        let result = new NominationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.selfNomination)) {
            data["SelfNomination"] = [];
            for (let item of this.selfNomination)
                data["SelfNomination"].push(item.toJSON());
        }
        return data;
    }
}

export interface INominationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    selfNomination?: SelfNomination[] | null;
}

export class HistoricalEvent implements IHistoricalEvent {
    id?: number | null;
    name?: string | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;

    constructor(data?: IHistoricalEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["HistoricalEventRegistration"])) {
                this.historicalEventRegistration = [] as any;
                for (let item of _data["HistoricalEventRegistration"])
                    this.historicalEventRegistration!.push(HistoricalEventRegistration.fromJS(item));
            }
            else {
                this.historicalEventRegistration = <any>null;
            }
        }
    }

    static fromJS(data: any): HistoricalEvent {
        data = typeof data === 'object' ? data : {};
        let result = new HistoricalEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.historicalEventRegistration)) {
            data["HistoricalEventRegistration"] = [];
            for (let item of this.historicalEventRegistration)
                data["HistoricalEventRegistration"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHistoricalEvent {
    id?: number | null;
    name?: string | null;
    historicalEventRegistration?: HistoricalEventRegistration[] | null;
}

export class AddressType implements IAddressType {
    id?: number | null;
    name?: string | null;
    isVisible?: boolean | null;
    addressTypeTranslation?: AddressTypeTranslation[] | null;
    userAddress?: UserAddress[] | null;

    constructor(data?: IAddressType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isVisible = _data["IsVisible"] !== undefined ? _data["IsVisible"] : <any>null;
            if (Array.isArray(_data["AddressTypeTranslation"])) {
                this.addressTypeTranslation = [] as any;
                for (let item of _data["AddressTypeTranslation"])
                    this.addressTypeTranslation!.push(AddressTypeTranslation.fromJS(item));
            }
            else {
                this.addressTypeTranslation = <any>null;
            }
            if (Array.isArray(_data["UserAddress"])) {
                this.userAddress = [] as any;
                for (let item of _data["UserAddress"])
                    this.userAddress!.push(UserAddress.fromJS(item));
            }
            else {
                this.userAddress = <any>null;
            }
        }
    }

    static fromJS(data: any): AddressType {
        data = typeof data === 'object' ? data : {};
        let result = new AddressType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        if (Array.isArray(this.addressTypeTranslation)) {
            data["AddressTypeTranslation"] = [];
            for (let item of this.addressTypeTranslation)
                data["AddressTypeTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.userAddress)) {
            data["UserAddress"] = [];
            for (let item of this.userAddress)
                data["UserAddress"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddressType {
    id?: number | null;
    name?: string | null;
    isVisible?: boolean | null;
    addressTypeTranslation?: AddressTypeTranslation[] | null;
    userAddress?: UserAddress[] | null;
}

export class Affiliation implements IAffiliation {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    isActive?: boolean | null;
    userAffiliation?: UserAffiliation[] | null;

    constructor(data?: IAffiliation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["UserAffiliation"])) {
                this.userAffiliation = [] as any;
                for (let item of _data["UserAffiliation"])
                    this.userAffiliation!.push(UserAffiliation.fromJS(item));
            }
            else {
                this.userAffiliation = <any>null;
            }
        }
    }

    static fromJS(data: any): Affiliation {
        data = typeof data === 'object' ? data : {};
        let result = new Affiliation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.userAffiliation)) {
            data["UserAffiliation"] = [];
            for (let item of this.userAffiliation)
                data["UserAffiliation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAffiliation {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    isActive?: boolean | null;
    userAffiliation?: UserAffiliation[] | null;
}

export class AffiliationStatus implements IAffiliationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    affiliationStatusTranslation?: AffiliationStatusTranslation[] | null;
    userAffiliation?: UserAffiliation[] | null;

    constructor(data?: IAffiliationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["AffiliationStatusTranslation"])) {
                this.affiliationStatusTranslation = [] as any;
                for (let item of _data["AffiliationStatusTranslation"])
                    this.affiliationStatusTranslation!.push(AffiliationStatusTranslation.fromJS(item));
            }
            else {
                this.affiliationStatusTranslation = <any>null;
            }
            if (Array.isArray(_data["UserAffiliation"])) {
                this.userAffiliation = [] as any;
                for (let item of _data["UserAffiliation"])
                    this.userAffiliation!.push(UserAffiliation.fromJS(item));
            }
            else {
                this.userAffiliation = <any>null;
            }
        }
    }

    static fromJS(data: any): AffiliationStatus {
        data = typeof data === 'object' ? data : {};
        let result = new AffiliationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.affiliationStatusTranslation)) {
            data["AffiliationStatusTranslation"] = [];
            for (let item of this.affiliationStatusTranslation)
                data["AffiliationStatusTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.userAffiliation)) {
            data["UserAffiliation"] = [];
            for (let item of this.userAffiliation)
                data["UserAffiliation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAffiliationStatus {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    affiliationStatusTranslation?: AffiliationStatusTranslation[] | null;
    userAffiliation?: UserAffiliation[] | null;
}

export class InterestTopic implements IInterestTopic {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    parentId?: number | null;
    professionType?: ProfessionType | null;
    interestTopicTranslation?: InterestTopicTranslation[] | null;
    userInterest?: UserInterest[] | null;

    constructor(data?: IInterestTopic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.parentId = _data["ParentId"] !== undefined ? _data["ParentId"] : <any>null;
            this.professionType = _data["ProfessionType"] ? ProfessionType.fromJS(_data["ProfessionType"]) : <any>null;
            if (Array.isArray(_data["InterestTopicTranslation"])) {
                this.interestTopicTranslation = [] as any;
                for (let item of _data["InterestTopicTranslation"])
                    this.interestTopicTranslation!.push(InterestTopicTranslation.fromJS(item));
            }
            else {
                this.interestTopicTranslation = <any>null;
            }
            if (Array.isArray(_data["UserInterest"])) {
                this.userInterest = [] as any;
                for (let item of _data["UserInterest"])
                    this.userInterest!.push(UserInterest.fromJS(item));
            }
            else {
                this.userInterest = <any>null;
            }
        }
    }

    static fromJS(data: any): InterestTopic {
        data = typeof data === 'object' ? data : {};
        let result = new InterestTopic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["ParentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["ProfessionType"] = this.professionType ? this.professionType.toJSON() : <any>null;
        if (Array.isArray(this.interestTopicTranslation)) {
            data["InterestTopicTranslation"] = [];
            for (let item of this.interestTopicTranslation)
                data["InterestTopicTranslation"].push(item.toJSON());
        }
        if (Array.isArray(this.userInterest)) {
            data["UserInterest"] = [];
            for (let item of this.userInterest)
                data["UserInterest"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInterestTopic {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    parentId?: number | null;
    professionType?: ProfessionType | null;
    interestTopicTranslation?: InterestTopicTranslation[] | null;
    userInterest?: UserInterest[] | null;
}

export class Role implements IRole {
    id?: string | null;
    name?: string | null;
    isActive?: boolean | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    userRole?: UserRole[] | null;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["PaymentTypeMapping"])) {
                this.paymentTypeMapping = [] as any;
                for (let item of _data["PaymentTypeMapping"])
                    this.paymentTypeMapping!.push(PaymentTypeMapping.fromJS(item));
            }
            else {
                this.paymentTypeMapping = <any>null;
            }
            if (Array.isArray(_data["UserRole"])) {
                this.userRole = [] as any;
                for (let item of _data["UserRole"])
                    this.userRole!.push(UserRole.fromJS(item));
            }
            else {
                this.userRole = <any>null;
            }
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.paymentTypeMapping)) {
            data["PaymentTypeMapping"] = [];
            for (let item of this.paymentTypeMapping)
                data["PaymentTypeMapping"].push(item.toJSON());
        }
        if (Array.isArray(this.userRole)) {
            data["UserRole"] = [];
            for (let item of this.userRole)
                data["UserRole"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRole {
    id?: string | null;
    name?: string | null;
    isActive?: boolean | null;
    paymentTypeMapping?: PaymentTypeMapping[] | null;
    userRole?: UserRole[] | null;
}

export class DeclarationTemplateTypeTranslation implements IDeclarationTemplateTypeTranslation {
    templateTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    declarationTemplateType?: DeclarationTemplateType | null;

    constructor(data?: IDeclarationTemplateTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.templateTypeId = _data["TemplateTypeId"] !== undefined ? _data["TemplateTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.declarationTemplateType = _data["DeclarationTemplateType"] ? DeclarationTemplateType.fromJS(_data["DeclarationTemplateType"]) : <any>null;
        }
    }

    static fromJS(data: any): DeclarationTemplateTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new DeclarationTemplateTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TemplateTypeId"] = this.templateTypeId !== undefined ? this.templateTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["DeclarationTemplateType"] = this.declarationTemplateType ? this.declarationTemplateType.toJSON() : <any>null;
        return data;
    }
}

export interface IDeclarationTemplateTypeTranslation {
    templateTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    declarationTemplateType?: DeclarationTemplateType | null;
}

export class EventFeeGroup implements IEventFeeGroup {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventFeeType?: EventFeeType[] | null;
    vATHead?: VATHead[] | null;

    constructor(data?: IEventFeeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventFeeType"])) {
                this.eventFeeType = [] as any;
                for (let item of _data["EventFeeType"])
                    this.eventFeeType!.push(EventFeeType.fromJS(item));
            }
            else {
                this.eventFeeType = <any>null;
            }
            if (Array.isArray(_data["VATHead"])) {
                this.vATHead = [] as any;
                for (let item of _data["VATHead"])
                    this.vATHead!.push(VATHead.fromJS(item));
            }
            else {
                this.vATHead = <any>null;
            }
        }
    }

    static fromJS(data: any): EventFeeGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventFeeType)) {
            data["EventFeeType"] = [];
            for (let item of this.eventFeeType)
                data["EventFeeType"].push(item.toJSON());
        }
        if (Array.isArray(this.vATHead)) {
            data["VATHead"] = [];
            for (let item of this.vATHead)
                data["VATHead"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventFeeGroup {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    eventFeeType?: EventFeeType[] | null;
    vATHead?: VATHead[] | null;
}

export class EventRegistrationStatusTranslation implements IEventRegistrationStatusTranslation {
    eventRegistrationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventRegistrationStatus?: EventRegistrationStatus | null;
    language?: Language | null;

    constructor(data?: IEventRegistrationStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventRegistrationStatusId = _data["EventRegistrationStatusId"] !== undefined ? _data["EventRegistrationStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.eventRegistrationStatus = _data["EventRegistrationStatus"] ? EventRegistrationStatus.fromJS(_data["EventRegistrationStatus"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): EventRegistrationStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EventRegistrationStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventRegistrationStatusId"] = this.eventRegistrationStatusId !== undefined ? this.eventRegistrationStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["EventRegistrationStatus"] = this.eventRegistrationStatus ? this.eventRegistrationStatus.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IEventRegistrationStatusTranslation {
    eventRegistrationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventRegistrationStatus?: EventRegistrationStatus | null;
    language?: Language | null;
}

export class VATDetail implements IVATDetail {
    id?: number | null;
    vATHeadId?: number | null;
    vatPercentage?: number | null;
    effectiveFrom?: Date | null;
    effectiveTo?: Date | null;
    invoiceTemplate?: string | null;
    displayCustomerVatNo?: boolean | null;
    vatRegistrationNo?: string | null;
    requireGBPValues?: boolean | null;
    billingOrganisationId?: number | null;
    statement?: string | null;
    shortCode?: string | null;
    paymentDemand?: PaymentDemand[] | null;
    vATHead?: VATHead | null;

    constructor(data?: IVATDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.vATHeadId = _data["VATHeadId"] !== undefined ? _data["VATHeadId"] : <any>null;
            this.vatPercentage = _data["VatPercentage"] !== undefined ? _data["VatPercentage"] : <any>null;
            this.effectiveFrom = _data["EffectiveFrom"] ? new Date(_data["EffectiveFrom"].toString()) : <any>null;
            this.effectiveTo = _data["EffectiveTo"] ? new Date(_data["EffectiveTo"].toString()) : <any>null;
            this.invoiceTemplate = _data["InvoiceTemplate"] !== undefined ? _data["InvoiceTemplate"] : <any>null;
            this.displayCustomerVatNo = _data["DisplayCustomerVatNo"] !== undefined ? _data["DisplayCustomerVatNo"] : <any>null;
            this.vatRegistrationNo = _data["VatRegistrationNo"] !== undefined ? _data["VatRegistrationNo"] : <any>null;
            this.requireGBPValues = _data["RequireGBPValues"] !== undefined ? _data["RequireGBPValues"] : <any>null;
            this.billingOrganisationId = _data["BillingOrganisationId"] !== undefined ? _data["BillingOrganisationId"] : <any>null;
            this.statement = _data["Statement"] !== undefined ? _data["Statement"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            if (Array.isArray(_data["PaymentDemand"])) {
                this.paymentDemand = [] as any;
                for (let item of _data["PaymentDemand"])
                    this.paymentDemand!.push(PaymentDemand.fromJS(item));
            }
            else {
                this.paymentDemand = <any>null;
            }
            this.vATHead = _data["VATHead"] ? VATHead.fromJS(_data["VATHead"]) : <any>null;
        }
    }

    static fromJS(data: any): VATDetail {
        data = typeof data === 'object' ? data : {};
        let result = new VATDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["VATHeadId"] = this.vATHeadId !== undefined ? this.vATHeadId : <any>null;
        data["VatPercentage"] = this.vatPercentage !== undefined ? this.vatPercentage : <any>null;
        data["EffectiveFrom"] = this.effectiveFrom ? this.effectiveFrom.toISOString() : <any>null;
        data["EffectiveTo"] = this.effectiveTo ? this.effectiveTo.toISOString() : <any>null;
        data["InvoiceTemplate"] = this.invoiceTemplate !== undefined ? this.invoiceTemplate : <any>null;
        data["DisplayCustomerVatNo"] = this.displayCustomerVatNo !== undefined ? this.displayCustomerVatNo : <any>null;
        data["VatRegistrationNo"] = this.vatRegistrationNo !== undefined ? this.vatRegistrationNo : <any>null;
        data["RequireGBPValues"] = this.requireGBPValues !== undefined ? this.requireGBPValues : <any>null;
        data["BillingOrganisationId"] = this.billingOrganisationId !== undefined ? this.billingOrganisationId : <any>null;
        data["Statement"] = this.statement !== undefined ? this.statement : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        if (Array.isArray(this.paymentDemand)) {
            data["PaymentDemand"] = [];
            for (let item of this.paymentDemand)
                data["PaymentDemand"].push(item.toJSON());
        }
        data["VATHead"] = this.vATHead ? this.vATHead.toJSON() : <any>null;
        return data;
    }
}

export interface IVATDetail {
    id?: number | null;
    vATHeadId?: number | null;
    vatPercentage?: number | null;
    effectiveFrom?: Date | null;
    effectiveTo?: Date | null;
    invoiceTemplate?: string | null;
    displayCustomerVatNo?: boolean | null;
    vatRegistrationNo?: string | null;
    requireGBPValues?: boolean | null;
    billingOrganisationId?: number | null;
    statement?: string | null;
    shortCode?: string | null;
    paymentDemand?: PaymentDemand[] | null;
    vATHead?: VATHead | null;
}

export class PaymentGatewayCurrency implements IPaymentGatewayCurrency {
    id?: number | null;
    paymentGatewayId?: number | null;
    currencyId?: number | null;
    isActive?: boolean | null;
    currency?: Currency | null;
    paymentGateway?: PaymentGateway | null;

    constructor(data?: IPaymentGatewayCurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.paymentGatewayId = _data["PaymentGatewayId"] !== undefined ? _data["PaymentGatewayId"] : <any>null;
            this.currencyId = _data["CurrencyId"] !== undefined ? _data["CurrencyId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.currency = _data["Currency"] ? Currency.fromJS(_data["Currency"]) : <any>null;
            this.paymentGateway = _data["PaymentGateway"] ? PaymentGateway.fromJS(_data["PaymentGateway"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentGatewayCurrency {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentGatewayCurrency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["PaymentGatewayId"] = this.paymentGatewayId !== undefined ? this.paymentGatewayId : <any>null;
        data["CurrencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["Currency"] = this.currency ? this.currency.toJSON() : <any>null;
        data["PaymentGateway"] = this.paymentGateway ? this.paymentGateway.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentGatewayCurrency {
    id?: number | null;
    paymentGatewayId?: number | null;
    currencyId?: number | null;
    isActive?: boolean | null;
    currency?: Currency | null;
    paymentGateway?: PaymentGateway | null;
}

export class CommitteeGroup implements ICommitteeGroup {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    committeeRole?: CommitteeRole[] | null;

    constructor(data?: ICommitteeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["CommitteeRole"])) {
                this.committeeRole = [] as any;
                for (let item of _data["CommitteeRole"])
                    this.committeeRole!.push(CommitteeRole.fromJS(item));
            }
            else {
                this.committeeRole = <any>null;
            }
        }
    }

    static fromJS(data: any): CommitteeGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CommitteeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.committeeRole)) {
            data["CommitteeRole"] = [];
            for (let item of this.committeeRole)
                data["CommitteeRole"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICommitteeGroup {
    id?: number | null;
    name?: string | null;
    description?: string | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    isActive?: boolean | null;
    committeeRole?: CommitteeRole[] | null;
}

export class PaymentTypeTranslation implements IPaymentTypeTranslation {
    paymentTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    description?: string | null;
    language?: Language | null;
    paymentType?: PaymentType | null;

    constructor(data?: IPaymentTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.paymentType = _data["PaymentType"] ? PaymentType.fromJS(_data["PaymentType"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["PaymentType"] = this.paymentType ? this.paymentType.toJSON() : <any>null;
        return data;
    }
}

export interface IPaymentTypeTranslation {
    paymentTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    description?: string | null;
    language?: Language | null;
    paymentType?: PaymentType | null;
}

export class MembershipStatusTranslation implements IMembershipStatusTranslation {
    memberShipStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    membershipStatus?: MembershipStatus | null;

    constructor(data?: IMembershipStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberShipStatusId = _data["MemberShipStatusId"] !== undefined ? _data["MemberShipStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.membershipStatus = _data["MembershipStatus"] ? MembershipStatus.fromJS(_data["MembershipStatus"]) : <any>null;
        }
    }

    static fromJS(data: any): MembershipStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberShipStatusId"] = this.memberShipStatusId !== undefined ? this.memberShipStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["MembershipStatus"] = this.membershipStatus ? this.membershipStatus.toJSON() : <any>null;
        return data;
    }
}

export interface IMembershipStatusTranslation {
    memberShipStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    membershipStatus?: MembershipStatus | null;
}

export class EmailStatusTranslation implements IEmailStatusTranslation {
    emailStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    emailStatus?: EmailStatus | null;
    language?: Language | null;

    constructor(data?: IEmailStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailStatusId = _data["EmailStatusId"] !== undefined ? _data["EmailStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.emailStatus = _data["EmailStatus"] ? EmailStatus.fromJS(_data["EmailStatus"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): EmailStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EmailStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmailStatusId"] = this.emailStatusId !== undefined ? this.emailStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["EmailStatus"] = this.emailStatus ? this.emailStatus.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IEmailStatusTranslation {
    emailStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    emailStatus?: EmailStatus | null;
    language?: Language | null;
}

export class AddressTypeTranslation implements IAddressTypeTranslation {
    addressTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    addressType?: AddressType | null;
    language?: Language | null;

    constructor(data?: IAddressTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressTypeId = _data["AddressTypeId"] !== undefined ? _data["AddressTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.addressType = _data["AddressType"] ? AddressType.fromJS(_data["AddressType"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): AddressTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new AddressTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AddressTypeId"] = this.addressTypeId !== undefined ? this.addressTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["AddressType"] = this.addressType ? this.addressType.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IAddressTypeTranslation {
    addressTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    addressType?: AddressType | null;
    language?: Language | null;
}

export class AffiliationStatusTranslation implements IAffiliationStatusTranslation {
    affliationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    affiliationStatus?: AffiliationStatus | null;
    language?: Language | null;

    constructor(data?: IAffiliationStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.affliationStatusId = _data["AffliationStatusId"] !== undefined ? _data["AffliationStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.affiliationStatus = _data["AffiliationStatus"] ? AffiliationStatus.fromJS(_data["AffiliationStatus"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): AffiliationStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new AffiliationStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AffliationStatusId"] = this.affliationStatusId !== undefined ? this.affliationStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["AffiliationStatus"] = this.affiliationStatus ? this.affiliationStatus.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IAffiliationStatusTranslation {
    affliationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    affiliationStatus?: AffiliationStatus | null;
    language?: Language | null;
}

export class ApplicationStatusTranslation implements IApplicationStatusTranslation {
    applicationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    applicationStatus?: ApplicationStatus | null;
    language?: Language | null;

    constructor(data?: IApplicationStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicationStatusId = _data["ApplicationStatusId"] !== undefined ? _data["ApplicationStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.applicationStatus = _data["ApplicationStatus"] ? ApplicationStatus.fromJS(_data["ApplicationStatus"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): ApplicationStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ApplicationStatusId"] = this.applicationStatusId !== undefined ? this.applicationStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["ApplicationStatus"] = this.applicationStatus ? this.applicationStatus.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IApplicationStatusTranslation {
    applicationStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    applicationStatus?: ApplicationStatus | null;
    language?: Language | null;
}

export class CountryTranslation implements ICountryTranslation {
    countryId?: number | null;
    languageId?: number | null;
    text?: string | null;
    nationality?: string | null;
    country?: Country | null;
    language?: Language | null;

    constructor(data?: ICountryTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.nationality = _data["Nationality"] !== undefined ? _data["Nationality"] : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): CountryTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new CountryTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Nationality"] = this.nationality !== undefined ? this.nationality : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface ICountryTranslation {
    countryId?: number | null;
    languageId?: number | null;
    text?: string | null;
    nationality?: string | null;
    country?: Country | null;
    language?: Language | null;
}

export class EventStatusTranslation implements IEventStatusTranslation {
    eventStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventStatus?: EventStatus | null;
    language?: Language | null;

    constructor(data?: IEventStatusTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventStatusId = _data["EventStatusId"] !== undefined ? _data["EventStatusId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.eventStatus = _data["EventStatus"] ? EventStatus.fromJS(_data["EventStatus"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): EventStatusTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EventStatusTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventStatusId"] = this.eventStatusId !== undefined ? this.eventStatusId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["EventStatus"] = this.eventStatus ? this.eventStatus.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IEventStatusTranslation {
    eventStatusId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventStatus?: EventStatus | null;
    language?: Language | null;
}

export class EventTypeTranslation implements IEventTypeTranslation {
    eventTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventType?: EventType | null;
    language?: Language | null;

    constructor(data?: IEventTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventTypeId = _data["EventTypeId"] !== undefined ? _data["EventTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.eventType = _data["EventType"] ? EventType.fromJS(_data["EventType"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): EventTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new EventTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventTypeId"] = this.eventTypeId !== undefined ? this.eventTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["EventType"] = this.eventType ? this.eventType.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IEventTypeTranslation {
    eventTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    eventType?: EventType | null;
    language?: Language | null;
}

export class InterestTopicTranslation implements IInterestTopicTranslation {
    interestTopicId?: number | null;
    languageId?: number | null;
    text?: string | null;
    interestTopic?: InterestTopic | null;
    language?: Language | null;

    constructor(data?: IInterestTopicTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.interestTopicId = _data["InterestTopicId"] !== undefined ? _data["InterestTopicId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.interestTopic = _data["InterestTopic"] ? InterestTopic.fromJS(_data["InterestTopic"]) : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
        }
    }

    static fromJS(data: any): InterestTopicTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new InterestTopicTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InterestTopicId"] = this.interestTopicId !== undefined ? this.interestTopicId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["InterestTopic"] = this.interestTopic ? this.interestTopic.toJSON() : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        return data;
    }
}

export interface IInterestTopicTranslation {
    interestTopicId?: number | null;
    languageId?: number | null;
    text?: string | null;
    interestTopic?: InterestTopic | null;
    language?: Language | null;
}

export class MMCTSRoleTranslation implements IMMCTSRoleTranslation {
    mMCTSRoleId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    mMCTSRole?: MMCTSRole | null;

    constructor(data?: IMMCTSRoleTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mMCTSRoleId = _data["MMCTSRoleId"] !== undefined ? _data["MMCTSRoleId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.mMCTSRole = _data["MMCTSRole"] ? MMCTSRole.fromJS(_data["MMCTSRole"]) : <any>null;
        }
    }

    static fromJS(data: any): MMCTSRoleTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new MMCTSRoleTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MMCTSRoleId"] = this.mMCTSRoleId !== undefined ? this.mMCTSRoleId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["MMCTSRole"] = this.mMCTSRole ? this.mMCTSRole.toJSON() : <any>null;
        return data;
    }
}

export interface IMMCTSRoleTranslation {
    mMCTSRoleId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    mMCTSRole?: MMCTSRole | null;
}

export class PersonTitleTranslation implements IPersonTitleTranslation {
    personTitleId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    personTitle?: PersonTitle | null;

    constructor(data?: IPersonTitleTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personTitleId = _data["PersonTitleId"] !== undefined ? _data["PersonTitleId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.personTitle = _data["PersonTitle"] ? PersonTitle.fromJS(_data["PersonTitle"]) : <any>null;
        }
    }

    static fromJS(data: any): PersonTitleTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new PersonTitleTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PersonTitleId"] = this.personTitleId !== undefined ? this.personTitleId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["PersonTitle"] = this.personTitle ? this.personTitle.toJSON() : <any>null;
        return data;
    }
}

export interface IPersonTitleTranslation {
    personTitleId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    personTitle?: PersonTitle | null;
}

export class ProfessionTypeTranslation implements IProfessionTypeTranslation {
    professionTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    professionType?: ProfessionType | null;

    constructor(data?: IProfessionTypeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.professionTypeId = _data["ProfessionTypeId"] !== undefined ? _data["ProfessionTypeId"] : <any>null;
            this.languageId = _data["LanguageId"] !== undefined ? _data["LanguageId"] : <any>null;
            this.text = _data["Text"] !== undefined ? _data["Text"] : <any>null;
            this.language = _data["Language"] ? Language.fromJS(_data["Language"]) : <any>null;
            this.professionType = _data["ProfessionType"] ? ProfessionType.fromJS(_data["ProfessionType"]) : <any>null;
        }
    }

    static fromJS(data: any): ProfessionTypeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionTypeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ProfessionTypeId"] = this.professionTypeId !== undefined ? this.professionTypeId : <any>null;
        data["LanguageId"] = this.languageId !== undefined ? this.languageId : <any>null;
        data["Text"] = this.text !== undefined ? this.text : <any>null;
        data["Language"] = this.language ? this.language.toJSON() : <any>null;
        data["ProfessionType"] = this.professionType ? this.professionType.toJSON() : <any>null;
        return data;
    }
}

export interface IProfessionTypeTranslation {
    professionTypeId?: number | null;
    languageId?: number | null;
    text?: string | null;
    language?: Language | null;
    professionType?: ProfessionType | null;
}

export class VATHead implements IVATHead {
    id?: number | null;
    venueCountryId?: number | null;
    feeGroupId?: number | null;
    hasValidEUVatNo?: boolean | null;
    customerDomicileId?: number | null;
    country?: Country | null;
    customerDomicile?: CustomerDomicile | null;
    eventFeeGroup?: EventFeeGroup | null;
    vATDetail?: VATDetail[] | null;

    constructor(data?: IVATHead) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.venueCountryId = _data["VenueCountryId"] !== undefined ? _data["VenueCountryId"] : <any>null;
            this.feeGroupId = _data["FeeGroupId"] !== undefined ? _data["FeeGroupId"] : <any>null;
            this.hasValidEUVatNo = _data["HasValidEUVatNo"] !== undefined ? _data["HasValidEUVatNo"] : <any>null;
            this.customerDomicileId = _data["CustomerDomicileId"] !== undefined ? _data["CustomerDomicileId"] : <any>null;
            this.country = _data["Country"] ? Country.fromJS(_data["Country"]) : <any>null;
            this.customerDomicile = _data["CustomerDomicile"] ? CustomerDomicile.fromJS(_data["CustomerDomicile"]) : <any>null;
            this.eventFeeGroup = _data["EventFeeGroup"] ? EventFeeGroup.fromJS(_data["EventFeeGroup"]) : <any>null;
            if (Array.isArray(_data["VATDetail"])) {
                this.vATDetail = [] as any;
                for (let item of _data["VATDetail"])
                    this.vATDetail!.push(VATDetail.fromJS(item));
            }
            else {
                this.vATDetail = <any>null;
            }
        }
    }

    static fromJS(data: any): VATHead {
        data = typeof data === 'object' ? data : {};
        let result = new VATHead();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["VenueCountryId"] = this.venueCountryId !== undefined ? this.venueCountryId : <any>null;
        data["FeeGroupId"] = this.feeGroupId !== undefined ? this.feeGroupId : <any>null;
        data["HasValidEUVatNo"] = this.hasValidEUVatNo !== undefined ? this.hasValidEUVatNo : <any>null;
        data["CustomerDomicileId"] = this.customerDomicileId !== undefined ? this.customerDomicileId : <any>null;
        data["Country"] = this.country ? this.country.toJSON() : <any>null;
        data["CustomerDomicile"] = this.customerDomicile ? this.customerDomicile.toJSON() : <any>null;
        data["EventFeeGroup"] = this.eventFeeGroup ? this.eventFeeGroup.toJSON() : <any>null;
        if (Array.isArray(this.vATDetail)) {
            data["VATDetail"] = [];
            for (let item of this.vATDetail)
                data["VATDetail"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVATHead {
    id?: number | null;
    venueCountryId?: number | null;
    feeGroupId?: number | null;
    hasValidEUVatNo?: boolean | null;
    customerDomicileId?: number | null;
    country?: Country | null;
    customerDomicile?: CustomerDomicile | null;
    eventFeeGroup?: EventFeeGroup | null;
    vATDetail?: VATDetail[] | null;
}

export class SessionType implements ISessionType {
    id?: number | null;
    name?: string | null;
    eventSession?: EventSession[] | null;

    constructor(data?: ISessionType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["EventSession"])) {
                this.eventSession = [] as any;
                for (let item of _data["EventSession"])
                    this.eventSession!.push(EventSession.fromJS(item));
            }
            else {
                this.eventSession = <any>null;
            }
        }
    }

    static fromJS(data: any): SessionType {
        data = typeof data === 'object' ? data : {};
        let result = new SessionType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.eventSession)) {
            data["EventSession"] = [];
            for (let item of this.eventSession)
                data["EventSession"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISessionType {
    id?: number | null;
    name?: string | null;
    eventSession?: EventSession[] | null;
}

export class PaymentGatewayType implements IPaymentGatewayType {
    id?: number | null;
    name?: string | null;
    paymentGateway?: PaymentGateway[] | null;

    constructor(data?: IPaymentGatewayType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["PaymentGateway"])) {
                this.paymentGateway = [] as any;
                for (let item of _data["PaymentGateway"])
                    this.paymentGateway!.push(PaymentGateway.fromJS(item));
            }
            else {
                this.paymentGateway = <any>null;
            }
        }
    }

    static fromJS(data: any): PaymentGatewayType {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentGatewayType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.paymentGateway)) {
            data["PaymentGateway"] = [];
            for (let item of this.paymentGateway)
                data["PaymentGateway"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentGatewayType {
    id?: number | null;
    name?: string | null;
    paymentGateway?: PaymentGateway[] | null;
}

export class ProfessionType implements IProfessionType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    interestTopic?: InterestTopic[] | null;
    professionTypeTranslation?: ProfessionTypeTranslation[] | null;

    constructor(data?: IProfessionType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["InterestTopic"])) {
                this.interestTopic = [] as any;
                for (let item of _data["InterestTopic"])
                    this.interestTopic!.push(InterestTopic.fromJS(item));
            }
            else {
                this.interestTopic = <any>null;
            }
            if (Array.isArray(_data["ProfessionTypeTranslation"])) {
                this.professionTypeTranslation = [] as any;
                for (let item of _data["ProfessionTypeTranslation"])
                    this.professionTypeTranslation!.push(ProfessionTypeTranslation.fromJS(item));
            }
            else {
                this.professionTypeTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): ProfessionType {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.interestTopic)) {
            data["InterestTopic"] = [];
            for (let item of this.interestTopic)
                data["InterestTopic"].push(item.toJSON());
        }
        if (Array.isArray(this.professionTypeTranslation)) {
            data["ProfessionTypeTranslation"] = [];
            for (let item of this.professionTypeTranslation)
                data["ProfessionTypeTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProfessionType {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
    interestTopic?: InterestTopic[] | null;
    professionTypeTranslation?: ProfessionTypeTranslation[] | null;
}

export class MMCTSRole implements IMMCTSRole {
    id?: number | null;
    name?: string | null;
    mMCTSRoleTranslation?: MMCTSRoleTranslation[] | null;

    constructor(data?: IMMCTSRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["MMCTSRoleTranslation"])) {
                this.mMCTSRoleTranslation = [] as any;
                for (let item of _data["MMCTSRoleTranslation"])
                    this.mMCTSRoleTranslation!.push(MMCTSRoleTranslation.fromJS(item));
            }
            else {
                this.mMCTSRoleTranslation = <any>null;
            }
        }
    }

    static fromJS(data: any): MMCTSRole {
        data = typeof data === 'object' ? data : {};
        let result = new MMCTSRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.mMCTSRoleTranslation)) {
            data["MMCTSRoleTranslation"] = [];
            for (let item of this.mMCTSRoleTranslation)
                data["MMCTSRoleTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMMCTSRole {
    id?: number | null;
    name?: string | null;
    mMCTSRoleTranslation?: MMCTSRoleTranslation[] | null;
}

export class CustomerDomicile implements ICustomerDomicile {
    id?: number | null;
    name?: string | null;
    vATHead?: VATHead[] | null;

    constructor(data?: ICustomerDomicile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["VATHead"])) {
                this.vATHead = [] as any;
                for (let item of _data["VATHead"])
                    this.vATHead!.push(VATHead.fromJS(item));
            }
            else {
                this.vATHead = <any>null;
            }
        }
    }

    static fromJS(data: any): CustomerDomicile {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDomicile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.vATHead)) {
            data["VATHead"] = [];
            for (let item of this.vATHead)
                data["VATHead"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomerDomicile {
    id?: number | null;
    name?: string | null;
    vATHead?: VATHead[] | null;
}

export class MGetEventsDTO implements IMGetEventsDTO {
    events?: MEventDTO[] | null;
    total?: number | null;
    hasMore?: boolean | null;

    constructor(data?: IMGetEventsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Events"])) {
                this.events = [] as any;
                for (let item of _data["Events"])
                    this.events!.push(MEventDTO.fromJS(item));
            }
            else {
                this.events = <any>null;
            }
            this.total = _data["Total"] !== undefined ? _data["Total"] : <any>null;
            this.hasMore = _data["HasMore"] !== undefined ? _data["HasMore"] : <any>null;
        }
    }

    static fromJS(data: any): MGetEventsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MGetEventsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.events)) {
            data["Events"] = [];
            for (let item of this.events)
                data["Events"].push(item.toJSON());
        }
        data["Total"] = this.total !== undefined ? this.total : <any>null;
        data["HasMore"] = this.hasMore !== undefined ? this.hasMore : <any>null;
        return data;
    }
}

export interface IMGetEventsDTO {
    events?: MEventDTO[] | null;
    total?: number | null;
    hasMore?: boolean | null;
}

export class MEventDTO implements IMEventDTO {
    id?: number | null;
    name?: string | null;
    country?: string | null;
    venue?: string | null;
    from?: Date | null;
    to?: Date | null;
    hasImage?: boolean | null;
    starred?: boolean | null;
    priority?: number | null;
    isRegistered?: boolean | null;
    isArtifacts?: boolean | null;
    isArtifactApproved?: boolean | null;
    isTicketAvailable?: boolean | null;

    constructor(data?: IMEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.country = _data["Country"] !== undefined ? _data["Country"] : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.from = _data["From"] ? new Date(_data["From"].toString()) : <any>null;
            this.to = _data["To"] ? new Date(_data["To"].toString()) : <any>null;
            this.hasImage = _data["HasImage"] !== undefined ? _data["HasImage"] : <any>null;
            this.starred = _data["Starred"] !== undefined ? _data["Starred"] : <any>null;
            this.priority = _data["Priority"] !== undefined ? _data["Priority"] : <any>null;
            this.isRegistered = _data["IsRegistered"] !== undefined ? _data["IsRegistered"] : <any>null;
            this.isArtifacts = _data["IsArtifacts"] !== undefined ? _data["IsArtifacts"] : <any>null;
            this.isArtifactApproved = _data["IsArtifactApproved"] !== undefined ? _data["IsArtifactApproved"] : <any>null;
            this.isTicketAvailable = _data["IsTicketAvailable"] !== undefined ? _data["IsTicketAvailable"] : <any>null;
        }
    }

    static fromJS(data: any): MEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Country"] = this.country !== undefined ? this.country : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["From"] = this.from ? this.from.toISOString() : <any>null;
        data["To"] = this.to ? this.to.toISOString() : <any>null;
        data["HasImage"] = this.hasImage !== undefined ? this.hasImage : <any>null;
        data["Starred"] = this.starred !== undefined ? this.starred : <any>null;
        data["Priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["IsRegistered"] = this.isRegistered !== undefined ? this.isRegistered : <any>null;
        data["IsArtifacts"] = this.isArtifacts !== undefined ? this.isArtifacts : <any>null;
        data["IsArtifactApproved"] = this.isArtifactApproved !== undefined ? this.isArtifactApproved : <any>null;
        data["IsTicketAvailable"] = this.isTicketAvailable !== undefined ? this.isTicketAvailable : <any>null;
        return data;
    }
}

export interface IMEventDTO {
    id?: number | null;
    name?: string | null;
    country?: string | null;
    venue?: string | null;
    from?: Date | null;
    to?: Date | null;
    hasImage?: boolean | null;
    starred?: boolean | null;
    priority?: number | null;
    isRegistered?: boolean | null;
    isArtifacts?: boolean | null;
    isArtifactApproved?: boolean | null;
    isTicketAvailable?: boolean | null;
}

export class InitialDataIndividualDTO implements IInitialDataIndividualDTO {
    isValidVAT?: boolean | null;
    hasGroupSummary?: boolean | null;
    billingAddress?: UserAddressDTO[] | null;
    eventId?: number | null;
    userId?: string | null;
    event?: EventDTO | null;
    countries?: CountryDTO[] | null;
    isRegisteredAlready?: boolean | null;
    isGroupRegisteredAlready?: boolean | null;
    isRegisteredAlreadybyOther?: boolean | null;
    isRegisteredAlreadyWithOutCancel?: boolean | null;
    isRegisteredAlreadybyOtherWithOutCancel?: boolean | null;
    bankDetail?: BankDetailDTO | null;
    paymentType?: PaymentTypeDTO[] | null;
    paymentDemand?: PaymentDemandMinimumDTO[] | null;
    paymentTypeMapping?: PaymentTypeMappingDTO[] | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;
    feeConfirmationFileSize?: number | null;
    feeConfirmationFileFormats?: string | null;
    artifactsUploaded?: boolean | null;
    artifactsEnabled?: boolean | null;
    artifactsConfiguration?: ArtifactsConfiguration | null;

    constructor(data?: IInitialDataIndividualDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValidVAT = _data["IsValidVAT"] !== undefined ? _data["IsValidVAT"] : <any>null;
            this.hasGroupSummary = _data["HasGroupSummary"] !== undefined ? _data["HasGroupSummary"] : <any>null;
            if (Array.isArray(_data["BillingAddress"])) {
                this.billingAddress = [] as any;
                for (let item of _data["BillingAddress"])
                    this.billingAddress!.push(UserAddressDTO.fromJS(item));
            }
            else {
                this.billingAddress = <any>null;
            }
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.event = _data["Event"] ? EventDTO.fromJS(_data["Event"]) : <any>null;
            if (Array.isArray(_data["Countries"])) {
                this.countries = [] as any;
                for (let item of _data["Countries"])
                    this.countries!.push(CountryDTO.fromJS(item));
            }
            else {
                this.countries = <any>null;
            }
            this.isRegisteredAlready = _data["IsRegisteredAlready"] !== undefined ? _data["IsRegisteredAlready"] : <any>null;
            this.isGroupRegisteredAlready = _data["IsGroupRegisteredAlready"] !== undefined ? _data["IsGroupRegisteredAlready"] : <any>null;
            this.isRegisteredAlreadybyOther = _data["IsRegisteredAlreadybyOther"] !== undefined ? _data["IsRegisteredAlreadybyOther"] : <any>null;
            this.isRegisteredAlreadyWithOutCancel = _data["IsRegisteredAlreadyWithOutCancel"] !== undefined ? _data["IsRegisteredAlreadyWithOutCancel"] : <any>null;
            this.isRegisteredAlreadybyOtherWithOutCancel = _data["IsRegisteredAlreadybyOtherWithOutCancel"] !== undefined ? _data["IsRegisteredAlreadybyOtherWithOutCancel"] : <any>null;
            this.bankDetail = _data["bankDetail"] ? BankDetailDTO.fromJS(_data["bankDetail"]) : <any>null;
            if (Array.isArray(_data["PaymentType"])) {
                this.paymentType = [] as any;
                for (let item of _data["PaymentType"])
                    this.paymentType!.push(PaymentTypeDTO.fromJS(item));
            }
            else {
                this.paymentType = <any>null;
            }
            if (Array.isArray(_data["PaymentDemand"])) {
                this.paymentDemand = [] as any;
                for (let item of _data["PaymentDemand"])
                    this.paymentDemand!.push(PaymentDemandMinimumDTO.fromJS(item));
            }
            else {
                this.paymentDemand = <any>null;
            }
            if (Array.isArray(_data["PaymentTypeMapping"])) {
                this.paymentTypeMapping = [] as any;
                for (let item of _data["PaymentTypeMapping"])
                    this.paymentTypeMapping!.push(PaymentTypeMappingDTO.fromJS(item));
            }
            else {
                this.paymentTypeMapping = <any>null;
            }
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.isMultiVATShortCode = _data["IsMultiVATShortCode"] !== undefined ? _data["IsMultiVATShortCode"] : <any>null;
            this.feeConfirmationFileSize = _data["FeeConfirmationFileSize"] !== undefined ? _data["FeeConfirmationFileSize"] : <any>null;
            this.feeConfirmationFileFormats = _data["FeeConfirmationFileFormats"] !== undefined ? _data["FeeConfirmationFileFormats"] : <any>null;
            this.artifactsUploaded = _data["ArtifactsUploaded"] !== undefined ? _data["ArtifactsUploaded"] : <any>null;
            this.artifactsEnabled = _data["ArtifactsEnabled"] !== undefined ? _data["ArtifactsEnabled"] : <any>null;
            this.artifactsConfiguration = _data["ArtifactsConfiguration"] ? ArtifactsConfiguration.fromJS(_data["ArtifactsConfiguration"]) : <any>null;
        }
    }

    static fromJS(data: any): InitialDataIndividualDTO {
        data = typeof data === 'object' ? data : {};
        let result = new InitialDataIndividualDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsValidVAT"] = this.isValidVAT !== undefined ? this.isValidVAT : <any>null;
        data["HasGroupSummary"] = this.hasGroupSummary !== undefined ? this.hasGroupSummary : <any>null;
        if (Array.isArray(this.billingAddress)) {
            data["BillingAddress"] = [];
            for (let item of this.billingAddress)
                data["BillingAddress"].push(item.toJSON());
        }
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        if (Array.isArray(this.countries)) {
            data["Countries"] = [];
            for (let item of this.countries)
                data["Countries"].push(item.toJSON());
        }
        data["IsRegisteredAlready"] = this.isRegisteredAlready !== undefined ? this.isRegisteredAlready : <any>null;
        data["IsGroupRegisteredAlready"] = this.isGroupRegisteredAlready !== undefined ? this.isGroupRegisteredAlready : <any>null;
        data["IsRegisteredAlreadybyOther"] = this.isRegisteredAlreadybyOther !== undefined ? this.isRegisteredAlreadybyOther : <any>null;
        data["IsRegisteredAlreadyWithOutCancel"] = this.isRegisteredAlreadyWithOutCancel !== undefined ? this.isRegisteredAlreadyWithOutCancel : <any>null;
        data["IsRegisteredAlreadybyOtherWithOutCancel"] = this.isRegisteredAlreadybyOtherWithOutCancel !== undefined ? this.isRegisteredAlreadybyOtherWithOutCancel : <any>null;
        data["bankDetail"] = this.bankDetail ? this.bankDetail.toJSON() : <any>null;
        if (Array.isArray(this.paymentType)) {
            data["PaymentType"] = [];
            for (let item of this.paymentType)
                data["PaymentType"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentDemand)) {
            data["PaymentDemand"] = [];
            for (let item of this.paymentDemand)
                data["PaymentDemand"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTypeMapping)) {
            data["PaymentTypeMapping"] = [];
            for (let item of this.paymentTypeMapping)
                data["PaymentTypeMapping"].push(item.toJSON());
        }
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["IsMultiVATShortCode"] = this.isMultiVATShortCode !== undefined ? this.isMultiVATShortCode : <any>null;
        data["FeeConfirmationFileSize"] = this.feeConfirmationFileSize !== undefined ? this.feeConfirmationFileSize : <any>null;
        data["FeeConfirmationFileFormats"] = this.feeConfirmationFileFormats !== undefined ? this.feeConfirmationFileFormats : <any>null;
        data["ArtifactsUploaded"] = this.artifactsUploaded !== undefined ? this.artifactsUploaded : <any>null;
        data["ArtifactsEnabled"] = this.artifactsEnabled !== undefined ? this.artifactsEnabled : <any>null;
        data["ArtifactsConfiguration"] = this.artifactsConfiguration ? this.artifactsConfiguration.toJSON() : <any>null;
        return data;
    }
}

export interface IInitialDataIndividualDTO {
    isValidVAT?: boolean | null;
    hasGroupSummary?: boolean | null;
    billingAddress?: UserAddressDTO[] | null;
    eventId?: number | null;
    userId?: string | null;
    event?: EventDTO | null;
    countries?: CountryDTO[] | null;
    isRegisteredAlready?: boolean | null;
    isGroupRegisteredAlready?: boolean | null;
    isRegisteredAlreadybyOther?: boolean | null;
    isRegisteredAlreadyWithOutCancel?: boolean | null;
    isRegisteredAlreadybyOtherWithOutCancel?: boolean | null;
    bankDetail?: BankDetailDTO | null;
    paymentType?: PaymentTypeDTO[] | null;
    paymentDemand?: PaymentDemandMinimumDTO[] | null;
    paymentTypeMapping?: PaymentTypeMappingDTO[] | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;
    feeConfirmationFileSize?: number | null;
    feeConfirmationFileFormats?: string | null;
    artifactsUploaded?: boolean | null;
    artifactsEnabled?: boolean | null;
    artifactsConfiguration?: ArtifactsConfiguration | null;
}

export class UserAddressDTO implements IUserAddressDTO {
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    stateCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    companyName?: string | null;
    countryName?: string | null;
    addressId?: number | null;
    phone?: string | null;
    mobilePhone?: string | null;
    isDefault?: boolean | null;
    id?: number | null;
    vATNumber?: string | null;
    department?: string | null;
    purchaseOrder?: string | null;

    constructor(data?: IUserAddressDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.addressTypeId = _data["AddressTypeId"] !== undefined ? _data["AddressTypeId"] : <any>null;
            this.street1 = _data["Street1"] !== undefined ? _data["Street1"] : <any>null;
            this.street2 = _data["Street2"] !== undefined ? _data["Street2"] : <any>null;
            this.postalCode = _data["PostalCode"] !== undefined ? _data["PostalCode"] : <any>null;
            this.stateCode = _data["StateCode"] !== undefined ? _data["StateCode"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.stateOrProvince = _data["StateOrProvince"] !== undefined ? _data["StateOrProvince"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.companyName = _data["CompanyName"] !== undefined ? _data["CompanyName"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.addressId = _data["AddressId"] !== undefined ? _data["AddressId"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.mobilePhone = _data["MobilePhone"] !== undefined ? _data["MobilePhone"] : <any>null;
            this.isDefault = _data["IsDefault"] !== undefined ? _data["IsDefault"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.department = _data["Department"] !== undefined ? _data["Department"] : <any>null;
            this.purchaseOrder = _data["PurchaseOrder"] !== undefined ? _data["PurchaseOrder"] : <any>null;
        }
    }

    static fromJS(data: any): UserAddressDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddressDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["AddressTypeId"] = this.addressTypeId !== undefined ? this.addressTypeId : <any>null;
        data["Street1"] = this.street1 !== undefined ? this.street1 : <any>null;
        data["Street2"] = this.street2 !== undefined ? this.street2 : <any>null;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["StateOrProvince"] = this.stateOrProvince !== undefined ? this.stateOrProvince : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["CompanyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["AddressId"] = this.addressId !== undefined ? this.addressId : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["MobilePhone"] = this.mobilePhone !== undefined ? this.mobilePhone : <any>null;
        data["IsDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["Department"] = this.department !== undefined ? this.department : <any>null;
        data["PurchaseOrder"] = this.purchaseOrder !== undefined ? this.purchaseOrder : <any>null;
        return data;
    }
}

export interface IUserAddressDTO {
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    stateCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    companyName?: string | null;
    countryName?: string | null;
    addressId?: number | null;
    phone?: string | null;
    mobilePhone?: string | null;
    isDefault?: boolean | null;
    id?: number | null;
    vATNumber?: string | null;
    department?: string | null;
    purchaseOrder?: string | null;
}

export class EventDTO implements IEventDTO {
    id?: number | null;
    eventId?: number | null;
    name?: string | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    description?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    countryId?: number | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    cancelReason?: string | null;
    registrationLimit?: number | null;
    registrationCloseDate?: Date | null;
    eventStatusId?: number | null;
    isConference?: boolean | null;
    totalRegisteredCount?: number | null;
    countryCode?: string | null;
    countryName?: string | null;
    availableQuantity?: string | null;
    eventFees?: EventFeeExtendDTO[] | null;
    isGroup?: boolean | null;
    isExhibitor?: boolean | null;
    isScholarship?: boolean | null;
    registrationId?: number | null;
    termsAndConditionId?: number | null;
    termsAndCondition?: TermsAndConditionDTO | null;
    exhibitors?: number[] | null;
    isUserExhibitorRegistered?: boolean | null;
    dietaryRequirement?: string | null;
    eventType?: string | null;
    currencySymbol?: string | null;
    currencyId?: number | null;
    isExchangeRateApplicable?: boolean | null;
    exchangeRate?: number | null;
    selectedCurrencyId?: number | null;
    isFacialRecEnabled?: boolean | null;
    discountCoupon?: boolean | null;
    artifactsEnabled?: boolean | null;

    constructor(data?: IEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.eventTypeId = _data["EventTypeId"] !== undefined ? _data["EventTypeId"] : <any>null;
            this.eventCode = _data["EventCode"] !== undefined ? _data["EventCode"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>null;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>null;
            this.resourcePerson = _data["ResourcePerson"] !== undefined ? _data["ResourcePerson"] : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.venueAddress = _data["VenueAddress"] !== undefined ? _data["VenueAddress"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.ledgerCode = _data["LedgerCode"] !== undefined ? _data["LedgerCode"] : <any>null;
            this.cancelReason = _data["CancelReason"] !== undefined ? _data["CancelReason"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.registrationCloseDate = _data["RegistrationCloseDate"] ? new Date(_data["RegistrationCloseDate"].toString()) : <any>null;
            this.eventStatusId = _data["EventStatusId"] !== undefined ? _data["EventStatusId"] : <any>null;
            this.isConference = _data["IsConference"] !== undefined ? _data["IsConference"] : <any>null;
            this.totalRegisteredCount = _data["TotalRegisteredCount"] !== undefined ? _data["TotalRegisteredCount"] : <any>null;
            this.countryCode = _data["CountryCode"] !== undefined ? _data["CountryCode"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.availableQuantity = _data["AvailableQuantity"] !== undefined ? _data["AvailableQuantity"] : <any>null;
            if (Array.isArray(_data["EventFees"])) {
                this.eventFees = [] as any;
                for (let item of _data["EventFees"])
                    this.eventFees!.push(EventFeeExtendDTO.fromJS(item));
            }
            else {
                this.eventFees = <any>null;
            }
            this.isGroup = _data["IsGroup"] !== undefined ? _data["IsGroup"] : <any>null;
            this.isExhibitor = _data["IsExhibitor"] !== undefined ? _data["IsExhibitor"] : <any>null;
            this.isScholarship = _data["IsScholarship"] !== undefined ? _data["IsScholarship"] : <any>null;
            this.registrationId = _data["RegistrationId"] !== undefined ? _data["RegistrationId"] : <any>null;
            this.termsAndConditionId = _data["TermsAndConditionId"] !== undefined ? _data["TermsAndConditionId"] : <any>null;
            this.termsAndCondition = _data["TermsAndCondition"] ? TermsAndConditionDTO.fromJS(_data["TermsAndCondition"]) : <any>null;
            if (Array.isArray(_data["Exhibitors"])) {
                this.exhibitors = [] as any;
                for (let item of _data["Exhibitors"])
                    this.exhibitors!.push(item);
            }
            else {
                this.exhibitors = <any>null;
            }
            this.isUserExhibitorRegistered = _data["IsUserExhibitorRegistered"] !== undefined ? _data["IsUserExhibitorRegistered"] : <any>null;
            this.dietaryRequirement = _data["DietaryRequirement"] !== undefined ? _data["DietaryRequirement"] : <any>null;
            this.eventType = _data["EventType"] !== undefined ? _data["EventType"] : <any>null;
            this.currencySymbol = _data["CurrencySymbol"] !== undefined ? _data["CurrencySymbol"] : <any>null;
            this.currencyId = _data["CurrencyId"] !== undefined ? _data["CurrencyId"] : <any>null;
            this.isExchangeRateApplicable = _data["IsExchangeRateApplicable"] !== undefined ? _data["IsExchangeRateApplicable"] : <any>null;
            this.exchangeRate = _data["ExchangeRate"] !== undefined ? _data["ExchangeRate"] : <any>null;
            this.selectedCurrencyId = _data["SelectedCurrencyId"] !== undefined ? _data["SelectedCurrencyId"] : <any>null;
            this.isFacialRecEnabled = _data["IsFacialRecEnabled"] !== undefined ? _data["IsFacialRecEnabled"] : <any>null;
            this.discountCoupon = _data["DiscountCoupon"] !== undefined ? _data["DiscountCoupon"] : <any>null;
            this.artifactsEnabled = _data["ArtifactsEnabled"] !== undefined ? _data["ArtifactsEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): EventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EventTypeId"] = this.eventTypeId !== undefined ? this.eventTypeId : <any>null;
        data["EventCode"] = this.eventCode !== undefined ? this.eventCode : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["ResourcePerson"] = this.resourcePerson !== undefined ? this.resourcePerson : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["VenueAddress"] = this.venueAddress !== undefined ? this.venueAddress : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["LedgerCode"] = this.ledgerCode !== undefined ? this.ledgerCode : <any>null;
        data["CancelReason"] = this.cancelReason !== undefined ? this.cancelReason : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["RegistrationCloseDate"] = this.registrationCloseDate ? this.registrationCloseDate.toISOString() : <any>null;
        data["EventStatusId"] = this.eventStatusId !== undefined ? this.eventStatusId : <any>null;
        data["IsConference"] = this.isConference !== undefined ? this.isConference : <any>null;
        data["TotalRegisteredCount"] = this.totalRegisteredCount !== undefined ? this.totalRegisteredCount : <any>null;
        data["CountryCode"] = this.countryCode !== undefined ? this.countryCode : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["AvailableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        if (Array.isArray(this.eventFees)) {
            data["EventFees"] = [];
            for (let item of this.eventFees)
                data["EventFees"].push(item.toJSON());
        }
        data["IsGroup"] = this.isGroup !== undefined ? this.isGroup : <any>null;
        data["IsExhibitor"] = this.isExhibitor !== undefined ? this.isExhibitor : <any>null;
        data["IsScholarship"] = this.isScholarship !== undefined ? this.isScholarship : <any>null;
        data["RegistrationId"] = this.registrationId !== undefined ? this.registrationId : <any>null;
        data["TermsAndConditionId"] = this.termsAndConditionId !== undefined ? this.termsAndConditionId : <any>null;
        data["TermsAndCondition"] = this.termsAndCondition ? this.termsAndCondition.toJSON() : <any>null;
        if (Array.isArray(this.exhibitors)) {
            data["Exhibitors"] = [];
            for (let item of this.exhibitors)
                data["Exhibitors"].push(item);
        }
        data["IsUserExhibitorRegistered"] = this.isUserExhibitorRegistered !== undefined ? this.isUserExhibitorRegistered : <any>null;
        data["DietaryRequirement"] = this.dietaryRequirement !== undefined ? this.dietaryRequirement : <any>null;
        data["EventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        data["CurrencySymbol"] = this.currencySymbol !== undefined ? this.currencySymbol : <any>null;
        data["CurrencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        data["IsExchangeRateApplicable"] = this.isExchangeRateApplicable !== undefined ? this.isExchangeRateApplicable : <any>null;
        data["ExchangeRate"] = this.exchangeRate !== undefined ? this.exchangeRate : <any>null;
        data["SelectedCurrencyId"] = this.selectedCurrencyId !== undefined ? this.selectedCurrencyId : <any>null;
        data["IsFacialRecEnabled"] = this.isFacialRecEnabled !== undefined ? this.isFacialRecEnabled : <any>null;
        data["DiscountCoupon"] = this.discountCoupon !== undefined ? this.discountCoupon : <any>null;
        data["ArtifactsEnabled"] = this.artifactsEnabled !== undefined ? this.artifactsEnabled : <any>null;
        return data;
    }
}

export interface IEventDTO {
    id?: number | null;
    eventId?: number | null;
    name?: string | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    description?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    countryId?: number | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    cancelReason?: string | null;
    registrationLimit?: number | null;
    registrationCloseDate?: Date | null;
    eventStatusId?: number | null;
    isConference?: boolean | null;
    totalRegisteredCount?: number | null;
    countryCode?: string | null;
    countryName?: string | null;
    availableQuantity?: string | null;
    eventFees?: EventFeeExtendDTO[] | null;
    isGroup?: boolean | null;
    isExhibitor?: boolean | null;
    isScholarship?: boolean | null;
    registrationId?: number | null;
    termsAndConditionId?: number | null;
    termsAndCondition?: TermsAndConditionDTO | null;
    exhibitors?: number[] | null;
    isUserExhibitorRegistered?: boolean | null;
    dietaryRequirement?: string | null;
    eventType?: string | null;
    currencySymbol?: string | null;
    currencyId?: number | null;
    isExchangeRateApplicable?: boolean | null;
    exchangeRate?: number | null;
    selectedCurrencyId?: number | null;
    isFacialRecEnabled?: boolean | null;
    discountCoupon?: boolean | null;
    artifactsEnabled?: boolean | null;
}

export class CountryDTO implements ICountryDTO {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    nationality?: string | null;
    isVisibleToPublic?: boolean | null;

    constructor(data?: ICountryDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.countryCode = _data["CountryCode"] !== undefined ? _data["CountryCode"] : <any>null;
            this.iSDCode = _data["ISDCode"] !== undefined ? _data["ISDCode"] : <any>null;
            this.nationality = _data["Nationality"] !== undefined ? _data["Nationality"] : <any>null;
            this.isVisibleToPublic = _data["IsVisibleToPublic"] !== undefined ? _data["IsVisibleToPublic"] : <any>null;
        }
    }

    static fromJS(data: any): CountryDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CountryCode"] = this.countryCode !== undefined ? this.countryCode : <any>null;
        data["ISDCode"] = this.iSDCode !== undefined ? this.iSDCode : <any>null;
        data["Nationality"] = this.nationality !== undefined ? this.nationality : <any>null;
        data["IsVisibleToPublic"] = this.isVisibleToPublic !== undefined ? this.isVisibleToPublic : <any>null;
        return data;
    }
}

export interface ICountryDTO {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    nationality?: string | null;
    isVisibleToPublic?: boolean | null;
}

export class BankDetailDTO implements IBankDetailDTO {
    id?: number | null;
    organisationId?: number | null;
    bankName?: string | null;
    accountName?: string | null;
    accountNumber?: string | null;
    bankCode?: string | null;
    swiftCode?: string | null;
    iBANNumber?: string | null;
    isActive?: boolean | null;

    constructor(data?: IBankDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.organisationId = _data["OrganisationId"] !== undefined ? _data["OrganisationId"] : <any>null;
            this.bankName = _data["BankName"] !== undefined ? _data["BankName"] : <any>null;
            this.accountName = _data["AccountName"] !== undefined ? _data["AccountName"] : <any>null;
            this.accountNumber = _data["AccountNumber"] !== undefined ? _data["AccountNumber"] : <any>null;
            this.bankCode = _data["BankCode"] !== undefined ? _data["BankCode"] : <any>null;
            this.swiftCode = _data["SwiftCode"] !== undefined ? _data["SwiftCode"] : <any>null;
            this.iBANNumber = _data["IBANNumber"] !== undefined ? _data["IBANNumber"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
        }
    }

    static fromJS(data: any): BankDetailDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BankDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["OrganisationId"] = this.organisationId !== undefined ? this.organisationId : <any>null;
        data["BankName"] = this.bankName !== undefined ? this.bankName : <any>null;
        data["AccountName"] = this.accountName !== undefined ? this.accountName : <any>null;
        data["AccountNumber"] = this.accountNumber !== undefined ? this.accountNumber : <any>null;
        data["BankCode"] = this.bankCode !== undefined ? this.bankCode : <any>null;
        data["SwiftCode"] = this.swiftCode !== undefined ? this.swiftCode : <any>null;
        data["IBANNumber"] = this.iBANNumber !== undefined ? this.iBANNumber : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface IBankDetailDTO {
    id?: number | null;
    organisationId?: number | null;
    bankName?: string | null;
    accountName?: string | null;
    accountNumber?: string | null;
    bankCode?: string | null;
    swiftCode?: string | null;
    iBANNumber?: string | null;
    isActive?: boolean | null;
}

export class PaymentTypeDTO implements IPaymentTypeDTO {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;

    constructor(data?: IPaymentTypeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentTypeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface IPaymentTypeDTO {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
}

export class PaymentDemandMinimumDTO implements IPaymentDemandMinimumDTO {
    paymentDemandId?: number | null;
    paymentDemandDate?: Date | null;
    amount?: number | null;
    paymentDemandNumber?: string | null;

    constructor(data?: IPaymentDemandMinimumDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentDemandDate = _data["PaymentDemandDate"] ? new Date(_data["PaymentDemandDate"].toString()) : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentDemandMinimumDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDemandMinimumDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentDemandDate"] = this.paymentDemandDate ? this.paymentDemandDate.toISOString() : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        return data;
    }
}

export interface IPaymentDemandMinimumDTO {
    paymentDemandId?: number | null;
    paymentDemandDate?: Date | null;
    amount?: number | null;
    paymentDemandNumber?: string | null;
}

export class PaymentTypeMappingDTO implements IPaymentTypeMappingDTO {
    id?: number | null;
    entityType?: number | null;
    eventId?: number | null;
    paymentTypeId?: number | null;
    isVisible?: boolean | null;
    isUser?: boolean | null;
    isAdmin?: boolean | null;
    isTempStaff?: boolean | null;
    paymentType?: string | null;

    constructor(data?: IPaymentTypeMappingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.entityType = _data["EntityType"] !== undefined ? _data["EntityType"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.isVisible = _data["IsVisible"] !== undefined ? _data["IsVisible"] : <any>null;
            this.isUser = _data["IsUser"] !== undefined ? _data["IsUser"] : <any>null;
            this.isAdmin = _data["IsAdmin"] !== undefined ? _data["IsAdmin"] : <any>null;
            this.isTempStaff = _data["IsTempStaff"] !== undefined ? _data["IsTempStaff"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentTypeMappingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeMappingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EntityType"] = this.entityType !== undefined ? this.entityType : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["IsVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["IsUser"] = this.isUser !== undefined ? this.isUser : <any>null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : <any>null;
        data["IsTempStaff"] = this.isTempStaff !== undefined ? this.isTempStaff : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        return data;
    }
}

export interface IPaymentTypeMappingDTO {
    id?: number | null;
    entityType?: number | null;
    eventId?: number | null;
    paymentTypeId?: number | null;
    isVisible?: boolean | null;
    isUser?: boolean | null;
    isAdmin?: boolean | null;
    isTempStaff?: boolean | null;
    paymentType?: string | null;
}

export class ArtifactsConfiguration implements IArtifactsConfiguration {
    artifactFileFormat?: string | null;
    artifactFileMaxSize?: number | null;

    constructor(data?: IArtifactsConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.artifactFileFormat = _data["ArtifactFileFormat"] !== undefined ? _data["ArtifactFileFormat"] : <any>null;
            this.artifactFileMaxSize = _data["ArtifactFileMaxSize"] !== undefined ? _data["ArtifactFileMaxSize"] : <any>null;
        }
    }

    static fromJS(data: any): ArtifactsConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new ArtifactsConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ArtifactFileFormat"] = this.artifactFileFormat !== undefined ? this.artifactFileFormat : <any>null;
        data["ArtifactFileMaxSize"] = this.artifactFileMaxSize !== undefined ? this.artifactFileMaxSize : <any>null;
        return data;
    }
}

export interface IArtifactsConfiguration {
    artifactFileFormat?: string | null;
    artifactFileMaxSize?: number | null;
}

export class EventFeeExtendDTO implements IEventFeeExtendDTO {
    feeGroupId?: number | null;
    feeGroup?: string | null;
    deadlineId?: number | null;
    deadLine?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    applicableTo?: string | null;
    sortOrder?: number | null;
    eventId?: number | null;
    registrationLimit?: number | null;
    mutualExclusiveId?: number | null;
    isRegistered?: boolean | null;
    feeTypeRegistrationLimit?: number | null;
    feeCategoryId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    availableMaxPerPerson?: number | null;
    availableCount?: number | null;
    vATAmount?: number | null;
    grossAmount?: number | null;
    vATPercentage?: number | null;
    mutualExclusiveName?: string | null;
    forCurrentGroup?: boolean | null;
    vATShortCode?: string | null;
    id?: number | null;
    name?: string | null;
    feeTypeId?: number | null;
    feeType?: string | null;
    description?: string | null;
    netFee?: number | null;
    isRemoved?: boolean | null;
    isSelected?: boolean | null;
    maxQuantityPerPerson?: number | null;
    totalAmount?: number | null;
    ticketId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicketGroupDTO[] | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    deadline?: string | null;

    constructor(data?: IEventFeeExtendDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feeGroupId = _data["FeeGroupId"] !== undefined ? _data["FeeGroupId"] : <any>null;
            this.feeGroup = _data["FeeGroup"] !== undefined ? _data["FeeGroup"] : <any>null;
            this.deadlineId = _data["DeadlineId"] !== undefined ? _data["DeadlineId"] : <any>null;
            this.deadLine = _data["DeadLine"] !== undefined ? _data["DeadLine"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.sortOrder = _data["SortOrder"] !== undefined ? _data["SortOrder"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.mutualExclusiveId = _data["MutualExclusiveId"] !== undefined ? _data["MutualExclusiveId"] : <any>null;
            this.isRegistered = _data["IsRegistered"] !== undefined ? _data["IsRegistered"] : <any>null;
            this.feeTypeRegistrationLimit = _data["FeeTypeRegistrationLimit"] !== undefined ? _data["FeeTypeRegistrationLimit"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.isConfirmationLetterRequired = _data["IsConfirmationLetterRequired"] !== undefined ? _data["IsConfirmationLetterRequired"] : <any>null;
            this.availableMaxPerPerson = _data["AvailableMaxPerPerson"] !== undefined ? _data["AvailableMaxPerPerson"] : <any>null;
            this.availableCount = _data["AvailableCount"] !== undefined ? _data["AvailableCount"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.grossAmount = _data["GrossAmount"] !== undefined ? _data["GrossAmount"] : <any>null;
            this.vATPercentage = _data["VATPercentage"] !== undefined ? _data["VATPercentage"] : <any>null;
            this.mutualExclusiveName = _data["MutualExclusiveName"] !== undefined ? _data["MutualExclusiveName"] : <any>null;
            this.forCurrentGroup = _data["ForCurrentGroup"] !== undefined ? _data["ForCurrentGroup"] : <any>null;
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.feeTypeId = _data["FeeTypeId"] !== undefined ? _data["FeeTypeId"] : <any>null;
            this.feeType = _data["FeeType"] !== undefined ? _data["FeeType"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.netFee = _data["NetFee"] !== undefined ? _data["NetFee"] : <any>null;
            this.isRemoved = _data["IsRemoved"] !== undefined ? _data["IsRemoved"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.maxQuantityPerPerson = _data["MaxQuantityPerPerson"] !== undefined ? _data["MaxQuantityPerPerson"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.ticketId = _data["TicketId"] !== undefined ? _data["TicketId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicketGroupDTO.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
            this.isAdmin = _data["IsAdmin"] !== undefined ? _data["IsAdmin"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            this.deadline = _data["Deadline"] !== undefined ? _data["Deadline"] : <any>null;
        }
    }

    static fromJS(data: any): EventFeeExtendDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeExtendDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FeeGroupId"] = this.feeGroupId !== undefined ? this.feeGroupId : <any>null;
        data["FeeGroup"] = this.feeGroup !== undefined ? this.feeGroup : <any>null;
        data["DeadlineId"] = this.deadlineId !== undefined ? this.deadlineId : <any>null;
        data["DeadLine"] = this.deadLine !== undefined ? this.deadLine : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["MutualExclusiveId"] = this.mutualExclusiveId !== undefined ? this.mutualExclusiveId : <any>null;
        data["IsRegistered"] = this.isRegistered !== undefined ? this.isRegistered : <any>null;
        data["FeeTypeRegistrationLimit"] = this.feeTypeRegistrationLimit !== undefined ? this.feeTypeRegistrationLimit : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["IsConfirmationLetterRequired"] = this.isConfirmationLetterRequired !== undefined ? this.isConfirmationLetterRequired : <any>null;
        data["AvailableMaxPerPerson"] = this.availableMaxPerPerson !== undefined ? this.availableMaxPerPerson : <any>null;
        data["AvailableCount"] = this.availableCount !== undefined ? this.availableCount : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["GrossAmount"] = this.grossAmount !== undefined ? this.grossAmount : <any>null;
        data["VATPercentage"] = this.vATPercentage !== undefined ? this.vATPercentage : <any>null;
        data["MutualExclusiveName"] = this.mutualExclusiveName !== undefined ? this.mutualExclusiveName : <any>null;
        data["ForCurrentGroup"] = this.forCurrentGroup !== undefined ? this.forCurrentGroup : <any>null;
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["FeeTypeId"] = this.feeTypeId !== undefined ? this.feeTypeId : <any>null;
        data["FeeType"] = this.feeType !== undefined ? this.feeType : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["NetFee"] = this.netFee !== undefined ? this.netFee : <any>null;
        data["IsRemoved"] = this.isRemoved !== undefined ? this.isRemoved : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["MaxQuantityPerPerson"] = this.maxQuantityPerPerson !== undefined ? this.maxQuantityPerPerson : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["TicketId"] = this.ticketId !== undefined ? this.ticketId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        data["Deadline"] = this.deadline !== undefined ? this.deadline : <any>null;
        return data;
    }
}

export interface IEventFeeExtendDTO {
    feeGroupId?: number | null;
    feeGroup?: string | null;
    deadlineId?: number | null;
    deadLine?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    applicableTo?: string | null;
    sortOrder?: number | null;
    eventId?: number | null;
    registrationLimit?: number | null;
    mutualExclusiveId?: number | null;
    isRegistered?: boolean | null;
    feeTypeRegistrationLimit?: number | null;
    feeCategoryId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    availableMaxPerPerson?: number | null;
    availableCount?: number | null;
    vATAmount?: number | null;
    grossAmount?: number | null;
    vATPercentage?: number | null;
    mutualExclusiveName?: string | null;
    forCurrentGroup?: boolean | null;
    vATShortCode?: string | null;
    id?: number | null;
    name?: string | null;
    feeTypeId?: number | null;
    feeType?: string | null;
    description?: string | null;
    netFee?: number | null;
    isRemoved?: boolean | null;
    isSelected?: boolean | null;
    maxQuantityPerPerson?: number | null;
    totalAmount?: number | null;
    ticketId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicketGroupDTO[] | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    deadline?: string | null;
}

export class TermsAndConditionDTO implements ITermsAndConditionDTO {
    id?: number | null;
    fileName?: string | null;
    isActive?: boolean | null;

    constructor(data?: ITermsAndConditionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
        }
    }

    static fromJS(data: any): TermsAndConditionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TermsAndConditionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface ITermsAndConditionDTO {
    id?: number | null;
    fileName?: string | null;
    isActive?: boolean | null;
}

export class EventTicketGroupDTO implements IEventTicketGroupDTO {
    isRemoved?: boolean | null;
    ticketId?: number | null;
    feeGroup?: string | null;
    feeAmount?: number | null;
    discountedAmount?: number | null;
    forCurrentGroup?: boolean | null;
    isSelected?: boolean | null;
    isSelectedForPayment?: boolean | null;
    isPaidTicket?: boolean | null;
    isPaymentInitiated?: boolean | null;
    waitingForApproval?: boolean | null;
    isExchanged?: boolean | null;
    vATAmount?: number | null;
    totalAmount?: number | null;
    eventId?: number | null;
    applicableTo?: number | null;
    deadLineName?: string | null;
    quantity?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    isPartialPaid?: boolean | null;
    city?: string | null;
    countryName?: string | null;
    paymentDetails?: PaymentDetails_EventTicket[] | null;
    vATShortCode?: string | null;
    feeName?: string | null;
    shortCode?: string | null;
    feeCategoryId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    accountId?: number | null;
    vAT?: number | null;
    vATPercentage?: number | null;
    couponCodeId?: number | null;
    isDiscounted?: boolean | null;
    gross?: number | null;
    amount?: number | null;
    hasAccompanyPersons?: boolean | null;
    id?: number | null;
    feeId?: number | null;
    eventRegistrationId?: number | null;
    userId?: string | null;
    exhibitorPersonId?: number | null;
    ticketStatus?: number | null;
    isAttended?: boolean | null;
    isDeleted?: boolean | null;
    confirmationLetterId?: number | null;
    parentFeeId?: number | null;
    accompanyPersonId?: number | null;

    constructor(data?: IEventTicketGroupDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isRemoved = _data["IsRemoved"] !== undefined ? _data["IsRemoved"] : <any>null;
            this.ticketId = _data["TicketId"] !== undefined ? _data["TicketId"] : <any>null;
            this.feeGroup = _data["FeeGroup"] !== undefined ? _data["FeeGroup"] : <any>null;
            this.feeAmount = _data["FeeAmount"] !== undefined ? _data["FeeAmount"] : <any>null;
            this.discountedAmount = _data["DiscountedAmount"] !== undefined ? _data["DiscountedAmount"] : <any>null;
            this.forCurrentGroup = _data["ForCurrentGroup"] !== undefined ? _data["ForCurrentGroup"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.isSelectedForPayment = _data["IsSelectedForPayment"] !== undefined ? _data["IsSelectedForPayment"] : <any>null;
            this.isPaidTicket = _data["IsPaidTicket"] !== undefined ? _data["IsPaidTicket"] : <any>null;
            this.isPaymentInitiated = _data["IsPaymentInitiated"] !== undefined ? _data["IsPaymentInitiated"] : <any>null;
            this.waitingForApproval = _data["WaitingForApproval"] !== undefined ? _data["WaitingForApproval"] : <any>null;
            this.isExchanged = _data["IsExchanged"] !== undefined ? _data["IsExchanged"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.deadLineName = _data["DeadLineName"] !== undefined ? _data["DeadLineName"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.isConfirmationLetterRequired = _data["IsConfirmationLetterRequired"] !== undefined ? _data["IsConfirmationLetterRequired"] : <any>null;
            this.isPartialPaid = _data["IsPartialPaid"] !== undefined ? _data["IsPartialPaid"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            if (Array.isArray(_data["PaymentDetails"])) {
                this.paymentDetails = [] as any;
                for (let item of _data["PaymentDetails"])
                    this.paymentDetails!.push(PaymentDetails_EventTicket.fromJS(item));
            }
            else {
                this.paymentDetails = <any>null;
            }
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.feeName = _data["FeeName"] !== undefined ? _data["FeeName"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.vAT = _data["VAT"] !== undefined ? _data["VAT"] : <any>null;
            this.vATPercentage = _data["VATPercentage"] !== undefined ? _data["VATPercentage"] : <any>null;
            this.couponCodeId = _data["CouponCodeId"] !== undefined ? _data["CouponCodeId"] : <any>null;
            this.isDiscounted = _data["IsDiscounted"] !== undefined ? _data["IsDiscounted"] : <any>null;
            this.gross = _data["Gross"] !== undefined ? _data["Gross"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.hasAccompanyPersons = _data["HasAccompanyPersons"] !== undefined ? _data["HasAccompanyPersons"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.exhibitorPersonId = _data["ExhibitorPersonId"] !== undefined ? _data["ExhibitorPersonId"] : <any>null;
            this.ticketStatus = _data["TicketStatus"] !== undefined ? _data["TicketStatus"] : <any>null;
            this.isAttended = _data["IsAttended"] !== undefined ? _data["IsAttended"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.confirmationLetterId = _data["ConfirmationLetterId"] !== undefined ? _data["ConfirmationLetterId"] : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
            this.accompanyPersonId = _data["AccompanyPersonId"] !== undefined ? _data["AccompanyPersonId"] : <any>null;
        }
    }

    static fromJS(data: any): EventTicketGroupDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventTicketGroupDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsRemoved"] = this.isRemoved !== undefined ? this.isRemoved : <any>null;
        data["TicketId"] = this.ticketId !== undefined ? this.ticketId : <any>null;
        data["FeeGroup"] = this.feeGroup !== undefined ? this.feeGroup : <any>null;
        data["FeeAmount"] = this.feeAmount !== undefined ? this.feeAmount : <any>null;
        data["DiscountedAmount"] = this.discountedAmount !== undefined ? this.discountedAmount : <any>null;
        data["ForCurrentGroup"] = this.forCurrentGroup !== undefined ? this.forCurrentGroup : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["IsSelectedForPayment"] = this.isSelectedForPayment !== undefined ? this.isSelectedForPayment : <any>null;
        data["IsPaidTicket"] = this.isPaidTicket !== undefined ? this.isPaidTicket : <any>null;
        data["IsPaymentInitiated"] = this.isPaymentInitiated !== undefined ? this.isPaymentInitiated : <any>null;
        data["WaitingForApproval"] = this.waitingForApproval !== undefined ? this.waitingForApproval : <any>null;
        data["IsExchanged"] = this.isExchanged !== undefined ? this.isExchanged : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["DeadLineName"] = this.deadLineName !== undefined ? this.deadLineName : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["IsConfirmationLetterRequired"] = this.isConfirmationLetterRequired !== undefined ? this.isConfirmationLetterRequired : <any>null;
        data["IsPartialPaid"] = this.isPartialPaid !== undefined ? this.isPartialPaid : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        if (Array.isArray(this.paymentDetails)) {
            data["PaymentDetails"] = [];
            for (let item of this.paymentDetails)
                data["PaymentDetails"].push(item.toJSON());
        }
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["FeeName"] = this.feeName !== undefined ? this.feeName : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["VAT"] = this.vAT !== undefined ? this.vAT : <any>null;
        data["VATPercentage"] = this.vATPercentage !== undefined ? this.vATPercentage : <any>null;
        data["CouponCodeId"] = this.couponCodeId !== undefined ? this.couponCodeId : <any>null;
        data["IsDiscounted"] = this.isDiscounted !== undefined ? this.isDiscounted : <any>null;
        data["Gross"] = this.gross !== undefined ? this.gross : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["HasAccompanyPersons"] = this.hasAccompanyPersons !== undefined ? this.hasAccompanyPersons : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["ExhibitorPersonId"] = this.exhibitorPersonId !== undefined ? this.exhibitorPersonId : <any>null;
        data["TicketStatus"] = this.ticketStatus !== undefined ? this.ticketStatus : <any>null;
        data["IsAttended"] = this.isAttended !== undefined ? this.isAttended : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["ConfirmationLetterId"] = this.confirmationLetterId !== undefined ? this.confirmationLetterId : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        data["AccompanyPersonId"] = this.accompanyPersonId !== undefined ? this.accompanyPersonId : <any>null;
        return data;
    }
}

export interface IEventTicketGroupDTO {
    isRemoved?: boolean | null;
    ticketId?: number | null;
    feeGroup?: string | null;
    feeAmount?: number | null;
    discountedAmount?: number | null;
    forCurrentGroup?: boolean | null;
    isSelected?: boolean | null;
    isSelectedForPayment?: boolean | null;
    isPaidTicket?: boolean | null;
    isPaymentInitiated?: boolean | null;
    waitingForApproval?: boolean | null;
    isExchanged?: boolean | null;
    vATAmount?: number | null;
    totalAmount?: number | null;
    eventId?: number | null;
    applicableTo?: number | null;
    deadLineName?: string | null;
    quantity?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    isPartialPaid?: boolean | null;
    city?: string | null;
    countryName?: string | null;
    paymentDetails?: PaymentDetails_EventTicket[] | null;
    vATShortCode?: string | null;
    feeName?: string | null;
    shortCode?: string | null;
    feeCategoryId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    accountId?: number | null;
    vAT?: number | null;
    vATPercentage?: number | null;
    couponCodeId?: number | null;
    isDiscounted?: boolean | null;
    gross?: number | null;
    amount?: number | null;
    hasAccompanyPersons?: boolean | null;
    id?: number | null;
    feeId?: number | null;
    eventRegistrationId?: number | null;
    userId?: string | null;
    exhibitorPersonId?: number | null;
    ticketStatus?: number | null;
    isAttended?: boolean | null;
    isDeleted?: boolean | null;
    confirmationLetterId?: number | null;
    parentFeeId?: number | null;
    accompanyPersonId?: number | null;
}

export class PaymentDetails_EventTicket implements IPaymentDetails_EventTicket {
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    paymentDemandAmount?: number | null;
    invoiceDetails?: InvoiceDTO[] | null;
    paymentTransDetails?: PaymentTransactionDTO[] | null;

    constructor(data?: IPaymentDetails_EventTicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.paymentDemandAmount = _data["PaymentDemandAmount"] !== undefined ? _data["PaymentDemandAmount"] : <any>null;
            if (Array.isArray(_data["InvoiceDetails"])) {
                this.invoiceDetails = [] as any;
                for (let item of _data["InvoiceDetails"])
                    this.invoiceDetails!.push(InvoiceDTO.fromJS(item));
            }
            else {
                this.invoiceDetails = <any>null;
            }
            if (Array.isArray(_data["PaymentTransDetails"])) {
                this.paymentTransDetails = [] as any;
                for (let item of _data["PaymentTransDetails"])
                    this.paymentTransDetails!.push(PaymentTransactionDTO.fromJS(item));
            }
            else {
                this.paymentTransDetails = <any>null;
            }
        }
    }

    static fromJS(data: any): PaymentDetails_EventTicket {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDetails_EventTicket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["PaymentDemandAmount"] = this.paymentDemandAmount !== undefined ? this.paymentDemandAmount : <any>null;
        if (Array.isArray(this.invoiceDetails)) {
            data["InvoiceDetails"] = [];
            for (let item of this.invoiceDetails)
                data["InvoiceDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentTransDetails)) {
            data["PaymentTransDetails"] = [];
            for (let item of this.paymentTransDetails)
                data["PaymentTransDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentDetails_EventTicket {
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    paymentDemandAmount?: number | null;
    invoiceDetails?: InvoiceDTO[] | null;
    paymentTransDetails?: PaymentTransactionDTO[] | null;
}

export class InvoiceDTO implements IInvoiceDTO {
    id?: number | null;
    invoiceDate?: Date | null;
    paymentDate?: Date | null;
    invoiceNumber?: string | null;
    invoiceStatus?: number | null;
    fileStatusId?: number | null;
    isRefunded?: boolean | null;
    creditNote?: CreditNoteDTO[] | null;

    constructor(data?: IInvoiceDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.invoiceDate = _data["InvoiceDate"] ? new Date(_data["InvoiceDate"].toString()) : <any>null;
            this.paymentDate = _data["PaymentDate"] ? new Date(_data["PaymentDate"].toString()) : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.invoiceStatus = _data["InvoiceStatus"] !== undefined ? _data["InvoiceStatus"] : <any>null;
            this.fileStatusId = _data["FileStatusId"] !== undefined ? _data["FileStatusId"] : <any>null;
            this.isRefunded = _data["IsRefunded"] !== undefined ? _data["IsRefunded"] : <any>null;
            if (Array.isArray(_data["CreditNote"])) {
                this.creditNote = [] as any;
                for (let item of _data["CreditNote"])
                    this.creditNote!.push(CreditNoteDTO.fromJS(item));
            }
            else {
                this.creditNote = <any>null;
            }
        }
    }

    static fromJS(data: any): InvoiceDTO {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["InvoiceStatus"] = this.invoiceStatus !== undefined ? this.invoiceStatus : <any>null;
        data["FileStatusId"] = this.fileStatusId !== undefined ? this.fileStatusId : <any>null;
        data["IsRefunded"] = this.isRefunded !== undefined ? this.isRefunded : <any>null;
        if (Array.isArray(this.creditNote)) {
            data["CreditNote"] = [];
            for (let item of this.creditNote)
                data["CreditNote"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInvoiceDTO {
    id?: number | null;
    invoiceDate?: Date | null;
    paymentDate?: Date | null;
    invoiceNumber?: string | null;
    invoiceStatus?: number | null;
    fileStatusId?: number | null;
    isRefunded?: boolean | null;
    creditNote?: CreditNoteDTO[] | null;
}

export class PaymentTransactionDTO implements IPaymentTransactionDTO {
    id?: number | null;
    userId?: string | null;
    paymentGatewayId?: number | null;
    paymentTypeId?: number | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    status?: number | null;
    paymentReference?: string | null;
    actualAmount?: number | null;
    previousTransactionId?: number | null;
    creditNoteId?: number | null;

    constructor(data?: IPaymentTransactionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.paymentGatewayId = _data["PaymentGatewayId"] !== undefined ? _data["PaymentGatewayId"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.initiatedOn = _data["InitiatedOn"] ? new Date(_data["InitiatedOn"].toString()) : <any>null;
            this.completedOn = _data["CompletedOn"] ? new Date(_data["CompletedOn"].toString()) : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.paymentReference = _data["PaymentReference"] !== undefined ? _data["PaymentReference"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
            this.previousTransactionId = _data["PreviousTransactionId"] !== undefined ? _data["PreviousTransactionId"] : <any>null;
            this.creditNoteId = _data["CreditNoteId"] !== undefined ? _data["CreditNoteId"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentTransactionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTransactionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["PaymentGatewayId"] = this.paymentGatewayId !== undefined ? this.paymentGatewayId : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["InitiatedOn"] = this.initiatedOn ? this.initiatedOn.toISOString() : <any>null;
        data["CompletedOn"] = this.completedOn ? this.completedOn.toISOString() : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["PaymentReference"] = this.paymentReference !== undefined ? this.paymentReference : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        data["PreviousTransactionId"] = this.previousTransactionId !== undefined ? this.previousTransactionId : <any>null;
        data["CreditNoteId"] = this.creditNoteId !== undefined ? this.creditNoteId : <any>null;
        return data;
    }
}

export interface IPaymentTransactionDTO {
    id?: number | null;
    userId?: string | null;
    paymentGatewayId?: number | null;
    paymentTypeId?: number | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    status?: number | null;
    paymentReference?: string | null;
    actualAmount?: number | null;
    previousTransactionId?: number | null;
    creditNoteId?: number | null;
}

export class CreditNoteDTO implements ICreditNoteDTO {
    id?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    paymentType?: number | null;
    creditNoteNumber?: string | null;
    fileStatusId?: number | null;
    gatewayRefundId?: string | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    actualAmount?: number | null;

    constructor(data?: ICreditNoteDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.refundDate = _data["RefundDate"] ? new Date(_data["RefundDate"].toString()) : <any>null;
            this.refundReference = _data["RefundReference"] !== undefined ? _data["RefundReference"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            this.creditNoteNumber = _data["CreditNoteNumber"] !== undefined ? _data["CreditNoteNumber"] : <any>null;
            this.fileStatusId = _data["FileStatusId"] !== undefined ? _data["FileStatusId"] : <any>null;
            this.gatewayRefundId = _data["GatewayRefundId"] !== undefined ? _data["GatewayRefundId"] : <any>null;
            this.cancellationPercent = _data["CancellationPercent"] !== undefined ? _data["CancellationPercent"] : <any>null;
            this.refundStatus = _data["RefundStatus"] !== undefined ? _data["RefundStatus"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
        }
    }

    static fromJS(data: any): CreditNoteDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CreditNoteDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["RefundDate"] = this.refundDate ? this.refundDate.toISOString() : <any>null;
        data["RefundReference"] = this.refundReference !== undefined ? this.refundReference : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        data["CreditNoteNumber"] = this.creditNoteNumber !== undefined ? this.creditNoteNumber : <any>null;
        data["FileStatusId"] = this.fileStatusId !== undefined ? this.fileStatusId : <any>null;
        data["GatewayRefundId"] = this.gatewayRefundId !== undefined ? this.gatewayRefundId : <any>null;
        data["CancellationPercent"] = this.cancellationPercent !== undefined ? this.cancellationPercent : <any>null;
        data["RefundStatus"] = this.refundStatus !== undefined ? this.refundStatus : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        return data;
    }
}

export interface ICreditNoteDTO {
    id?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    paymentType?: number | null;
    creditNoteNumber?: string | null;
    fileStatusId?: number | null;
    gatewayRefundId?: string | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    actualAmount?: number | null;
}

export class EventRegistrationViewModel implements IEventRegistrationViewModel {
    isScholarshipPTWaitingForApproval?: boolean | null;
    isScholarshipPTSuccess?: boolean | null;
    isScholarshipPTCancelled?: boolean | null;
    isScholarship?: boolean | null;
    id?: number | null;
    eventId?: number | null;
    isConference?: boolean | null;
    eventType?: string | null;
    eventTypeId?: number | null;
    eventStatusId?: number | null;
    eventName?: string | null;
    eventCode?: string | null;
    description?: string | null;
    eventAmount?: number | null;
    startDate?: Date | null;
    startDateString?: string | null;
    endDate?: Date | null;
    endDateString?: string | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    countryName?: string | null;
    userId?: string | null;
    isAttended?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    userAddressId?: number | null;
    address?: UserAddressModel | null;
    isIndividualRegistered?: boolean | null;
    canDownloadConfirmationLetter?: boolean | null;
    isGoingToPay?: boolean | null;
    isGroupRegistered?: boolean | null;
    isUserExhibitorRegistered?: boolean | null;
    isThirdPartyRegistered?: boolean | null;
    isUpcomingEvent?: boolean | null;
    paymentMode?: number | null;
    isTicketSave?: boolean | null;
    isBuyTicket?: boolean | null;
    isDeleteTicket?: boolean | null;
    eventGroup?: EventGroupViewModel | null;
    eventTickets?: EventTicketViewModel[] | null;
    paymentInformation?: ShowPaymentViewModel | null;
    registrationLimit?: number | null;
    totalRegisteredCount?: number | null;
    availableQuantity?: string | null;
    isRegisteredByOther?: boolean | null;
    isGroupAvailable?: boolean | null;
    isExhibitorRegnAllowed?: boolean | null;
    dietaryRequirement?: string | null;
    confirmationLetterId?: number | null;
    transferId?: number | null;
    actualAmount?: number | null;
    referenceNo?: string | null;
    paymentDate?: string | null;
    internalReferenceNumber?: string | null;
    isUnAssignTicket?: boolean | null;
    isEventEnd?: boolean | null;
    groupId?: number | null;
    invoiceAddress?: UserAddressModel | null;
    isStarred?: boolean | null;
    displayPriority?: number | null;
    couponCode?: string | null;
    artifactsEnabled?: boolean | null;
    artifactsUploaded?: boolean | null;
    uploadEventArtifactsLater?: boolean | null;

    constructor(data?: IEventRegistrationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isScholarshipPTWaitingForApproval = _data["IsScholarshipPTWaitingForApproval"] !== undefined ? _data["IsScholarshipPTWaitingForApproval"] : <any>null;
            this.isScholarshipPTSuccess = _data["IsScholarshipPTSuccess"] !== undefined ? _data["IsScholarshipPTSuccess"] : <any>null;
            this.isScholarshipPTCancelled = _data["IsScholarshipPTCancelled"] !== undefined ? _data["IsScholarshipPTCancelled"] : <any>null;
            this.isScholarship = _data["IsScholarship"] !== undefined ? _data["IsScholarship"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.isConference = _data["IsConference"] !== undefined ? _data["IsConference"] : <any>null;
            this.eventType = _data["EventType"] !== undefined ? _data["EventType"] : <any>null;
            this.eventTypeId = _data["EventTypeId"] !== undefined ? _data["EventTypeId"] : <any>null;
            this.eventStatusId = _data["EventStatusId"] !== undefined ? _data["EventStatusId"] : <any>null;
            this.eventName = _data["EventName"] !== undefined ? _data["EventName"] : <any>null;
            this.eventCode = _data["EventCode"] !== undefined ? _data["EventCode"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.eventAmount = _data["EventAmount"] !== undefined ? _data["EventAmount"] : <any>null;
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>null;
            this.startDateString = _data["StartDateString"] !== undefined ? _data["StartDateString"] : <any>null;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>null;
            this.endDateString = _data["EndDateString"] !== undefined ? _data["EndDateString"] : <any>null;
            this.resourcePerson = _data["ResourcePerson"] !== undefined ? _data["ResourcePerson"] : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.venueAddress = _data["VenueAddress"] !== undefined ? _data["VenueAddress"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.ledgerCode = _data["LedgerCode"] !== undefined ? _data["LedgerCode"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.isAttended = _data["IsAttended"] !== undefined ? _data["IsAttended"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.userAddressId = _data["UserAddressId"] !== undefined ? _data["UserAddressId"] : <any>null;
            this.address = _data["Address"] ? UserAddressModel.fromJS(_data["Address"]) : <any>null;
            this.isIndividualRegistered = _data["IsIndividualRegistered"] !== undefined ? _data["IsIndividualRegistered"] : <any>null;
            this.canDownloadConfirmationLetter = _data["CanDownloadConfirmationLetter"] !== undefined ? _data["CanDownloadConfirmationLetter"] : <any>null;
            this.isGoingToPay = _data["IsGoingToPay"] !== undefined ? _data["IsGoingToPay"] : <any>null;
            this.isGroupRegistered = _data["IsGroupRegistered"] !== undefined ? _data["IsGroupRegistered"] : <any>null;
            this.isUserExhibitorRegistered = _data["IsUserExhibitorRegistered"] !== undefined ? _data["IsUserExhibitorRegistered"] : <any>null;
            this.isThirdPartyRegistered = _data["IsThirdPartyRegistered"] !== undefined ? _data["IsThirdPartyRegistered"] : <any>null;
            this.isUpcomingEvent = _data["IsUpcomingEvent"] !== undefined ? _data["IsUpcomingEvent"] : <any>null;
            this.paymentMode = _data["PaymentMode"] !== undefined ? _data["PaymentMode"] : <any>null;
            this.isTicketSave = _data["IsTicketSave"] !== undefined ? _data["IsTicketSave"] : <any>null;
            this.isBuyTicket = _data["IsBuyTicket"] !== undefined ? _data["IsBuyTicket"] : <any>null;
            this.isDeleteTicket = _data["IsDeleteTicket"] !== undefined ? _data["IsDeleteTicket"] : <any>null;
            this.eventGroup = _data["EventGroup"] ? EventGroupViewModel.fromJS(_data["EventGroup"]) : <any>null;
            if (Array.isArray(_data["EventTickets"])) {
                this.eventTickets = [] as any;
                for (let item of _data["EventTickets"])
                    this.eventTickets!.push(EventTicketViewModel.fromJS(item));
            }
            else {
                this.eventTickets = <any>null;
            }
            this.paymentInformation = _data["PaymentInformation"] ? ShowPaymentViewModel.fromJS(_data["PaymentInformation"]) : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.totalRegisteredCount = _data["TotalRegisteredCount"] !== undefined ? _data["TotalRegisteredCount"] : <any>null;
            this.availableQuantity = _data["AvailableQuantity"] !== undefined ? _data["AvailableQuantity"] : <any>null;
            this.isRegisteredByOther = _data["isRegisteredByOther"] !== undefined ? _data["isRegisteredByOther"] : <any>null;
            this.isGroupAvailable = _data["IsGroupAvailable"] !== undefined ? _data["IsGroupAvailable"] : <any>null;
            this.isExhibitorRegnAllowed = _data["IsExhibitorRegnAllowed"] !== undefined ? _data["IsExhibitorRegnAllowed"] : <any>null;
            this.dietaryRequirement = _data["DietaryRequirement"] !== undefined ? _data["DietaryRequirement"] : <any>null;
            this.confirmationLetterId = _data["ConfirmationLetterId"] !== undefined ? _data["ConfirmationLetterId"] : <any>null;
            this.transferId = _data["TransferId"] !== undefined ? _data["TransferId"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
            this.referenceNo = _data["ReferenceNo"] !== undefined ? _data["ReferenceNo"] : <any>null;
            this.paymentDate = _data["PaymentDate"] !== undefined ? _data["PaymentDate"] : <any>null;
            this.internalReferenceNumber = _data["InternalReferenceNumber"] !== undefined ? _data["InternalReferenceNumber"] : <any>null;
            this.isUnAssignTicket = _data["IsUnAssignTicket"] !== undefined ? _data["IsUnAssignTicket"] : <any>null;
            this.isEventEnd = _data["IsEventEnd"] !== undefined ? _data["IsEventEnd"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.invoiceAddress = _data["InvoiceAddress"] ? UserAddressModel.fromJS(_data["InvoiceAddress"]) : <any>null;
            this.isStarred = _data["IsStarred"] !== undefined ? _data["IsStarred"] : <any>null;
            this.displayPriority = _data["DisplayPriority"] !== undefined ? _data["DisplayPriority"] : <any>null;
            this.couponCode = _data["CouponCode"] !== undefined ? _data["CouponCode"] : <any>null;
            this.artifactsEnabled = _data["ArtifactsEnabled"] !== undefined ? _data["ArtifactsEnabled"] : <any>null;
            this.artifactsUploaded = _data["ArtifactsUploaded"] !== undefined ? _data["ArtifactsUploaded"] : <any>null;
            this.uploadEventArtifactsLater = _data["UploadEventArtifactsLater"] !== undefined ? _data["UploadEventArtifactsLater"] : <any>null;
        }
    }

    static fromJS(data: any): EventRegistrationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventRegistrationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsScholarshipPTWaitingForApproval"] = this.isScholarshipPTWaitingForApproval !== undefined ? this.isScholarshipPTWaitingForApproval : <any>null;
        data["IsScholarshipPTSuccess"] = this.isScholarshipPTSuccess !== undefined ? this.isScholarshipPTSuccess : <any>null;
        data["IsScholarshipPTCancelled"] = this.isScholarshipPTCancelled !== undefined ? this.isScholarshipPTCancelled : <any>null;
        data["IsScholarship"] = this.isScholarship !== undefined ? this.isScholarship : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["IsConference"] = this.isConference !== undefined ? this.isConference : <any>null;
        data["EventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        data["EventTypeId"] = this.eventTypeId !== undefined ? this.eventTypeId : <any>null;
        data["EventStatusId"] = this.eventStatusId !== undefined ? this.eventStatusId : <any>null;
        data["EventName"] = this.eventName !== undefined ? this.eventName : <any>null;
        data["EventCode"] = this.eventCode !== undefined ? this.eventCode : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["EventAmount"] = this.eventAmount !== undefined ? this.eventAmount : <any>null;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["StartDateString"] = this.startDateString !== undefined ? this.startDateString : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["EndDateString"] = this.endDateString !== undefined ? this.endDateString : <any>null;
        data["ResourcePerson"] = this.resourcePerson !== undefined ? this.resourcePerson : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["VenueAddress"] = this.venueAddress !== undefined ? this.venueAddress : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["LedgerCode"] = this.ledgerCode !== undefined ? this.ledgerCode : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["IsAttended"] = this.isAttended !== undefined ? this.isAttended : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["UserAddressId"] = this.userAddressId !== undefined ? this.userAddressId : <any>null;
        data["Address"] = this.address ? this.address.toJSON() : <any>null;
        data["IsIndividualRegistered"] = this.isIndividualRegistered !== undefined ? this.isIndividualRegistered : <any>null;
        data["CanDownloadConfirmationLetter"] = this.canDownloadConfirmationLetter !== undefined ? this.canDownloadConfirmationLetter : <any>null;
        data["IsGoingToPay"] = this.isGoingToPay !== undefined ? this.isGoingToPay : <any>null;
        data["IsGroupRegistered"] = this.isGroupRegistered !== undefined ? this.isGroupRegistered : <any>null;
        data["IsUserExhibitorRegistered"] = this.isUserExhibitorRegistered !== undefined ? this.isUserExhibitorRegistered : <any>null;
        data["IsThirdPartyRegistered"] = this.isThirdPartyRegistered !== undefined ? this.isThirdPartyRegistered : <any>null;
        data["IsUpcomingEvent"] = this.isUpcomingEvent !== undefined ? this.isUpcomingEvent : <any>null;
        data["PaymentMode"] = this.paymentMode !== undefined ? this.paymentMode : <any>null;
        data["IsTicketSave"] = this.isTicketSave !== undefined ? this.isTicketSave : <any>null;
        data["IsBuyTicket"] = this.isBuyTicket !== undefined ? this.isBuyTicket : <any>null;
        data["IsDeleteTicket"] = this.isDeleteTicket !== undefined ? this.isDeleteTicket : <any>null;
        data["EventGroup"] = this.eventGroup ? this.eventGroup.toJSON() : <any>null;
        if (Array.isArray(this.eventTickets)) {
            data["EventTickets"] = [];
            for (let item of this.eventTickets)
                data["EventTickets"].push(item.toJSON());
        }
        data["PaymentInformation"] = this.paymentInformation ? this.paymentInformation.toJSON() : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["TotalRegisteredCount"] = this.totalRegisteredCount !== undefined ? this.totalRegisteredCount : <any>null;
        data["AvailableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["isRegisteredByOther"] = this.isRegisteredByOther !== undefined ? this.isRegisteredByOther : <any>null;
        data["IsGroupAvailable"] = this.isGroupAvailable !== undefined ? this.isGroupAvailable : <any>null;
        data["IsExhibitorRegnAllowed"] = this.isExhibitorRegnAllowed !== undefined ? this.isExhibitorRegnAllowed : <any>null;
        data["DietaryRequirement"] = this.dietaryRequirement !== undefined ? this.dietaryRequirement : <any>null;
        data["ConfirmationLetterId"] = this.confirmationLetterId !== undefined ? this.confirmationLetterId : <any>null;
        data["TransferId"] = this.transferId !== undefined ? this.transferId : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        data["ReferenceNo"] = this.referenceNo !== undefined ? this.referenceNo : <any>null;
        data["PaymentDate"] = this.paymentDate !== undefined ? this.paymentDate : <any>null;
        data["InternalReferenceNumber"] = this.internalReferenceNumber !== undefined ? this.internalReferenceNumber : <any>null;
        data["IsUnAssignTicket"] = this.isUnAssignTicket !== undefined ? this.isUnAssignTicket : <any>null;
        data["IsEventEnd"] = this.isEventEnd !== undefined ? this.isEventEnd : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["InvoiceAddress"] = this.invoiceAddress ? this.invoiceAddress.toJSON() : <any>null;
        data["IsStarred"] = this.isStarred !== undefined ? this.isStarred : <any>null;
        data["DisplayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["CouponCode"] = this.couponCode !== undefined ? this.couponCode : <any>null;
        data["ArtifactsEnabled"] = this.artifactsEnabled !== undefined ? this.artifactsEnabled : <any>null;
        data["ArtifactsUploaded"] = this.artifactsUploaded !== undefined ? this.artifactsUploaded : <any>null;
        data["UploadEventArtifactsLater"] = this.uploadEventArtifactsLater !== undefined ? this.uploadEventArtifactsLater : <any>null;
        return data;
    }
}

export interface IEventRegistrationViewModel {
    isScholarshipPTWaitingForApproval?: boolean | null;
    isScholarshipPTSuccess?: boolean | null;
    isScholarshipPTCancelled?: boolean | null;
    isScholarship?: boolean | null;
    id?: number | null;
    eventId?: number | null;
    isConference?: boolean | null;
    eventType?: string | null;
    eventTypeId?: number | null;
    eventStatusId?: number | null;
    eventName?: string | null;
    eventCode?: string | null;
    description?: string | null;
    eventAmount?: number | null;
    startDate?: Date | null;
    startDateString?: string | null;
    endDate?: Date | null;
    endDateString?: string | null;
    resourcePerson?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    vATNumber?: string | null;
    ledgerCode?: string | null;
    countryName?: string | null;
    userId?: string | null;
    isAttended?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    userAddressId?: number | null;
    address?: UserAddressModel | null;
    isIndividualRegistered?: boolean | null;
    canDownloadConfirmationLetter?: boolean | null;
    isGoingToPay?: boolean | null;
    isGroupRegistered?: boolean | null;
    isUserExhibitorRegistered?: boolean | null;
    isThirdPartyRegistered?: boolean | null;
    isUpcomingEvent?: boolean | null;
    paymentMode?: number | null;
    isTicketSave?: boolean | null;
    isBuyTicket?: boolean | null;
    isDeleteTicket?: boolean | null;
    eventGroup?: EventGroupViewModel | null;
    eventTickets?: EventTicketViewModel[] | null;
    paymentInformation?: ShowPaymentViewModel | null;
    registrationLimit?: number | null;
    totalRegisteredCount?: number | null;
    availableQuantity?: string | null;
    isRegisteredByOther?: boolean | null;
    isGroupAvailable?: boolean | null;
    isExhibitorRegnAllowed?: boolean | null;
    dietaryRequirement?: string | null;
    confirmationLetterId?: number | null;
    transferId?: number | null;
    actualAmount?: number | null;
    referenceNo?: string | null;
    paymentDate?: string | null;
    internalReferenceNumber?: string | null;
    isUnAssignTicket?: boolean | null;
    isEventEnd?: boolean | null;
    groupId?: number | null;
    invoiceAddress?: UserAddressModel | null;
    isStarred?: boolean | null;
    displayPriority?: number | null;
    couponCode?: string | null;
    artifactsEnabled?: boolean | null;
    artifactsUploaded?: boolean | null;
    uploadEventArtifactsLater?: boolean | null;
}

export class UserAddressModel implements IUserAddressModel {
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    stateCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    companyName?: string | null;
    countryName?: string | null;
    addressId?: number | null;
    phone?: string | null;
    mobilePhone?: string | null;
    isDefault?: boolean | null;
    id?: number | null;
    vATNumber?: string | null;
    department?: string | null;
    purchaseOrder?: string | null;

    constructor(data?: IUserAddressModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.addressTypeId = _data["AddressTypeId"] !== undefined ? _data["AddressTypeId"] : <any>null;
            this.street1 = _data["Street1"] !== undefined ? _data["Street1"] : <any>null;
            this.street2 = _data["Street2"] !== undefined ? _data["Street2"] : <any>null;
            this.postalCode = _data["PostalCode"] !== undefined ? _data["PostalCode"] : <any>null;
            this.stateCode = _data["StateCode"] !== undefined ? _data["StateCode"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.stateOrProvince = _data["StateOrProvince"] !== undefined ? _data["StateOrProvince"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.companyName = _data["CompanyName"] !== undefined ? _data["CompanyName"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.addressId = _data["AddressId"] !== undefined ? _data["AddressId"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.mobilePhone = _data["MobilePhone"] !== undefined ? _data["MobilePhone"] : <any>null;
            this.isDefault = _data["IsDefault"] !== undefined ? _data["IsDefault"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.vATNumber = _data["VATNumber"] !== undefined ? _data["VATNumber"] : <any>null;
            this.department = _data["Department"] !== undefined ? _data["Department"] : <any>null;
            this.purchaseOrder = _data["PurchaseOrder"] !== undefined ? _data["PurchaseOrder"] : <any>null;
        }
    }

    static fromJS(data: any): UserAddressModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddressModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["AddressTypeId"] = this.addressTypeId !== undefined ? this.addressTypeId : <any>null;
        data["Street1"] = this.street1 !== undefined ? this.street1 : <any>null;
        data["Street2"] = this.street2 !== undefined ? this.street2 : <any>null;
        data["PostalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["StateOrProvince"] = this.stateOrProvince !== undefined ? this.stateOrProvince : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["CompanyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["AddressId"] = this.addressId !== undefined ? this.addressId : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["MobilePhone"] = this.mobilePhone !== undefined ? this.mobilePhone : <any>null;
        data["IsDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["VATNumber"] = this.vATNumber !== undefined ? this.vATNumber : <any>null;
        data["Department"] = this.department !== undefined ? this.department : <any>null;
        data["PurchaseOrder"] = this.purchaseOrder !== undefined ? this.purchaseOrder : <any>null;
        return data;
    }
}

export interface IUserAddressModel {
    userId?: string | null;
    addressTypeId?: number | null;
    street1?: string | null;
    street2?: string | null;
    postalCode?: string | null;
    stateCode?: string | null;
    city?: string | null;
    stateOrProvince?: string | null;
    countryId?: number | null;
    companyName?: string | null;
    countryName?: string | null;
    addressId?: number | null;
    phone?: string | null;
    mobilePhone?: string | null;
    isDefault?: boolean | null;
    id?: number | null;
    vATNumber?: string | null;
    department?: string | null;
    purchaseOrder?: string | null;
}

export class EventGroupViewModel implements IEventGroupViewModel {
    paymentStatusPaidCount?: string | null;
    groupId?: number | null;
    groupName?: string | null;
    invoiceAddress?: UserAddressModel | null;
    leaderId?: string | null;
    leaderAccountId?: number | null;
    leaderName?: string | null;
    countryId?: number | null;
    hasOnsiteContact?: boolean | null;
    onsiteContact?: OnsiteContact | null;
    groupParticipants?: EventGroupMemberViewModel[] | null;
    feeTickets?: EventFeeViewModel[] | null;
    paidCount?: string | null;
    unpaidCount?: string | null;
    eventRegistrationId?: number | null;
    paymentStatusUnpaidCount?: string | null;
    paymentStatusWaitingForApproval?: string | null;
    availableQuantity?: string | null;
    id?: number | null;
    name?: string | null;
    paymentType?: PaymentTypeViewModel[] | null;
    currencySymbol?: string | null;
    eventCurrencyId?: number | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;

    constructor(data?: IEventGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentStatusPaidCount = _data["PaymentStatusPaidCount"] !== undefined ? _data["PaymentStatusPaidCount"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.groupName = _data["GroupName"] !== undefined ? _data["GroupName"] : <any>null;
            this.invoiceAddress = _data["InvoiceAddress"] ? UserAddressModel.fromJS(_data["InvoiceAddress"]) : <any>null;
            this.leaderId = _data["LeaderId"] !== undefined ? _data["LeaderId"] : <any>null;
            this.leaderAccountId = _data["LeaderAccountId"] !== undefined ? _data["LeaderAccountId"] : <any>null;
            this.leaderName = _data["LeaderName"] !== undefined ? _data["LeaderName"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.hasOnsiteContact = _data["HasOnsiteContact"] !== undefined ? _data["HasOnsiteContact"] : <any>null;
            this.onsiteContact = _data["OnsiteContact"] ? OnsiteContact.fromJS(_data["OnsiteContact"]) : <any>null;
            if (Array.isArray(_data["GroupParticipants"])) {
                this.groupParticipants = [] as any;
                for (let item of _data["GroupParticipants"])
                    this.groupParticipants!.push(EventGroupMemberViewModel.fromJS(item));
            }
            else {
                this.groupParticipants = <any>null;
            }
            if (Array.isArray(_data["FeeTickets"])) {
                this.feeTickets = [] as any;
                for (let item of _data["FeeTickets"])
                    this.feeTickets!.push(EventFeeViewModel.fromJS(item));
            }
            else {
                this.feeTickets = <any>null;
            }
            this.paidCount = _data["PaidCount"] !== undefined ? _data["PaidCount"] : <any>null;
            this.unpaidCount = _data["UnpaidCount"] !== undefined ? _data["UnpaidCount"] : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
            this.paymentStatusUnpaidCount = _data["PaymentStatusUnpaidCount"] !== undefined ? _data["PaymentStatusUnpaidCount"] : <any>null;
            this.paymentStatusWaitingForApproval = _data["PaymentStatusWaitingForApproval"] !== undefined ? _data["PaymentStatusWaitingForApproval"] : <any>null;
            this.availableQuantity = _data["AvailableQuantity"] !== undefined ? _data["AvailableQuantity"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            if (Array.isArray(_data["PaymentType"])) {
                this.paymentType = [] as any;
                for (let item of _data["PaymentType"])
                    this.paymentType!.push(PaymentTypeViewModel.fromJS(item));
            }
            else {
                this.paymentType = <any>null;
            }
            this.currencySymbol = _data["CurrencySymbol"] !== undefined ? _data["CurrencySymbol"] : <any>null;
            this.eventCurrencyId = _data["EventCurrencyId"] !== undefined ? _data["EventCurrencyId"] : <any>null;
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.isMultiVATShortCode = _data["IsMultiVATShortCode"] !== undefined ? _data["IsMultiVATShortCode"] : <any>null;
        }
    }

    static fromJS(data: any): EventGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentStatusPaidCount"] = this.paymentStatusPaidCount !== undefined ? this.paymentStatusPaidCount : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["GroupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["InvoiceAddress"] = this.invoiceAddress ? this.invoiceAddress.toJSON() : <any>null;
        data["LeaderId"] = this.leaderId !== undefined ? this.leaderId : <any>null;
        data["LeaderAccountId"] = this.leaderAccountId !== undefined ? this.leaderAccountId : <any>null;
        data["LeaderName"] = this.leaderName !== undefined ? this.leaderName : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["HasOnsiteContact"] = this.hasOnsiteContact !== undefined ? this.hasOnsiteContact : <any>null;
        data["OnsiteContact"] = this.onsiteContact ? this.onsiteContact.toJSON() : <any>null;
        if (Array.isArray(this.groupParticipants)) {
            data["GroupParticipants"] = [];
            for (let item of this.groupParticipants)
                data["GroupParticipants"].push(item.toJSON());
        }
        if (Array.isArray(this.feeTickets)) {
            data["FeeTickets"] = [];
            for (let item of this.feeTickets)
                data["FeeTickets"].push(item.toJSON());
        }
        data["PaidCount"] = this.paidCount !== undefined ? this.paidCount : <any>null;
        data["UnpaidCount"] = this.unpaidCount !== undefined ? this.unpaidCount : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        data["PaymentStatusUnpaidCount"] = this.paymentStatusUnpaidCount !== undefined ? this.paymentStatusUnpaidCount : <any>null;
        data["PaymentStatusWaitingForApproval"] = this.paymentStatusWaitingForApproval !== undefined ? this.paymentStatusWaitingForApproval : <any>null;
        data["AvailableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.paymentType)) {
            data["PaymentType"] = [];
            for (let item of this.paymentType)
                data["PaymentType"].push(item.toJSON());
        }
        data["CurrencySymbol"] = this.currencySymbol !== undefined ? this.currencySymbol : <any>null;
        data["EventCurrencyId"] = this.eventCurrencyId !== undefined ? this.eventCurrencyId : <any>null;
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["IsMultiVATShortCode"] = this.isMultiVATShortCode !== undefined ? this.isMultiVATShortCode : <any>null;
        return data;
    }
}

export interface IEventGroupViewModel {
    paymentStatusPaidCount?: string | null;
    groupId?: number | null;
    groupName?: string | null;
    invoiceAddress?: UserAddressModel | null;
    leaderId?: string | null;
    leaderAccountId?: number | null;
    leaderName?: string | null;
    countryId?: number | null;
    hasOnsiteContact?: boolean | null;
    onsiteContact?: OnsiteContact | null;
    groupParticipants?: EventGroupMemberViewModel[] | null;
    feeTickets?: EventFeeViewModel[] | null;
    paidCount?: string | null;
    unpaidCount?: string | null;
    eventRegistrationId?: number | null;
    paymentStatusUnpaidCount?: string | null;
    paymentStatusWaitingForApproval?: string | null;
    availableQuantity?: string | null;
    id?: number | null;
    name?: string | null;
    paymentType?: PaymentTypeViewModel[] | null;
    currencySymbol?: string | null;
    eventCurrencyId?: number | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;
}

export class EventTicketViewModel implements IEventTicketViewModel {
    feeId?: number | null;
    userId?: string | null;
    isRemoved?: boolean | null;
    ticketId?: number | null;
    feeGroup?: string | null;
    feeName?: string | null;
    feeAmount?: number | null;
    forCurrentGroup?: boolean | null;
    isSelected?: boolean | null;
    accountId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isSelectedForPayment?: boolean | null;
    isPaidTicket?: boolean | null;
    isPaymentInitiated?: boolean | null;
    waitingForApproval?: boolean | null;
    feeMembershipTypeId?: number | null;
    isExchanged?: boolean | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    totalAmount?: number | null;
    eventId?: number | null;
    applicableTo?: number | null;
    deadLineName?: string | null;
    quantity?: number | null;
    feeCategoryId?: number | null;
    confirmationLetterId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    accompanyPerson?: AccompanyPersonViewModal | null;
    parentFeeId?: number | null;
    isPartialPaid?: boolean | null;
    paymentDetails?: PaymentDetails_EventTicket[] | null;
    isUnAssigned?: boolean | null;
    cancellationPercent?: number | null;
    city?: string | null;
    countryName?: string | null;
    vATShortCode?: string | null;

    constructor(data?: IEventTicketViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.isRemoved = _data["IsRemoved"] !== undefined ? _data["IsRemoved"] : <any>null;
            this.ticketId = _data["TicketId"] !== undefined ? _data["TicketId"] : <any>null;
            this.feeGroup = _data["FeeGroup"] !== undefined ? _data["FeeGroup"] : <any>null;
            this.feeName = _data["FeeName"] !== undefined ? _data["FeeName"] : <any>null;
            this.feeAmount = _data["FeeAmount"] !== undefined ? _data["FeeAmount"] : <any>null;
            this.forCurrentGroup = _data["ForCurrentGroup"] !== undefined ? _data["ForCurrentGroup"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.isSelectedForPayment = _data["IsSelectedForPayment"] !== undefined ? _data["IsSelectedForPayment"] : <any>null;
            this.isPaidTicket = _data["IsPaidTicket"] !== undefined ? _data["IsPaidTicket"] : <any>null;
            this.isPaymentInitiated = _data["IsPaymentInitiated"] !== undefined ? _data["IsPaymentInitiated"] : <any>null;
            this.waitingForApproval = _data["WaitingForApproval"] !== undefined ? _data["WaitingForApproval"] : <any>null;
            this.feeMembershipTypeId = _data["FeeMembershipTypeId"] !== undefined ? _data["FeeMembershipTypeId"] : <any>null;
            this.isExchanged = _data["IsExchanged"] !== undefined ? _data["IsExchanged"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.vATPercentage = _data["VATPercentage"] !== undefined ? _data["VATPercentage"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.deadLineName = _data["DeadLineName"] !== undefined ? _data["DeadLineName"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.confirmationLetterId = _data["ConfirmationLetterId"] !== undefined ? _data["ConfirmationLetterId"] : <any>null;
            this.isConfirmationLetterRequired = _data["IsConfirmationLetterRequired"] !== undefined ? _data["IsConfirmationLetterRequired"] : <any>null;
            this.accompanyPerson = _data["AccompanyPerson"] ? AccompanyPersonViewModal.fromJS(_data["AccompanyPerson"]) : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
            this.isPartialPaid = _data["IsPartialPaid"] !== undefined ? _data["IsPartialPaid"] : <any>null;
            if (Array.isArray(_data["PaymentDetails"])) {
                this.paymentDetails = [] as any;
                for (let item of _data["PaymentDetails"])
                    this.paymentDetails!.push(PaymentDetails_EventTicket.fromJS(item));
            }
            else {
                this.paymentDetails = <any>null;
            }
            this.isUnAssigned = _data["IsUnAssigned"] !== undefined ? _data["IsUnAssigned"] : <any>null;
            this.cancellationPercent = _data["CancellationPercent"] !== undefined ? _data["CancellationPercent"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
        }
    }

    static fromJS(data: any): EventTicketViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventTicketViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["IsRemoved"] = this.isRemoved !== undefined ? this.isRemoved : <any>null;
        data["TicketId"] = this.ticketId !== undefined ? this.ticketId : <any>null;
        data["FeeGroup"] = this.feeGroup !== undefined ? this.feeGroup : <any>null;
        data["FeeName"] = this.feeName !== undefined ? this.feeName : <any>null;
        data["FeeAmount"] = this.feeAmount !== undefined ? this.feeAmount : <any>null;
        data["ForCurrentGroup"] = this.forCurrentGroup !== undefined ? this.forCurrentGroup : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["IsSelectedForPayment"] = this.isSelectedForPayment !== undefined ? this.isSelectedForPayment : <any>null;
        data["IsPaidTicket"] = this.isPaidTicket !== undefined ? this.isPaidTicket : <any>null;
        data["IsPaymentInitiated"] = this.isPaymentInitiated !== undefined ? this.isPaymentInitiated : <any>null;
        data["WaitingForApproval"] = this.waitingForApproval !== undefined ? this.waitingForApproval : <any>null;
        data["FeeMembershipTypeId"] = this.feeMembershipTypeId !== undefined ? this.feeMembershipTypeId : <any>null;
        data["IsExchanged"] = this.isExchanged !== undefined ? this.isExchanged : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["VATPercentage"] = this.vATPercentage !== undefined ? this.vATPercentage : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["DeadLineName"] = this.deadLineName !== undefined ? this.deadLineName : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["ConfirmationLetterId"] = this.confirmationLetterId !== undefined ? this.confirmationLetterId : <any>null;
        data["IsConfirmationLetterRequired"] = this.isConfirmationLetterRequired !== undefined ? this.isConfirmationLetterRequired : <any>null;
        data["AccompanyPerson"] = this.accompanyPerson ? this.accompanyPerson.toJSON() : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        data["IsPartialPaid"] = this.isPartialPaid !== undefined ? this.isPartialPaid : <any>null;
        if (Array.isArray(this.paymentDetails)) {
            data["PaymentDetails"] = [];
            for (let item of this.paymentDetails)
                data["PaymentDetails"].push(item.toJSON());
        }
        data["IsUnAssigned"] = this.isUnAssigned !== undefined ? this.isUnAssigned : <any>null;
        data["CancellationPercent"] = this.cancellationPercent !== undefined ? this.cancellationPercent : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        return data;
    }
}

export interface IEventTicketViewModel {
    feeId?: number | null;
    userId?: string | null;
    isRemoved?: boolean | null;
    ticketId?: number | null;
    feeGroup?: string | null;
    feeName?: string | null;
    feeAmount?: number | null;
    forCurrentGroup?: boolean | null;
    isSelected?: boolean | null;
    accountId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isSelectedForPayment?: boolean | null;
    isPaidTicket?: boolean | null;
    isPaymentInitiated?: boolean | null;
    waitingForApproval?: boolean | null;
    feeMembershipTypeId?: number | null;
    isExchanged?: boolean | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    totalAmount?: number | null;
    eventId?: number | null;
    applicableTo?: number | null;
    deadLineName?: string | null;
    quantity?: number | null;
    feeCategoryId?: number | null;
    confirmationLetterId?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    accompanyPerson?: AccompanyPersonViewModal | null;
    parentFeeId?: number | null;
    isPartialPaid?: boolean | null;
    paymentDetails?: PaymentDetails_EventTicket[] | null;
    isUnAssigned?: boolean | null;
    cancellationPercent?: number | null;
    city?: string | null;
    countryName?: string | null;
    vATShortCode?: string | null;
}

export class ShowPaymentViewModel implements IShowPaymentViewModel {
    creditNote?: CreditNote | null;
    paymentTransactionId?: number | null;
    canceledDate?: Date | null;
    paymentDate?: Date | null;
    invoiceDate?: Date | null;
    invoiceNumber?: string | null;
    paymentDemandNumber?: string | null;
    paymentAmount?: number | null;
    paymentRefno?: string | null;
    paid?: boolean | null;
    paymentMode?: string | null;
    isPDGenrated?: boolean | null;
    isInvoiceGenrated?: boolean | null;
    isInvoiceCanceled?: boolean | null;
    paymentCanceledDate?: Date | null;
    invoiceId?: number | null;
    paymentDemandId?: number | null;
    isMembershipSaved?: boolean | null;
    invoiceAddress?: UserAddressModel | null;
    membershipTypeDescription?: string | null;
    subscriptionAmount?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    eventDescription?: string | null;
    amount?: number | null;
    ticketCount?: number | null;
    paymentTypeId?: number | null;
    isCancelled?: boolean | null;
    paymentReferenceId?: number | null;
    paymentDemandAddressId?: number | null;
    paymentDemandDetails?: PaymentDemandDetailsViewModel[] | null;
    isRefunded?: boolean | null;
    eventBadgeId?: number | null;
    handHeldReference?: string | null;
    isDiscountApplied?: boolean | null;

    constructor(data?: IShowPaymentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.creditNote = _data["CreditNote"] ? CreditNote.fromJS(_data["CreditNote"]) : <any>null;
            this.paymentTransactionId = _data["PaymentTransactionId"] !== undefined ? _data["PaymentTransactionId"] : <any>null;
            this.canceledDate = _data["CanceledDate"] ? new Date(_data["CanceledDate"].toString()) : <any>null;
            this.paymentDate = _data["PaymentDate"] ? new Date(_data["PaymentDate"].toString()) : <any>null;
            this.invoiceDate = _data["InvoiceDate"] ? new Date(_data["InvoiceDate"].toString()) : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.paymentAmount = _data["PaymentAmount"] !== undefined ? _data["PaymentAmount"] : <any>null;
            this.paymentRefno = _data["PaymentRefno"] !== undefined ? _data["PaymentRefno"] : <any>null;
            this.paid = _data["Paid"] !== undefined ? _data["Paid"] : <any>null;
            this.paymentMode = _data["PaymentMode"] !== undefined ? _data["PaymentMode"] : <any>null;
            this.isPDGenrated = _data["IsPDGenrated"] !== undefined ? _data["IsPDGenrated"] : <any>null;
            this.isInvoiceGenrated = _data["IsInvoiceGenrated"] !== undefined ? _data["IsInvoiceGenrated"] : <any>null;
            this.isInvoiceCanceled = _data["IsInvoiceCanceled"] !== undefined ? _data["IsInvoiceCanceled"] : <any>null;
            this.paymentCanceledDate = _data["PaymentCanceledDate"] ? new Date(_data["PaymentCanceledDate"].toString()) : <any>null;
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.isMembershipSaved = _data["IsMembershipSaved"] !== undefined ? _data["IsMembershipSaved"] : <any>null;
            this.invoiceAddress = _data["InvoiceAddress"] ? UserAddressModel.fromJS(_data["InvoiceAddress"]) : <any>null;
            this.membershipTypeDescription = _data["MembershipTypeDescription"] !== undefined ? _data["MembershipTypeDescription"] : <any>null;
            this.subscriptionAmount = _data["SubscriptionAmount"] !== undefined ? _data["SubscriptionAmount"] : <any>null;
            this.isInvoiceWaitingForApproval = _data["IsInvoiceWaitingForApproval"] !== undefined ? _data["IsInvoiceWaitingForApproval"] : <any>null;
            this.eventDescription = _data["EventDescription"] !== undefined ? _data["EventDescription"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.ticketCount = _data["TicketCount"] !== undefined ? _data["TicketCount"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.isCancelled = _data["IsCancelled"] !== undefined ? _data["IsCancelled"] : <any>null;
            this.paymentReferenceId = _data["PaymentReferenceId"] !== undefined ? _data["PaymentReferenceId"] : <any>null;
            this.paymentDemandAddressId = _data["PaymentDemandAddressId"] !== undefined ? _data["PaymentDemandAddressId"] : <any>null;
            if (Array.isArray(_data["PaymentDemandDetails"])) {
                this.paymentDemandDetails = [] as any;
                for (let item of _data["PaymentDemandDetails"])
                    this.paymentDemandDetails!.push(PaymentDemandDetailsViewModel.fromJS(item));
            }
            else {
                this.paymentDemandDetails = <any>null;
            }
            this.isRefunded = _data["IsRefunded"] !== undefined ? _data["IsRefunded"] : <any>null;
            this.eventBadgeId = _data["EventBadgeId"] !== undefined ? _data["EventBadgeId"] : <any>null;
            this.handHeldReference = _data["HandHeldReference"] !== undefined ? _data["HandHeldReference"] : <any>null;
            this.isDiscountApplied = _data["IsDiscountApplied"] !== undefined ? _data["IsDiscountApplied"] : <any>null;
        }
    }

    static fromJS(data: any): ShowPaymentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ShowPaymentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CreditNote"] = this.creditNote ? this.creditNote.toJSON() : <any>null;
        data["PaymentTransactionId"] = this.paymentTransactionId !== undefined ? this.paymentTransactionId : <any>null;
        data["CanceledDate"] = this.canceledDate ? this.canceledDate.toISOString() : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["PaymentAmount"] = this.paymentAmount !== undefined ? this.paymentAmount : <any>null;
        data["PaymentRefno"] = this.paymentRefno !== undefined ? this.paymentRefno : <any>null;
        data["Paid"] = this.paid !== undefined ? this.paid : <any>null;
        data["PaymentMode"] = this.paymentMode !== undefined ? this.paymentMode : <any>null;
        data["IsPDGenrated"] = this.isPDGenrated !== undefined ? this.isPDGenrated : <any>null;
        data["IsInvoiceGenrated"] = this.isInvoiceGenrated !== undefined ? this.isInvoiceGenrated : <any>null;
        data["IsInvoiceCanceled"] = this.isInvoiceCanceled !== undefined ? this.isInvoiceCanceled : <any>null;
        data["PaymentCanceledDate"] = this.paymentCanceledDate ? this.paymentCanceledDate.toISOString() : <any>null;
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["IsMembershipSaved"] = this.isMembershipSaved !== undefined ? this.isMembershipSaved : <any>null;
        data["InvoiceAddress"] = this.invoiceAddress ? this.invoiceAddress.toJSON() : <any>null;
        data["MembershipTypeDescription"] = this.membershipTypeDescription !== undefined ? this.membershipTypeDescription : <any>null;
        data["SubscriptionAmount"] = this.subscriptionAmount !== undefined ? this.subscriptionAmount : <any>null;
        data["IsInvoiceWaitingForApproval"] = this.isInvoiceWaitingForApproval !== undefined ? this.isInvoiceWaitingForApproval : <any>null;
        data["EventDescription"] = this.eventDescription !== undefined ? this.eventDescription : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["TicketCount"] = this.ticketCount !== undefined ? this.ticketCount : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["IsCancelled"] = this.isCancelled !== undefined ? this.isCancelled : <any>null;
        data["PaymentReferenceId"] = this.paymentReferenceId !== undefined ? this.paymentReferenceId : <any>null;
        data["PaymentDemandAddressId"] = this.paymentDemandAddressId !== undefined ? this.paymentDemandAddressId : <any>null;
        if (Array.isArray(this.paymentDemandDetails)) {
            data["PaymentDemandDetails"] = [];
            for (let item of this.paymentDemandDetails)
                data["PaymentDemandDetails"].push(item.toJSON());
        }
        data["IsRefunded"] = this.isRefunded !== undefined ? this.isRefunded : <any>null;
        data["EventBadgeId"] = this.eventBadgeId !== undefined ? this.eventBadgeId : <any>null;
        data["HandHeldReference"] = this.handHeldReference !== undefined ? this.handHeldReference : <any>null;
        data["IsDiscountApplied"] = this.isDiscountApplied !== undefined ? this.isDiscountApplied : <any>null;
        return data;
    }
}

export interface IShowPaymentViewModel {
    creditNote?: CreditNote | null;
    paymentTransactionId?: number | null;
    canceledDate?: Date | null;
    paymentDate?: Date | null;
    invoiceDate?: Date | null;
    invoiceNumber?: string | null;
    paymentDemandNumber?: string | null;
    paymentAmount?: number | null;
    paymentRefno?: string | null;
    paid?: boolean | null;
    paymentMode?: string | null;
    isPDGenrated?: boolean | null;
    isInvoiceGenrated?: boolean | null;
    isInvoiceCanceled?: boolean | null;
    paymentCanceledDate?: Date | null;
    invoiceId?: number | null;
    paymentDemandId?: number | null;
    isMembershipSaved?: boolean | null;
    invoiceAddress?: UserAddressModel | null;
    membershipTypeDescription?: string | null;
    subscriptionAmount?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    eventDescription?: string | null;
    amount?: number | null;
    ticketCount?: number | null;
    paymentTypeId?: number | null;
    isCancelled?: boolean | null;
    paymentReferenceId?: number | null;
    paymentDemandAddressId?: number | null;
    paymentDemandDetails?: PaymentDemandDetailsViewModel[] | null;
    isRefunded?: boolean | null;
    eventBadgeId?: number | null;
    handHeldReference?: string | null;
    isDiscountApplied?: boolean | null;
}

export class OnsiteContact implements IOnsiteContact {
    firstName?: string | null;
    lastName?: string | null;
    titleId?: number | null;
    mobile?: string | null;
    email?: string | null;

    constructor(data?: IOnsiteContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.titleId = _data["TitleId"] !== undefined ? _data["TitleId"] : <any>null;
            this.mobile = _data["Mobile"] !== undefined ? _data["Mobile"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
        }
    }

    static fromJS(data: any): OnsiteContact {
        data = typeof data === 'object' ? data : {};
        let result = new OnsiteContact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["TitleId"] = this.titleId !== undefined ? this.titleId : <any>null;
        data["Mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        return data;
    }
}

export interface IOnsiteContact {
    firstName?: string | null;
    lastName?: string | null;
    titleId?: number | null;
    mobile?: string | null;
    email?: string | null;
}

export class EventGroupMemberViewModel implements IEventGroupMemberViewModel {
    groupMemberId?: number | null;
    userId?: string | null;
    groupId?: number | null;
    isRemoved?: boolean | null;
    email?: string | null;
    accountId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    city?: string | null;
    countryName?: string | null;
    totalTicketAmount?: number | null;
    invoiceNumbers?: string[] | null;
    status?: string | null;
    participantTickets?: EventTicketViewModel[] | null;
    eventId?: number | null;
    isSelected?: boolean | null;
    isBoughtTicket?: boolean | null;
    membershipTypeId?: number | null;
    feeId?: number | null;
    isApplicable?: boolean | null;
    applicableText?: string | null;
    isAllowedToBuy?: boolean | null;
    institute?: string | null;

    constructor(data?: IEventGroupMemberViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupMemberId = _data["GroupMemberId"] !== undefined ? _data["GroupMemberId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.isRemoved = _data["IsRemoved"] !== undefined ? _data["IsRemoved"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.city = _data["City"] !== undefined ? _data["City"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.totalTicketAmount = _data["TotalTicketAmount"] !== undefined ? _data["TotalTicketAmount"] : <any>null;
            if (Array.isArray(_data["InvoiceNumbers"])) {
                this.invoiceNumbers = [] as any;
                for (let item of _data["InvoiceNumbers"])
                    this.invoiceNumbers!.push(item);
            }
            else {
                this.invoiceNumbers = <any>null;
            }
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            if (Array.isArray(_data["ParticipantTickets"])) {
                this.participantTickets = [] as any;
                for (let item of _data["ParticipantTickets"])
                    this.participantTickets!.push(EventTicketViewModel.fromJS(item));
            }
            else {
                this.participantTickets = <any>null;
            }
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.isBoughtTicket = _data["IsBoughtTicket"] !== undefined ? _data["IsBoughtTicket"] : <any>null;
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.isApplicable = _data["IsApplicable"] !== undefined ? _data["IsApplicable"] : <any>null;
            this.applicableText = _data["ApplicableText"] !== undefined ? _data["ApplicableText"] : <any>null;
            this.isAllowedToBuy = _data["IsAllowedToBuy"] !== undefined ? _data["IsAllowedToBuy"] : <any>null;
            this.institute = _data["Institute"] !== undefined ? _data["Institute"] : <any>null;
        }
    }

    static fromJS(data: any): EventGroupMemberViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventGroupMemberViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["GroupMemberId"] = this.groupMemberId !== undefined ? this.groupMemberId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["IsRemoved"] = this.isRemoved !== undefined ? this.isRemoved : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["City"] = this.city !== undefined ? this.city : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["TotalTicketAmount"] = this.totalTicketAmount !== undefined ? this.totalTicketAmount : <any>null;
        if (Array.isArray(this.invoiceNumbers)) {
            data["InvoiceNumbers"] = [];
            for (let item of this.invoiceNumbers)
                data["InvoiceNumbers"].push(item);
        }
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        if (Array.isArray(this.participantTickets)) {
            data["ParticipantTickets"] = [];
            for (let item of this.participantTickets)
                data["ParticipantTickets"].push(item.toJSON());
        }
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["IsBoughtTicket"] = this.isBoughtTicket !== undefined ? this.isBoughtTicket : <any>null;
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["IsApplicable"] = this.isApplicable !== undefined ? this.isApplicable : <any>null;
        data["ApplicableText"] = this.applicableText !== undefined ? this.applicableText : <any>null;
        data["IsAllowedToBuy"] = this.isAllowedToBuy !== undefined ? this.isAllowedToBuy : <any>null;
        data["Institute"] = this.institute !== undefined ? this.institute : <any>null;
        return data;
    }
}

export interface IEventGroupMemberViewModel {
    groupMemberId?: number | null;
    userId?: string | null;
    groupId?: number | null;
    isRemoved?: boolean | null;
    email?: string | null;
    accountId?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    city?: string | null;
    countryName?: string | null;
    totalTicketAmount?: number | null;
    invoiceNumbers?: string[] | null;
    status?: string | null;
    participantTickets?: EventTicketViewModel[] | null;
    eventId?: number | null;
    isSelected?: boolean | null;
    isBoughtTicket?: boolean | null;
    membershipTypeId?: number | null;
    feeId?: number | null;
    isApplicable?: boolean | null;
    applicableText?: string | null;
    isAllowedToBuy?: boolean | null;
    institute?: string | null;
}

export class EventFeeViewModel implements IEventFeeViewModel {
    isRemoved?: boolean | null;
    isSelected?: boolean | null;
    totalAmount?: number | null;
    ticketId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicketViewModel[] | null;
    id?: number | null;
    name?: string | null;
    feeTypeId?: number | null;
    feeType?: string | null;
    description?: string | null;
    registrationLimit?: number | null;
    netFee?: number | null;
    applicableTo?: string | null;
    sortOrder?: number | null;
    eventId?: number | null;
    feeGroupId?: number | null;
    feeGroup?: string | null;
    deadlineId?: number | null;
    deadLine?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    forCurrentGroup?: boolean | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    grossAmount?: number | null;
    mutualExclusiveId?: number | null;
    isRegistered?: boolean | null;
    quantity?: number | null;
    oldQuantity?: number | null;
    limit?: number | null;
    isDeletable?: boolean | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    maxQuantityPerPerson?: number | null;
    mutualExclusiveName?: string | null;
    feeCategoryId?: number | null;
    hasRegistrationLimit?: boolean | null;
    hasMaxTicket?: boolean | null;
    isApplicableToEditable?: boolean | null;
    isVisibleToAdminEditable?: boolean | null;
    applicableMemberTypes?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    eventFeeAttendanceGroup?: AttendanceGroupDTO[] | null;
    vATShortCode?: string | null;

    constructor(data?: IEventFeeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isRemoved = _data["IsRemoved"] !== undefined ? _data["IsRemoved"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.ticketId = _data["TicketId"] !== undefined ? _data["TicketId"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicketViewModel.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.feeTypeId = _data["FeeTypeId"] !== undefined ? _data["FeeTypeId"] : <any>null;
            this.feeType = _data["FeeType"] !== undefined ? _data["FeeType"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.netFee = _data["NetFee"] !== undefined ? _data["NetFee"] : <any>null;
            this.applicableTo = _data["ApplicableTo"] !== undefined ? _data["ApplicableTo"] : <any>null;
            this.sortOrder = _data["SortOrder"] !== undefined ? _data["SortOrder"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.feeGroupId = _data["FeeGroupId"] !== undefined ? _data["FeeGroupId"] : <any>null;
            this.feeGroup = _data["FeeGroup"] !== undefined ? _data["FeeGroup"] : <any>null;
            this.deadlineId = _data["DeadlineId"] !== undefined ? _data["DeadlineId"] : <any>null;
            this.deadLine = _data["DeadLine"] !== undefined ? _data["DeadLine"] : <any>null;
            this.validFrom = _data["ValidFrom"] ? new Date(_data["ValidFrom"].toString()) : <any>null;
            this.validTill = _data["ValidTill"] ? new Date(_data["ValidTill"].toString()) : <any>null;
            this.forCurrentGroup = _data["ForCurrentGroup"] !== undefined ? _data["ForCurrentGroup"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.vATPercentage = _data["VATPercentage"] !== undefined ? _data["VATPercentage"] : <any>null;
            this.grossAmount = _data["GrossAmount"] !== undefined ? _data["GrossAmount"] : <any>null;
            this.mutualExclusiveId = _data["MutualExclusiveId"] !== undefined ? _data["MutualExclusiveId"] : <any>null;
            this.isRegistered = _data["IsRegistered"] !== undefined ? _data["IsRegistered"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.oldQuantity = _data["OldQuantity"] !== undefined ? _data["OldQuantity"] : <any>null;
            this.limit = _data["Limit"] !== undefined ? _data["Limit"] : <any>null;
            this.isDeletable = _data["IsDeletable"] !== undefined ? _data["IsDeletable"] : <any>null;
            this.isAdmin = _data["IsAdmin"] !== undefined ? _data["IsAdmin"] : <any>null;
            this.shortCode = _data["ShortCode"] !== undefined ? _data["ShortCode"] : <any>null;
            this.maxQuantityPerPerson = _data["MaxQuantityPerPerson"] !== undefined ? _data["MaxQuantityPerPerson"] : <any>null;
            this.mutualExclusiveName = _data["MutualExclusiveName"] !== undefined ? _data["MutualExclusiveName"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.hasRegistrationLimit = _data["HasRegistrationLimit"] !== undefined ? _data["HasRegistrationLimit"] : <any>null;
            this.hasMaxTicket = _data["HasMaxTicket"] !== undefined ? _data["HasMaxTicket"] : <any>null;
            this.isApplicableToEditable = _data["IsApplicableToEditable"] !== undefined ? _data["IsApplicableToEditable"] : <any>null;
            this.isVisibleToAdminEditable = _data["IsVisibleToAdminEditable"] !== undefined ? _data["IsVisibleToAdminEditable"] : <any>null;
            this.applicableMemberTypes = _data["ApplicableMemberTypes"] !== undefined ? _data["ApplicableMemberTypes"] : <any>null;
            this.isConfirmationLetterRequired = _data["IsConfirmationLetterRequired"] !== undefined ? _data["IsConfirmationLetterRequired"] : <any>null;
            if (Array.isArray(_data["EventFeeAttendanceGroup"])) {
                this.eventFeeAttendanceGroup = [] as any;
                for (let item of _data["EventFeeAttendanceGroup"])
                    this.eventFeeAttendanceGroup!.push(AttendanceGroupDTO.fromJS(item));
            }
            else {
                this.eventFeeAttendanceGroup = <any>null;
            }
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
        }
    }

    static fromJS(data: any): EventFeeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventFeeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsRemoved"] = this.isRemoved !== undefined ? this.isRemoved : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["TicketId"] = this.ticketId !== undefined ? this.ticketId : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["FeeTypeId"] = this.feeTypeId !== undefined ? this.feeTypeId : <any>null;
        data["FeeType"] = this.feeType !== undefined ? this.feeType : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["NetFee"] = this.netFee !== undefined ? this.netFee : <any>null;
        data["ApplicableTo"] = this.applicableTo !== undefined ? this.applicableTo : <any>null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["FeeGroupId"] = this.feeGroupId !== undefined ? this.feeGroupId : <any>null;
        data["FeeGroup"] = this.feeGroup !== undefined ? this.feeGroup : <any>null;
        data["DeadlineId"] = this.deadlineId !== undefined ? this.deadlineId : <any>null;
        data["DeadLine"] = this.deadLine !== undefined ? this.deadLine : <any>null;
        data["ValidFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["ValidTill"] = this.validTill ? this.validTill.toISOString() : <any>null;
        data["ForCurrentGroup"] = this.forCurrentGroup !== undefined ? this.forCurrentGroup : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["VATPercentage"] = this.vATPercentage !== undefined ? this.vATPercentage : <any>null;
        data["GrossAmount"] = this.grossAmount !== undefined ? this.grossAmount : <any>null;
        data["MutualExclusiveId"] = this.mutualExclusiveId !== undefined ? this.mutualExclusiveId : <any>null;
        data["IsRegistered"] = this.isRegistered !== undefined ? this.isRegistered : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["OldQuantity"] = this.oldQuantity !== undefined ? this.oldQuantity : <any>null;
        data["Limit"] = this.limit !== undefined ? this.limit : <any>null;
        data["IsDeletable"] = this.isDeletable !== undefined ? this.isDeletable : <any>null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : <any>null;
        data["ShortCode"] = this.shortCode !== undefined ? this.shortCode : <any>null;
        data["MaxQuantityPerPerson"] = this.maxQuantityPerPerson !== undefined ? this.maxQuantityPerPerson : <any>null;
        data["MutualExclusiveName"] = this.mutualExclusiveName !== undefined ? this.mutualExclusiveName : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["HasRegistrationLimit"] = this.hasRegistrationLimit !== undefined ? this.hasRegistrationLimit : <any>null;
        data["HasMaxTicket"] = this.hasMaxTicket !== undefined ? this.hasMaxTicket : <any>null;
        data["IsApplicableToEditable"] = this.isApplicableToEditable !== undefined ? this.isApplicableToEditable : <any>null;
        data["IsVisibleToAdminEditable"] = this.isVisibleToAdminEditable !== undefined ? this.isVisibleToAdminEditable : <any>null;
        data["ApplicableMemberTypes"] = this.applicableMemberTypes !== undefined ? this.applicableMemberTypes : <any>null;
        data["IsConfirmationLetterRequired"] = this.isConfirmationLetterRequired !== undefined ? this.isConfirmationLetterRequired : <any>null;
        if (Array.isArray(this.eventFeeAttendanceGroup)) {
            data["EventFeeAttendanceGroup"] = [];
            for (let item of this.eventFeeAttendanceGroup)
                data["EventFeeAttendanceGroup"].push(item.toJSON());
        }
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        return data;
    }
}

export interface IEventFeeViewModel {
    isRemoved?: boolean | null;
    isSelected?: boolean | null;
    totalAmount?: number | null;
    ticketId?: number | null;
    isActive?: boolean | null;
    eventTicket?: EventTicketViewModel[] | null;
    id?: number | null;
    name?: string | null;
    feeTypeId?: number | null;
    feeType?: string | null;
    description?: string | null;
    registrationLimit?: number | null;
    netFee?: number | null;
    applicableTo?: string | null;
    sortOrder?: number | null;
    eventId?: number | null;
    feeGroupId?: number | null;
    feeGroup?: string | null;
    deadlineId?: number | null;
    deadLine?: string | null;
    validFrom?: Date | null;
    validTill?: Date | null;
    forCurrentGroup?: boolean | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    grossAmount?: number | null;
    mutualExclusiveId?: number | null;
    isRegistered?: boolean | null;
    quantity?: number | null;
    oldQuantity?: number | null;
    limit?: number | null;
    isDeletable?: boolean | null;
    isAdmin?: boolean | null;
    shortCode?: string | null;
    maxQuantityPerPerson?: number | null;
    mutualExclusiveName?: string | null;
    feeCategoryId?: number | null;
    hasRegistrationLimit?: boolean | null;
    hasMaxTicket?: boolean | null;
    isApplicableToEditable?: boolean | null;
    isVisibleToAdminEditable?: boolean | null;
    applicableMemberTypes?: number | null;
    isConfirmationLetterRequired?: boolean | null;
    eventFeeAttendanceGroup?: AttendanceGroupDTO[] | null;
    vATShortCode?: string | null;
}

export class PaymentTypeViewModel implements IPaymentTypeViewModel {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;

    constructor(data?: IPaymentTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface IPaymentTypeViewModel {
    id?: number | null;
    name?: string | null;
    isActive?: boolean | null;
}

export class AccompanyPersonViewModal implements IAccompanyPersonViewModal {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    accountId?: number | null;
    eventRegistrationId?: number | null;
    parentFeeId?: number | null;

    constructor(data?: IAccompanyPersonViewModal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
        }
    }

    static fromJS(data: any): AccompanyPersonViewModal {
        data = typeof data === 'object' ? data : {};
        let result = new AccompanyPersonViewModal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        return data;
    }
}

export interface IAccompanyPersonViewModal {
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    accountId?: number | null;
    eventRegistrationId?: number | null;
    parentFeeId?: number | null;
}

export class PaymentDemandDetailsViewModel implements IPaymentDemandDetailsViewModel {
    id?: number | null;
    quantity?: number | null;
    paymentDemandId?: number | null;
    unitPrice?: number | null;
    vAT?: number | null;
    vATAmount?: number | null;
    amount?: number | null;
    discountedAmount?: number | null;
    feeId?: number | null;
    description?: string | null;
    feeName?: string | null;
    feeCategoryId?: number | null;

    constructor(data?: IPaymentDemandDetailsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.unitPrice = _data["UnitPrice"] !== undefined ? _data["UnitPrice"] : <any>null;
            this.vAT = _data["VAT"] !== undefined ? _data["VAT"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.discountedAmount = _data["DiscountedAmount"] !== undefined ? _data["DiscountedAmount"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.feeName = _data["FeeName"] !== undefined ? _data["FeeName"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentDemandDetailsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDemandDetailsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["UnitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        data["VAT"] = this.vAT !== undefined ? this.vAT : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["DiscountedAmount"] = this.discountedAmount !== undefined ? this.discountedAmount : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["FeeName"] = this.feeName !== undefined ? this.feeName : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        return data;
    }
}

export interface IPaymentDemandDetailsViewModel {
    id?: number | null;
    quantity?: number | null;
    paymentDemandId?: number | null;
    unitPrice?: number | null;
    vAT?: number | null;
    vATAmount?: number | null;
    amount?: number | null;
    discountedAmount?: number | null;
    feeId?: number | null;
    description?: string | null;
    feeName?: string | null;
    feeCategoryId?: number | null;
}

export class AttendanceGroupDTO implements IAttendanceGroupDTO {
    id?: number | null;
    name?: string | null;
    isSelected?: boolean | null;

    constructor(data?: IAttendanceGroupDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isSelected = _data["IsSelected"] !== undefined ? _data["IsSelected"] : <any>null;
        }
    }

    static fromJS(data: any): AttendanceGroupDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceGroupDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        return data;
    }
}

export interface IAttendanceGroupDTO {
    id?: number | null;
    name?: string | null;
    isSelected?: boolean | null;
}

export class CheckTicketStatusViewModel implements ICheckTicketStatusViewModel {
    isValidCount?: boolean | null;
    message?: string | null;

    constructor(data?: ICheckTicketStatusViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValidCount = _data["IsValidCount"] !== undefined ? _data["IsValidCount"] : <any>null;
            this.message = _data["Message"] !== undefined ? _data["Message"] : <any>null;
        }
    }

    static fromJS(data: any): CheckTicketStatusViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CheckTicketStatusViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsValidCount"] = this.isValidCount !== undefined ? this.isValidCount : <any>null;
        data["Message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export interface ICheckTicketStatusViewModel {
    isValidCount?: boolean | null;
    message?: string | null;
}

export class VatDetailsViewModel implements IVatDetailsViewModel {
    vatDetails?: VatDetailDTO[] | null;
    couponCode?: string | null;

    constructor(data?: IVatDetailsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["VatDetails"])) {
                this.vatDetails = [] as any;
                for (let item of _data["VatDetails"])
                    this.vatDetails!.push(VatDetailDTO.fromJS(item));
            }
            else {
                this.vatDetails = <any>null;
            }
            this.couponCode = _data["CouponCode"] !== undefined ? _data["CouponCode"] : <any>null;
        }
    }

    static fromJS(data: any): VatDetailsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new VatDetailsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vatDetails)) {
            data["VatDetails"] = [];
            for (let item of this.vatDetails)
                data["VatDetails"].push(item.toJSON());
        }
        data["CouponCode"] = this.couponCode !== undefined ? this.couponCode : <any>null;
        return data;
    }
}

export interface IVatDetailsViewModel {
    vatDetails?: VatDetailDTO[] | null;
    couponCode?: string | null;
}

export class VatDetailDTO implements IVatDetailDTO {
    venueCountryId?: number | null;
    customerCountryId?: number | null;
    customerVATNumber?: string | null;
    feeId?: number | null;
    netAmount?: number | null;
    discountAmount?: number | null;
    discountTitle?: string | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    totalAmount?: number | null;
    vatRegistrationNo?: string | null;
    feeName?: string | null;
    quantity?: number | null;
    feeCategoryId?: number | null;
    vATShortCode?: string | null;
    accompanyPerson?: AccompanyPersonBLViewModel | null;
    confirmationLetterId?: number | null;
    parentFeeId?: number | null;

    constructor(data?: IVatDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.venueCountryId = _data["VenueCountryId"] !== undefined ? _data["VenueCountryId"] : <any>null;
            this.customerCountryId = _data["CustomerCountryId"] !== undefined ? _data["CustomerCountryId"] : <any>null;
            this.customerVATNumber = _data["CustomerVATNumber"] !== undefined ? _data["CustomerVATNumber"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.netAmount = _data["NetAmount"] !== undefined ? _data["NetAmount"] : <any>null;
            this.discountAmount = _data["DiscountAmount"] !== undefined ? _data["DiscountAmount"] : <any>null;
            this.discountTitle = _data["DiscountTitle"] !== undefined ? _data["DiscountTitle"] : <any>null;
            this.vATAmount = _data["VATAmount"] !== undefined ? _data["VATAmount"] : <any>null;
            this.vATPercentage = _data["VATPercentage"] !== undefined ? _data["VATPercentage"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
            this.vatRegistrationNo = _data["VatRegistrationNo"] !== undefined ? _data["VatRegistrationNo"] : <any>null;
            this.feeName = _data["FeeName"] !== undefined ? _data["FeeName"] : <any>null;
            this.quantity = _data["Quantity"] !== undefined ? _data["Quantity"] : <any>null;
            this.feeCategoryId = _data["FeeCategoryId"] !== undefined ? _data["FeeCategoryId"] : <any>null;
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.accompanyPerson = _data["AccompanyPerson"] ? AccompanyPersonBLViewModel.fromJS(_data["AccompanyPerson"]) : <any>null;
            this.confirmationLetterId = _data["ConfirmationLetterId"] !== undefined ? _data["ConfirmationLetterId"] : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
        }
    }

    static fromJS(data: any): VatDetailDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VatDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["VenueCountryId"] = this.venueCountryId !== undefined ? this.venueCountryId : <any>null;
        data["CustomerCountryId"] = this.customerCountryId !== undefined ? this.customerCountryId : <any>null;
        data["CustomerVATNumber"] = this.customerVATNumber !== undefined ? this.customerVATNumber : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["NetAmount"] = this.netAmount !== undefined ? this.netAmount : <any>null;
        data["DiscountAmount"] = this.discountAmount !== undefined ? this.discountAmount : <any>null;
        data["DiscountTitle"] = this.discountTitle !== undefined ? this.discountTitle : <any>null;
        data["VATAmount"] = this.vATAmount !== undefined ? this.vATAmount : <any>null;
        data["VATPercentage"] = this.vATPercentage !== undefined ? this.vATPercentage : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["VatRegistrationNo"] = this.vatRegistrationNo !== undefined ? this.vatRegistrationNo : <any>null;
        data["FeeName"] = this.feeName !== undefined ? this.feeName : <any>null;
        data["Quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["FeeCategoryId"] = this.feeCategoryId !== undefined ? this.feeCategoryId : <any>null;
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["AccompanyPerson"] = this.accompanyPerson ? this.accompanyPerson.toJSON() : <any>null;
        data["ConfirmationLetterId"] = this.confirmationLetterId !== undefined ? this.confirmationLetterId : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        return data;
    }
}

export interface IVatDetailDTO {
    venueCountryId?: number | null;
    customerCountryId?: number | null;
    customerVATNumber?: string | null;
    feeId?: number | null;
    netAmount?: number | null;
    discountAmount?: number | null;
    discountTitle?: string | null;
    vATAmount?: number | null;
    vATPercentage?: number | null;
    totalAmount?: number | null;
    vatRegistrationNo?: string | null;
    feeName?: string | null;
    quantity?: number | null;
    feeCategoryId?: number | null;
    vATShortCode?: string | null;
    accompanyPerson?: AccompanyPersonBLViewModel | null;
    confirmationLetterId?: number | null;
    parentFeeId?: number | null;
}

export class AccompanyPersonBLViewModel implements IAccompanyPersonBLViewModel {
    eventId?: number | null;
    accountId?: number | null;
    userId?: string | null;
    eventRegistrationId?: number | null;
    feeId?: number | null;
    parentFeeId?: number | null;
    invoiceNumber?: string | null;
    invloiceId?: number | null;
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    eventTicket?: EventTicket[] | null;

    constructor(data?: IAccompanyPersonBLViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.eventRegistrationId = _data["EventRegistrationId"] !== undefined ? _data["EventRegistrationId"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.parentFeeId = _data["ParentFeeId"] !== undefined ? _data["ParentFeeId"] : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.invloiceId = _data["InvloiceId"] !== undefined ? _data["InvloiceId"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.createdBy = _data["CreatedBy"] !== undefined ? _data["CreatedBy"] : <any>null;
            this.createdOn = _data["CreatedOn"] ? new Date(_data["CreatedOn"].toString()) : <any>null;
            this.modifiedBy = _data["ModifiedBy"] !== undefined ? _data["ModifiedBy"] : <any>null;
            this.modifiedOn = _data["ModifiedOn"] ? new Date(_data["ModifiedOn"].toString()) : <any>null;
            this.user = _data["User"] ? User.fromJS(_data["User"]) : <any>null;
            this.user1 = _data["User1"] ? User.fromJS(_data["User1"]) : <any>null;
            if (Array.isArray(_data["EventTicket"])) {
                this.eventTicket = [] as any;
                for (let item of _data["EventTicket"])
                    this.eventTicket!.push(EventTicket.fromJS(item));
            }
            else {
                this.eventTicket = <any>null;
            }
        }
    }

    static fromJS(data: any): AccompanyPersonBLViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AccompanyPersonBLViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EventRegistrationId"] = this.eventRegistrationId !== undefined ? this.eventRegistrationId : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["ParentFeeId"] = this.parentFeeId !== undefined ? this.parentFeeId : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["InvloiceId"] = this.invloiceId !== undefined ? this.invloiceId : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreatedOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["ModifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : <any>null;
        data["ModifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>null;
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        data["User1"] = this.user1 ? this.user1.toJSON() : <any>null;
        if (Array.isArray(this.eventTicket)) {
            data["EventTicket"] = [];
            for (let item of this.eventTicket)
                data["EventTicket"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAccompanyPersonBLViewModel {
    eventId?: number | null;
    accountId?: number | null;
    userId?: string | null;
    eventRegistrationId?: number | null;
    feeId?: number | null;
    parentFeeId?: number | null;
    invoiceNumber?: string | null;
    invloiceId?: number | null;
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    id?: number | null;
    firstName?: string | null;
    lastName?: string | null;
    isActive?: boolean | null;
    createdBy?: string | null;
    createdOn?: Date | null;
    modifiedBy?: string | null;
    modifiedOn?: Date | null;
    user?: User | null;
    user1?: User | null;
    eventTicket?: EventTicket[] | null;
}

export class GetVATDetailsDTO implements IGetVATDetailsDTO {
    isValidVAT?: boolean | null;
    vATDetail?: VatDetailDTO[] | null;
    bankDetail?: BankDetailDTO | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;

    constructor(data?: IGetVATDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isValidVAT = _data["IsValidVAT"] !== undefined ? _data["IsValidVAT"] : <any>null;
            if (Array.isArray(_data["VATDetail"])) {
                this.vATDetail = [] as any;
                for (let item of _data["VATDetail"])
                    this.vATDetail!.push(VatDetailDTO.fromJS(item));
            }
            else {
                this.vATDetail = <any>null;
            }
            this.bankDetail = _data["BankDetail"] ? BankDetailDTO.fromJS(_data["BankDetail"]) : <any>null;
            this.vATShortCode = _data["VATShortCode"] !== undefined ? _data["VATShortCode"] : <any>null;
            this.isMultiVATShortCode = _data["IsMultiVATShortCode"] !== undefined ? _data["IsMultiVATShortCode"] : <any>null;
        }
    }

    static fromJS(data: any): GetVATDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GetVATDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsValidVAT"] = this.isValidVAT !== undefined ? this.isValidVAT : <any>null;
        if (Array.isArray(this.vATDetail)) {
            data["VATDetail"] = [];
            for (let item of this.vATDetail)
                data["VATDetail"].push(item.toJSON());
        }
        data["BankDetail"] = this.bankDetail ? this.bankDetail.toJSON() : <any>null;
        data["VATShortCode"] = this.vATShortCode !== undefined ? this.vATShortCode : <any>null;
        data["IsMultiVATShortCode"] = this.isMultiVATShortCode !== undefined ? this.isMultiVATShortCode : <any>null;
        return data;
    }
}

export interface IGetVATDetailsDTO {
    isValidVAT?: boolean | null;
    vATDetail?: VatDetailDTO[] | null;
    bankDetail?: BankDetailDTO | null;
    vATShortCode?: string | null;
    isMultiVATShortCode?: boolean | null;
}

export class RegistrationViewModel implements IRegistrationViewModel {
    paymentInfo?: ShowPaymentViewModel | null;
    redirectURL?: string | null;
    isDiscountApplied?: boolean | null;

    constructor(data?: IRegistrationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentInfo = _data["PaymentInfo"] ? ShowPaymentViewModel.fromJS(_data["PaymentInfo"]) : <any>null;
            this.redirectURL = _data["RedirectURL"] !== undefined ? _data["RedirectURL"] : <any>null;
            this.isDiscountApplied = _data["IsDiscountApplied"] !== undefined ? _data["IsDiscountApplied"] : <any>null;
        }
    }

    static fromJS(data: any): RegistrationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentInfo"] = this.paymentInfo ? this.paymentInfo.toJSON() : <any>null;
        data["RedirectURL"] = this.redirectURL !== undefined ? this.redirectURL : <any>null;
        data["IsDiscountApplied"] = this.isDiscountApplied !== undefined ? this.isDiscountApplied : <any>null;
        return data;
    }
}

export interface IRegistrationViewModel {
    paymentInfo?: ShowPaymentViewModel | null;
    redirectURL?: string | null;
    isDiscountApplied?: boolean | null;
}

export class EventArtifactsMobileViewModel implements IEventArtifactsMobileViewModel {
    eventDocuments?: EventArtifactsMobileDTO[] | null;
    eventName?: string | null;
    groupId?: number | null;
    documents?: DocumentMobileViewModel[] | null;
    memberSubscription?: MemberSubscriptionBLMobileViewModel | null;

    constructor(data?: IEventArtifactsMobileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["EventDocuments"])) {
                this.eventDocuments = [] as any;
                for (let item of _data["EventDocuments"])
                    this.eventDocuments!.push(EventArtifactsMobileDTO.fromJS(item));
            }
            else {
                this.eventDocuments = <any>null;
            }
            this.eventName = _data["EventName"] !== undefined ? _data["EventName"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(DocumentMobileViewModel.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
            this.memberSubscription = _data["MemberSubscription"] ? MemberSubscriptionBLMobileViewModel.fromJS(_data["MemberSubscription"]) : <any>null;
        }
    }

    static fromJS(data: any): EventArtifactsMobileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventArtifactsMobileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventDocuments)) {
            data["EventDocuments"] = [];
            for (let item of this.eventDocuments)
                data["EventDocuments"].push(item.toJSON());
        }
        data["EventName"] = this.eventName !== undefined ? this.eventName : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        data["MemberSubscription"] = this.memberSubscription ? this.memberSubscription.toJSON() : <any>null;
        return data;
    }
}

export interface IEventArtifactsMobileViewModel {
    eventDocuments?: EventArtifactsMobileDTO[] | null;
    eventName?: string | null;
    groupId?: number | null;
    documents?: DocumentMobileViewModel[] | null;
    memberSubscription?: MemberSubscriptionBLMobileViewModel | null;
}

export class EventArtifactsMobileDTO implements IEventArtifactsMobileDTO {
    name?: string | null;
    eventId?: number | null;
    documentType?: number | null;
    groupId?: number | null;
    exhibitorId?: number | null;
    exhibitorPersonId?: number | null;

    constructor(data?: IEventArtifactsMobileDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.documentType = _data["DocumentType"] !== undefined ? _data["DocumentType"] : <any>null;
            this.groupId = _data["GroupId"] !== undefined ? _data["GroupId"] : <any>null;
            this.exhibitorId = _data["ExhibitorId"] !== undefined ? _data["ExhibitorId"] : <any>null;
            this.exhibitorPersonId = _data["ExhibitorPersonId"] !== undefined ? _data["ExhibitorPersonId"] : <any>null;
        }
    }

    static fromJS(data: any): EventArtifactsMobileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventArtifactsMobileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["DocumentType"] = this.documentType !== undefined ? this.documentType : <any>null;
        data["GroupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["ExhibitorId"] = this.exhibitorId !== undefined ? this.exhibitorId : <any>null;
        data["ExhibitorPersonId"] = this.exhibitorPersonId !== undefined ? this.exhibitorPersonId : <any>null;
        return data;
    }
}

export interface IEventArtifactsMobileDTO {
    name?: string | null;
    eventId?: number | null;
    documentType?: number | null;
    groupId?: number | null;
    exhibitorId?: number | null;
    exhibitorPersonId?: number | null;
}

export class MemberSubscriptionBLMobileViewModel implements IMemberSubscriptionBLMobileViewModel {
    fromDate?: Date | null;
    toDate?: Date | null;

    constructor(data?: IMemberSubscriptionBLMobileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>null;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MemberSubscriptionBLMobileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberSubscriptionBLMobileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        return data;
    }
}

export interface IMemberSubscriptionBLMobileViewModel {
    fromDate?: Date | null;
    toDate?: Date | null;
}

export class DocumentContentViewModel implements IDocumentContentViewModel {
    contentInByte?: string | null;
    fileName?: string | null;
    fileNameWithExt?: string | null;
    contentType?: string | null;

    constructor(data?: IDocumentContentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.contentInByte = _data["ContentInByte"] !== undefined ? _data["ContentInByte"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.fileNameWithExt = _data["FileNameWithExt"] !== undefined ? _data["FileNameWithExt"] : <any>null;
            this.contentType = _data["ContentType"] !== undefined ? _data["ContentType"] : <any>null;
        }
    }

    static fromJS(data: any): DocumentContentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentContentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContentInByte"] = this.contentInByte !== undefined ? this.contentInByte : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["FileNameWithExt"] = this.fileNameWithExt !== undefined ? this.fileNameWithExt : <any>null;
        data["ContentType"] = this.contentType !== undefined ? this.contentType : <any>null;
        return data;
    }
}

export interface IDocumentContentViewModel {
    contentInByte?: string | null;
    fileName?: string | null;
    fileNameWithExt?: string | null;
    contentType?: string | null;
}

export class EventArtifactDTO implements IEventArtifactDTO {
    id?: number | null;
    eventId?: number | null;
    title?: string | null;
    isActive?: boolean | null;
    userId?: string | null;
    eventExhibitorPersonId?: number | null;
    documents?: EventArtifactDocumentDTO[] | null;
    comments?: string | null;
    userEventArtifactId?: number | null;
    status?: number | null;
    hasUserUploadedArtifacts?: boolean | null;

    constructor(data?: IEventArtifactDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.title = _data["Title"] !== undefined ? _data["Title"] : <any>null;
            this.isActive = _data["IsActive"] !== undefined ? _data["IsActive"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.eventExhibitorPersonId = _data["EventExhibitorPersonId"] !== undefined ? _data["EventExhibitorPersonId"] : <any>null;
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(EventArtifactDocumentDTO.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.userEventArtifactId = _data["UserEventArtifactId"] !== undefined ? _data["UserEventArtifactId"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.hasUserUploadedArtifacts = _data["HasUserUploadedArtifacts"] !== undefined ? _data["HasUserUploadedArtifacts"] : <any>null;
        }
    }

    static fromJS(data: any): EventArtifactDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventArtifactDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["Title"] = this.title !== undefined ? this.title : <any>null;
        data["IsActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["EventExhibitorPersonId"] = this.eventExhibitorPersonId !== undefined ? this.eventExhibitorPersonId : <any>null;
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["UserEventArtifactId"] = this.userEventArtifactId !== undefined ? this.userEventArtifactId : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["HasUserUploadedArtifacts"] = this.hasUserUploadedArtifacts !== undefined ? this.hasUserUploadedArtifacts : <any>null;
        return data;
    }
}

export interface IEventArtifactDTO {
    id?: number | null;
    eventId?: number | null;
    title?: string | null;
    isActive?: boolean | null;
    userId?: string | null;
    eventExhibitorPersonId?: number | null;
    documents?: EventArtifactDocumentDTO[] | null;
    comments?: string | null;
    userEventArtifactId?: number | null;
    status?: number | null;
    hasUserUploadedArtifacts?: boolean | null;
}

export class EventArtifactDocumentDTO implements IEventArtifactDocumentDTO {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    fileName?: string | null;
    isDeleted?: boolean | null;
    eventArtifactId?: number | null;

    constructor(data?: IEventArtifactDocumentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.isDeleted = _data["IsDeleted"] !== undefined ? _data["IsDeleted"] : <any>null;
            this.eventArtifactId = _data["EventArtifactId"] !== undefined ? _data["EventArtifactId"] : <any>null;
        }
    }

    static fromJS(data: any): EventArtifactDocumentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EventArtifactDocumentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["IsDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["EventArtifactId"] = this.eventArtifactId !== undefined ? this.eventArtifactId : <any>null;
        return data;
    }
}

export interface IEventArtifactDocumentDTO {
    id?: number | null;
    userId?: string | null;
    name?: string | null;
    fileName?: string | null;
    isDeleted?: boolean | null;
    eventArtifactId?: number | null;
}

export class MembershipMobileModel implements IMembershipMobileModel {
    canShowOtherMembershipDocuments?: boolean | null;
    membershipYearMobileModel?: MembershipYearMobileModel[] | null;
    certificates?: DocumentMobileViewModel[] | null;

    constructor(data?: IMembershipMobileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canShowOtherMembershipDocuments = _data["CanShowOtherMembershipDocuments"] !== undefined ? _data["CanShowOtherMembershipDocuments"] : <any>null;
            if (Array.isArray(_data["MembershipYearMobileModel"])) {
                this.membershipYearMobileModel = [] as any;
                for (let item of _data["MembershipYearMobileModel"])
                    this.membershipYearMobileModel!.push(MembershipYearMobileModel.fromJS(item));
            }
            else {
                this.membershipYearMobileModel = <any>null;
            }
            if (Array.isArray(_data["Certificates"])) {
                this.certificates = [] as any;
                for (let item of _data["Certificates"])
                    this.certificates!.push(DocumentMobileViewModel.fromJS(item));
            }
            else {
                this.certificates = <any>null;
            }
        }
    }

    static fromJS(data: any): MembershipMobileModel {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipMobileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CanShowOtherMembershipDocuments"] = this.canShowOtherMembershipDocuments !== undefined ? this.canShowOtherMembershipDocuments : <any>null;
        if (Array.isArray(this.membershipYearMobileModel)) {
            data["MembershipYearMobileModel"] = [];
            for (let item of this.membershipYearMobileModel)
                data["MembershipYearMobileModel"].push(item.toJSON());
        }
        if (Array.isArray(this.certificates)) {
            data["Certificates"] = [];
            for (let item of this.certificates)
                data["Certificates"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMembershipMobileModel {
    canShowOtherMembershipDocuments?: boolean | null;
    membershipYearMobileModel?: MembershipYearMobileModel[] | null;
    certificates?: DocumentMobileViewModel[] | null;
}

export class MembershipYearMobileModel implements IMembershipYearMobileModel {
    id?: number | null;
    fromDate?: string | null;
    toDate?: string | null;
    membershipType?: string | null;
    subscriptionStatus?: MembershipYearMobileModelSubscriptionStatus | null;

    constructor(data?: IMembershipYearMobileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.fromDate = _data["FromDate"] !== undefined ? _data["FromDate"] : <any>null;
            this.toDate = _data["ToDate"] !== undefined ? _data["ToDate"] : <any>null;
            this.membershipType = _data["MembershipType"] !== undefined ? _data["MembershipType"] : <any>null;
            this.subscriptionStatus = _data["SubscriptionStatus"] !== undefined ? _data["SubscriptionStatus"] : <any>null;
        }
    }

    static fromJS(data: any): MembershipYearMobileModel {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipYearMobileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["FromDate"] = this.fromDate !== undefined ? this.fromDate : <any>null;
        data["ToDate"] = this.toDate !== undefined ? this.toDate : <any>null;
        data["MembershipType"] = this.membershipType !== undefined ? this.membershipType : <any>null;
        data["SubscriptionStatus"] = this.subscriptionStatus !== undefined ? this.subscriptionStatus : <any>null;
        return data;
    }
}

export interface IMembershipYearMobileModel {
    id?: number | null;
    fromDate?: string | null;
    toDate?: string | null;
    membershipType?: string | null;
    subscriptionStatus?: MembershipYearMobileModelSubscriptionStatus | null;
}

export class MembershipArtifactsMobileViewModel implements IMembershipArtifactsMobileViewModel {
    documents?: DocumentMobileViewModel[] | null;
    memberSubscription?: MemberSubscriptionBLMobileViewModel | null;

    constructor(data?: IMembershipArtifactsMobileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(DocumentMobileViewModel.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
            this.memberSubscription = _data["MemberSubscription"] ? MemberSubscriptionBLMobileViewModel.fromJS(_data["MemberSubscription"]) : <any>null;
        }
    }

    static fromJS(data: any): MembershipArtifactsMobileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipArtifactsMobileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        data["MemberSubscription"] = this.memberSubscription ? this.memberSubscription.toJSON() : <any>null;
        return data;
    }
}

export interface IMembershipArtifactsMobileViewModel {
    documents?: DocumentMobileViewModel[] | null;
    memberSubscription?: MemberSubscriptionBLMobileViewModel | null;
}

export class NewSubscriptionViewModel implements INewSubscriptionViewModel {
    memberTypeId?: number | null;
    memberType?: string | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    userId?: string | null;
    lastSubscription?: LastSubscriptionViewModel | null;
    userAddress?: UserAddressModel | null;
    id?: number | null;
    paymentDemand?: PaymentDemandViewModel[] | null;
    paymentTypeId?: number | null;
    trainingCompletionYear?: number | null;
    subscriptionStatus?: number | null;
    isRemind?: boolean | null;
    paymentModeChange?: boolean | null;
    transferId?: number | null;
    referenceNo?: string | null;
    paymentDate?: string | null;
    internalReferenceNumber?: string | null;

    constructor(data?: INewSubscriptionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberTypeId = _data["MemberTypeId"] !== undefined ? _data["MemberTypeId"] : <any>null;
            this.memberType = _data["MemberType"] !== undefined ? _data["MemberType"] : <any>null;
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>null;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.lastSubscription = _data["LastSubscription"] ? LastSubscriptionViewModel.fromJS(_data["LastSubscription"]) : <any>null;
            this.userAddress = _data["UserAddress"] ? UserAddressModel.fromJS(_data["UserAddress"]) : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            if (Array.isArray(_data["PaymentDemand"])) {
                this.paymentDemand = [] as any;
                for (let item of _data["PaymentDemand"])
                    this.paymentDemand!.push(PaymentDemandViewModel.fromJS(item));
            }
            else {
                this.paymentDemand = <any>null;
            }
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.trainingCompletionYear = _data["TrainingCompletionYear"] !== undefined ? _data["TrainingCompletionYear"] : <any>null;
            this.subscriptionStatus = _data["SubscriptionStatus"] !== undefined ? _data["SubscriptionStatus"] : <any>null;
            this.isRemind = _data["IsRemind"] !== undefined ? _data["IsRemind"] : <any>null;
            this.paymentModeChange = _data["PaymentModeChange"] !== undefined ? _data["PaymentModeChange"] : <any>null;
            this.transferId = _data["TransferId"] !== undefined ? _data["TransferId"] : <any>null;
            this.referenceNo = _data["ReferenceNo"] !== undefined ? _data["ReferenceNo"] : <any>null;
            this.paymentDate = _data["PaymentDate"] !== undefined ? _data["PaymentDate"] : <any>null;
            this.internalReferenceNumber = _data["InternalReferenceNumber"] !== undefined ? _data["InternalReferenceNumber"] : <any>null;
        }
    }

    static fromJS(data: any): NewSubscriptionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new NewSubscriptionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberTypeId"] = this.memberTypeId !== undefined ? this.memberTypeId : <any>null;
        data["MemberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["LastSubscription"] = this.lastSubscription ? this.lastSubscription.toJSON() : <any>null;
        data["UserAddress"] = this.userAddress ? this.userAddress.toJSON() : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.paymentDemand)) {
            data["PaymentDemand"] = [];
            for (let item of this.paymentDemand)
                data["PaymentDemand"].push(item.toJSON());
        }
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["TrainingCompletionYear"] = this.trainingCompletionYear !== undefined ? this.trainingCompletionYear : <any>null;
        data["SubscriptionStatus"] = this.subscriptionStatus !== undefined ? this.subscriptionStatus : <any>null;
        data["IsRemind"] = this.isRemind !== undefined ? this.isRemind : <any>null;
        data["PaymentModeChange"] = this.paymentModeChange !== undefined ? this.paymentModeChange : <any>null;
        data["TransferId"] = this.transferId !== undefined ? this.transferId : <any>null;
        data["ReferenceNo"] = this.referenceNo !== undefined ? this.referenceNo : <any>null;
        data["PaymentDate"] = this.paymentDate !== undefined ? this.paymentDate : <any>null;
        data["InternalReferenceNumber"] = this.internalReferenceNumber !== undefined ? this.internalReferenceNumber : <any>null;
        return data;
    }
}

export interface INewSubscriptionViewModel {
    memberTypeId?: number | null;
    memberType?: string | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    userId?: string | null;
    lastSubscription?: LastSubscriptionViewModel | null;
    userAddress?: UserAddressModel | null;
    id?: number | null;
    paymentDemand?: PaymentDemandViewModel[] | null;
    paymentTypeId?: number | null;
    trainingCompletionYear?: number | null;
    subscriptionStatus?: number | null;
    isRemind?: boolean | null;
    paymentModeChange?: boolean | null;
    transferId?: number | null;
    referenceNo?: string | null;
    paymentDate?: string | null;
    internalReferenceNumber?: string | null;
}

export class LastSubscriptionViewModel implements ILastSubscriptionViewModel {
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;

    constructor(data?: ILastSubscriptionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberTypeId = _data["MemberTypeId"] !== undefined ? _data["MemberTypeId"] : <any>null;
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>null;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): LastSubscriptionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LastSubscriptionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberTypeId"] = this.memberTypeId !== undefined ? this.memberTypeId : <any>null;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        return data;
    }
}

export interface ILastSubscriptionViewModel {
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;
}

export class PaymentDemandViewModel implements IPaymentDemandViewModel {
    paymentDemandNumber?: string | null;
    paymentAmount?: number | null;
    isPDGenrated?: boolean | null;
    paymentDemandId?: number | null;
    invoiceDetails?: InvoiceViewModel[] | null;
    paymentReferenceId?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    paymentTransactionId?: number | null;
    initiatedOn?: Date | null;
    paymentTypeId?: number | null;
    paymentDemandDate?: Date | null;
    paymentTransactionStatus?: number | null;
    amount?: number | null;
    userId?: string | null;
    paid?: boolean | null;
    paymentDate?: Date | null;
    isCancelScholarship?: boolean | null;
    isPartialPaid?: boolean | null;
    balanceAmount?: number | null;
    cCPaymentDate?: Date | null;
    cCReferenceNumber?: string | null;
    cCInternalReferenceNumber?: string | null;
    feeIds?: number[] | null;
    isDiscounted?: boolean | null;
    discountedAmount?: number | null;

    constructor(data?: IPaymentDemandViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.paymentAmount = _data["PaymentAmount"] !== undefined ? _data["PaymentAmount"] : <any>null;
            this.isPDGenrated = _data["IsPDGenrated"] !== undefined ? _data["IsPDGenrated"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            if (Array.isArray(_data["InvoiceDetails"])) {
                this.invoiceDetails = [] as any;
                for (let item of _data["InvoiceDetails"])
                    this.invoiceDetails!.push(InvoiceViewModel.fromJS(item));
            }
            else {
                this.invoiceDetails = <any>null;
            }
            this.paymentReferenceId = _data["PaymentReferenceId"] !== undefined ? _data["PaymentReferenceId"] : <any>null;
            this.isInvoiceWaitingForApproval = _data["IsInvoiceWaitingForApproval"] !== undefined ? _data["IsInvoiceWaitingForApproval"] : <any>null;
            this.paymentTransactionId = _data["PaymentTransactionId"] !== undefined ? _data["PaymentTransactionId"] : <any>null;
            this.initiatedOn = _data["InitiatedOn"] ? new Date(_data["InitiatedOn"].toString()) : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.paymentDemandDate = _data["PaymentDemandDate"] ? new Date(_data["PaymentDemandDate"].toString()) : <any>null;
            this.paymentTransactionStatus = _data["PaymentTransactionStatus"] !== undefined ? _data["PaymentTransactionStatus"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.paid = _data["Paid"] !== undefined ? _data["Paid"] : <any>null;
            this.paymentDate = _data["PaymentDate"] ? new Date(_data["PaymentDate"].toString()) : <any>null;
            this.isCancelScholarship = _data["IsCancelScholarship"] !== undefined ? _data["IsCancelScholarship"] : <any>null;
            this.isPartialPaid = _data["IsPartialPaid"] !== undefined ? _data["IsPartialPaid"] : <any>null;
            this.balanceAmount = _data["BalanceAmount"] !== undefined ? _data["BalanceAmount"] : <any>null;
            this.cCPaymentDate = _data["CCPaymentDate"] ? new Date(_data["CCPaymentDate"].toString()) : <any>null;
            this.cCReferenceNumber = _data["CCReferenceNumber"] !== undefined ? _data["CCReferenceNumber"] : <any>null;
            this.cCInternalReferenceNumber = _data["CCInternalReferenceNumber"] !== undefined ? _data["CCInternalReferenceNumber"] : <any>null;
            if (Array.isArray(_data["FeeIds"])) {
                this.feeIds = [] as any;
                for (let item of _data["FeeIds"])
                    this.feeIds!.push(item);
            }
            else {
                this.feeIds = <any>null;
            }
            this.isDiscounted = _data["IsDiscounted"] !== undefined ? _data["IsDiscounted"] : <any>null;
            this.discountedAmount = _data["DiscountedAmount"] !== undefined ? _data["DiscountedAmount"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentDemandViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDemandViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["PaymentAmount"] = this.paymentAmount !== undefined ? this.paymentAmount : <any>null;
        data["IsPDGenrated"] = this.isPDGenrated !== undefined ? this.isPDGenrated : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        if (Array.isArray(this.invoiceDetails)) {
            data["InvoiceDetails"] = [];
            for (let item of this.invoiceDetails)
                data["InvoiceDetails"].push(item.toJSON());
        }
        data["PaymentReferenceId"] = this.paymentReferenceId !== undefined ? this.paymentReferenceId : <any>null;
        data["IsInvoiceWaitingForApproval"] = this.isInvoiceWaitingForApproval !== undefined ? this.isInvoiceWaitingForApproval : <any>null;
        data["PaymentTransactionId"] = this.paymentTransactionId !== undefined ? this.paymentTransactionId : <any>null;
        data["InitiatedOn"] = this.initiatedOn ? this.initiatedOn.toISOString() : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["PaymentDemandDate"] = this.paymentDemandDate ? this.paymentDemandDate.toISOString() : <any>null;
        data["PaymentTransactionStatus"] = this.paymentTransactionStatus !== undefined ? this.paymentTransactionStatus : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Paid"] = this.paid !== undefined ? this.paid : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["IsCancelScholarship"] = this.isCancelScholarship !== undefined ? this.isCancelScholarship : <any>null;
        data["IsPartialPaid"] = this.isPartialPaid !== undefined ? this.isPartialPaid : <any>null;
        data["BalanceAmount"] = this.balanceAmount !== undefined ? this.balanceAmount : <any>null;
        data["CCPaymentDate"] = this.cCPaymentDate ? this.cCPaymentDate.toISOString() : <any>null;
        data["CCReferenceNumber"] = this.cCReferenceNumber !== undefined ? this.cCReferenceNumber : <any>null;
        data["CCInternalReferenceNumber"] = this.cCInternalReferenceNumber !== undefined ? this.cCInternalReferenceNumber : <any>null;
        if (Array.isArray(this.feeIds)) {
            data["FeeIds"] = [];
            for (let item of this.feeIds)
                data["FeeIds"].push(item);
        }
        data["IsDiscounted"] = this.isDiscounted !== undefined ? this.isDiscounted : <any>null;
        data["DiscountedAmount"] = this.discountedAmount !== undefined ? this.discountedAmount : <any>null;
        return data;
    }
}

export interface IPaymentDemandViewModel {
    paymentDemandNumber?: string | null;
    paymentAmount?: number | null;
    isPDGenrated?: boolean | null;
    paymentDemandId?: number | null;
    invoiceDetails?: InvoiceViewModel[] | null;
    paymentReferenceId?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    paymentTransactionId?: number | null;
    initiatedOn?: Date | null;
    paymentTypeId?: number | null;
    paymentDemandDate?: Date | null;
    paymentTransactionStatus?: number | null;
    amount?: number | null;
    userId?: string | null;
    paid?: boolean | null;
    paymentDate?: Date | null;
    isCancelScholarship?: boolean | null;
    isPartialPaid?: boolean | null;
    balanceAmount?: number | null;
    cCPaymentDate?: Date | null;
    cCReferenceNumber?: string | null;
    cCInternalReferenceNumber?: string | null;
    feeIds?: number[] | null;
    isDiscounted?: boolean | null;
    discountedAmount?: number | null;
}

export class InvoiceViewModel implements IInvoiceViewModel {
    canceledDate?: Date | null;
    paymentDate?: Date | null;
    invoiceDate?: Date | null;
    invoiceNumber?: string | null;
    paymentRefno?: string | null;
    paid?: boolean | null;
    paymentMode?: string | null;
    paymentTypeId?: number | null;
    isPDGenrated?: boolean | null;
    isInvoiceGenrated?: boolean | null;
    isInvoiceCanceled?: boolean | null;
    paymentCanceledDate?: Date | null;
    invoiceId?: number | null;
    isMembershipSaved?: boolean | null;
    invoiceAddress?: UserAddressModel | null;
    membershipTypeDescription?: string | null;
    subscriptionAmount?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    eventDescription?: string | null;
    eventFee?: number | null;
    isCancelled?: boolean | null;
    creditNote?: CreditNoteViewModel[] | null;
    totalInvoiceAmount?: number | null;
    discountAmount?: number | null;
    isRefunded?: boolean | null;
    paymentTransactionId?: number | null;
    pDId?: number | null;
    pTTypeId?: number | null;
    paymentRefTypeId?: number | null;

    constructor(data?: IInvoiceViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canceledDate = _data["CanceledDate"] ? new Date(_data["CanceledDate"].toString()) : <any>null;
            this.paymentDate = _data["PaymentDate"] ? new Date(_data["PaymentDate"].toString()) : <any>null;
            this.invoiceDate = _data["InvoiceDate"] ? new Date(_data["InvoiceDate"].toString()) : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.paymentRefno = _data["PaymentRefno"] !== undefined ? _data["PaymentRefno"] : <any>null;
            this.paid = _data["Paid"] !== undefined ? _data["Paid"] : <any>null;
            this.paymentMode = _data["PaymentMode"] !== undefined ? _data["PaymentMode"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.isPDGenrated = _data["IsPDGenrated"] !== undefined ? _data["IsPDGenrated"] : <any>null;
            this.isInvoiceGenrated = _data["IsInvoiceGenrated"] !== undefined ? _data["IsInvoiceGenrated"] : <any>null;
            this.isInvoiceCanceled = _data["IsInvoiceCanceled"] !== undefined ? _data["IsInvoiceCanceled"] : <any>null;
            this.paymentCanceledDate = _data["PaymentCanceledDate"] ? new Date(_data["PaymentCanceledDate"].toString()) : <any>null;
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.isMembershipSaved = _data["IsMembershipSaved"] !== undefined ? _data["IsMembershipSaved"] : <any>null;
            this.invoiceAddress = _data["InvoiceAddress"] ? UserAddressModel.fromJS(_data["InvoiceAddress"]) : <any>null;
            this.membershipTypeDescription = _data["MembershipTypeDescription"] !== undefined ? _data["MembershipTypeDescription"] : <any>null;
            this.subscriptionAmount = _data["SubscriptionAmount"] !== undefined ? _data["SubscriptionAmount"] : <any>null;
            this.isInvoiceWaitingForApproval = _data["IsInvoiceWaitingForApproval"] !== undefined ? _data["IsInvoiceWaitingForApproval"] : <any>null;
            this.eventDescription = _data["EventDescription"] !== undefined ? _data["EventDescription"] : <any>null;
            this.eventFee = _data["EventFee"] !== undefined ? _data["EventFee"] : <any>null;
            this.isCancelled = _data["IsCancelled"] !== undefined ? _data["IsCancelled"] : <any>null;
            if (Array.isArray(_data["CreditNote"])) {
                this.creditNote = [] as any;
                for (let item of _data["CreditNote"])
                    this.creditNote!.push(CreditNoteViewModel.fromJS(item));
            }
            else {
                this.creditNote = <any>null;
            }
            this.totalInvoiceAmount = _data["TotalInvoiceAmount"] !== undefined ? _data["TotalInvoiceAmount"] : <any>null;
            this.discountAmount = _data["DiscountAmount"] !== undefined ? _data["DiscountAmount"] : <any>null;
            this.isRefunded = _data["IsRefunded"] !== undefined ? _data["IsRefunded"] : <any>null;
            this.paymentTransactionId = _data["PaymentTransactionId"] !== undefined ? _data["PaymentTransactionId"] : <any>null;
            this.pDId = _data["PDId"] !== undefined ? _data["PDId"] : <any>null;
            this.pTTypeId = _data["PTTypeId"] !== undefined ? _data["PTTypeId"] : <any>null;
            this.paymentRefTypeId = _data["PaymentRefTypeId"] !== undefined ? _data["PaymentRefTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): InvoiceViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CanceledDate"] = this.canceledDate ? this.canceledDate.toISOString() : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["InvoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["PaymentRefno"] = this.paymentRefno !== undefined ? this.paymentRefno : <any>null;
        data["Paid"] = this.paid !== undefined ? this.paid : <any>null;
        data["PaymentMode"] = this.paymentMode !== undefined ? this.paymentMode : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["IsPDGenrated"] = this.isPDGenrated !== undefined ? this.isPDGenrated : <any>null;
        data["IsInvoiceGenrated"] = this.isInvoiceGenrated !== undefined ? this.isInvoiceGenrated : <any>null;
        data["IsInvoiceCanceled"] = this.isInvoiceCanceled !== undefined ? this.isInvoiceCanceled : <any>null;
        data["PaymentCanceledDate"] = this.paymentCanceledDate ? this.paymentCanceledDate.toISOString() : <any>null;
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["IsMembershipSaved"] = this.isMembershipSaved !== undefined ? this.isMembershipSaved : <any>null;
        data["InvoiceAddress"] = this.invoiceAddress ? this.invoiceAddress.toJSON() : <any>null;
        data["MembershipTypeDescription"] = this.membershipTypeDescription !== undefined ? this.membershipTypeDescription : <any>null;
        data["SubscriptionAmount"] = this.subscriptionAmount !== undefined ? this.subscriptionAmount : <any>null;
        data["IsInvoiceWaitingForApproval"] = this.isInvoiceWaitingForApproval !== undefined ? this.isInvoiceWaitingForApproval : <any>null;
        data["EventDescription"] = this.eventDescription !== undefined ? this.eventDescription : <any>null;
        data["EventFee"] = this.eventFee !== undefined ? this.eventFee : <any>null;
        data["IsCancelled"] = this.isCancelled !== undefined ? this.isCancelled : <any>null;
        if (Array.isArray(this.creditNote)) {
            data["CreditNote"] = [];
            for (let item of this.creditNote)
                data["CreditNote"].push(item.toJSON());
        }
        data["TotalInvoiceAmount"] = this.totalInvoiceAmount !== undefined ? this.totalInvoiceAmount : <any>null;
        data["DiscountAmount"] = this.discountAmount !== undefined ? this.discountAmount : <any>null;
        data["IsRefunded"] = this.isRefunded !== undefined ? this.isRefunded : <any>null;
        data["PaymentTransactionId"] = this.paymentTransactionId !== undefined ? this.paymentTransactionId : <any>null;
        data["PDId"] = this.pDId !== undefined ? this.pDId : <any>null;
        data["PTTypeId"] = this.pTTypeId !== undefined ? this.pTTypeId : <any>null;
        data["PaymentRefTypeId"] = this.paymentRefTypeId !== undefined ? this.paymentRefTypeId : <any>null;
        return data;
    }
}

export interface IInvoiceViewModel {
    canceledDate?: Date | null;
    paymentDate?: Date | null;
    invoiceDate?: Date | null;
    invoiceNumber?: string | null;
    paymentRefno?: string | null;
    paid?: boolean | null;
    paymentMode?: string | null;
    paymentTypeId?: number | null;
    isPDGenrated?: boolean | null;
    isInvoiceGenrated?: boolean | null;
    isInvoiceCanceled?: boolean | null;
    paymentCanceledDate?: Date | null;
    invoiceId?: number | null;
    isMembershipSaved?: boolean | null;
    invoiceAddress?: UserAddressModel | null;
    membershipTypeDescription?: string | null;
    subscriptionAmount?: number | null;
    isInvoiceWaitingForApproval?: boolean | null;
    eventDescription?: string | null;
    eventFee?: number | null;
    isCancelled?: boolean | null;
    creditNote?: CreditNoteViewModel[] | null;
    totalInvoiceAmount?: number | null;
    discountAmount?: number | null;
    isRefunded?: boolean | null;
    paymentTransactionId?: number | null;
    pDId?: number | null;
    pTTypeId?: number | null;
    paymentRefTypeId?: number | null;
}

export class CreditNoteViewModel implements ICreditNoteViewModel {
    id?: number | null;
    creditNoteNumber?: string | null;
    paymentMode?: string | null;
    paymentType?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    isCreditNoteGenerated?: boolean | null;
    isRefunded?: boolean | null;
    cancellationFee?: number | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    refundStatusText?: string | null;

    constructor(data?: ICreditNoteViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.creditNoteNumber = _data["CreditNoteNumber"] !== undefined ? _data["CreditNoteNumber"] : <any>null;
            this.paymentMode = _data["PaymentMode"] !== undefined ? _data["PaymentMode"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.refundDate = _data["RefundDate"] ? new Date(_data["RefundDate"].toString()) : <any>null;
            this.refundReference = _data["RefundReference"] !== undefined ? _data["RefundReference"] : <any>null;
            this.isCreditNoteGenerated = _data["IsCreditNoteGenerated"] !== undefined ? _data["IsCreditNoteGenerated"] : <any>null;
            this.isRefunded = _data["IsRefunded"] !== undefined ? _data["IsRefunded"] : <any>null;
            this.cancellationFee = _data["CancellationFee"] !== undefined ? _data["CancellationFee"] : <any>null;
            this.cancellationPercent = _data["CancellationPercent"] !== undefined ? _data["CancellationPercent"] : <any>null;
            this.refundStatus = _data["RefundStatus"] !== undefined ? _data["RefundStatus"] : <any>null;
            this.refundStatusText = _data["RefundStatusText"] !== undefined ? _data["RefundStatusText"] : <any>null;
        }
    }

    static fromJS(data: any): CreditNoteViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreditNoteViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["CreditNoteNumber"] = this.creditNoteNumber !== undefined ? this.creditNoteNumber : <any>null;
        data["PaymentMode"] = this.paymentMode !== undefined ? this.paymentMode : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["RefundDate"] = this.refundDate ? this.refundDate.toISOString() : <any>null;
        data["RefundReference"] = this.refundReference !== undefined ? this.refundReference : <any>null;
        data["IsCreditNoteGenerated"] = this.isCreditNoteGenerated !== undefined ? this.isCreditNoteGenerated : <any>null;
        data["IsRefunded"] = this.isRefunded !== undefined ? this.isRefunded : <any>null;
        data["CancellationFee"] = this.cancellationFee !== undefined ? this.cancellationFee : <any>null;
        data["CancellationPercent"] = this.cancellationPercent !== undefined ? this.cancellationPercent : <any>null;
        data["RefundStatus"] = this.refundStatus !== undefined ? this.refundStatus : <any>null;
        data["RefundStatusText"] = this.refundStatusText !== undefined ? this.refundStatusText : <any>null;
        return data;
    }
}

export interface ICreditNoteViewModel {
    id?: number | null;
    creditNoteNumber?: string | null;
    paymentMode?: string | null;
    paymentType?: number | null;
    amount?: number | null;
    refundDate?: Date | null;
    refundReference?: string | null;
    isCreditNoteGenerated?: boolean | null;
    isRefunded?: boolean | null;
    cancellationFee?: number | null;
    cancellationPercent?: number | null;
    refundStatus?: number | null;
    refundStatusText?: string | null;
}

export class PaymentSuccessViewModel implements IPaymentSuccessViewModel {
    invoiceDetail?: InvoiceViewModel | null;
    invoiceAddress?: UserAddressModel | null;
    paymentdemand?: PaymentDemandViewModel | null;
    isMembership?: boolean | null;
    paymentDemandDetails?: PaymentDemandDetailsViewModel[] | null;
    isEventBadge?: boolean | null;
    ticketId?: number | null;
    eventId?: number | null;
    eventBadgeId?: number | null;
    currency?: string | null;

    constructor(data?: IPaymentSuccessViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.invoiceDetail = _data["InvoiceDetail"] ? InvoiceViewModel.fromJS(_data["InvoiceDetail"]) : <any>null;
            this.invoiceAddress = _data["InvoiceAddress"] ? UserAddressModel.fromJS(_data["InvoiceAddress"]) : <any>null;
            this.paymentdemand = _data["Paymentdemand"] ? PaymentDemandViewModel.fromJS(_data["Paymentdemand"]) : <any>null;
            this.isMembership = _data["IsMembership"] !== undefined ? _data["IsMembership"] : <any>null;
            if (Array.isArray(_data["PaymentDemandDetails"])) {
                this.paymentDemandDetails = [] as any;
                for (let item of _data["PaymentDemandDetails"])
                    this.paymentDemandDetails!.push(PaymentDemandDetailsViewModel.fromJS(item));
            }
            else {
                this.paymentDemandDetails = <any>null;
            }
            this.isEventBadge = _data["IsEventBadge"] !== undefined ? _data["IsEventBadge"] : <any>null;
            this.ticketId = _data["TicketId"] !== undefined ? _data["TicketId"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.eventBadgeId = _data["EventBadgeId"] !== undefined ? _data["EventBadgeId"] : <any>null;
            this.currency = _data["Currency"] !== undefined ? _data["Currency"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentSuccessViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentSuccessViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["InvoiceDetail"] = this.invoiceDetail ? this.invoiceDetail.toJSON() : <any>null;
        data["InvoiceAddress"] = this.invoiceAddress ? this.invoiceAddress.toJSON() : <any>null;
        data["Paymentdemand"] = this.paymentdemand ? this.paymentdemand.toJSON() : <any>null;
        data["IsMembership"] = this.isMembership !== undefined ? this.isMembership : <any>null;
        if (Array.isArray(this.paymentDemandDetails)) {
            data["PaymentDemandDetails"] = [];
            for (let item of this.paymentDemandDetails)
                data["PaymentDemandDetails"].push(item.toJSON());
        }
        data["IsEventBadge"] = this.isEventBadge !== undefined ? this.isEventBadge : <any>null;
        data["TicketId"] = this.ticketId !== undefined ? this.ticketId : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["EventBadgeId"] = this.eventBadgeId !== undefined ? this.eventBadgeId : <any>null;
        data["Currency"] = this.currency !== undefined ? this.currency : <any>null;
        return data;
    }
}

export interface IPaymentSuccessViewModel {
    invoiceDetail?: InvoiceViewModel | null;
    invoiceAddress?: UserAddressModel | null;
    paymentdemand?: PaymentDemandViewModel | null;
    isMembership?: boolean | null;
    paymentDemandDetails?: PaymentDemandDetailsViewModel[] | null;
    isEventBadge?: boolean | null;
    ticketId?: number | null;
    eventId?: number | null;
    eventBadgeId?: number | null;
    currency?: string | null;
}

export class UserDashboardView implements IUserDashboardView {
    events?: UserDashboardEvent[] | null;
    payments?: UserDashboardPayment[] | null;

    constructor(data?: IUserDashboardView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Events"])) {
                this.events = [] as any;
                for (let item of _data["Events"])
                    this.events!.push(UserDashboardEvent.fromJS(item));
            }
            else {
                this.events = <any>null;
            }
            if (Array.isArray(_data["Payments"])) {
                this.payments = [] as any;
                for (let item of _data["Payments"])
                    this.payments!.push(UserDashboardPayment.fromJS(item));
            }
            else {
                this.payments = <any>null;
            }
        }
    }

    static fromJS(data: any): UserDashboardView {
        data = typeof data === 'object' ? data : {};
        let result = new UserDashboardView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.events)) {
            data["Events"] = [];
            for (let item of this.events)
                data["Events"].push(item.toJSON());
        }
        if (Array.isArray(this.payments)) {
            data["Payments"] = [];
            for (let item of this.payments)
                data["Payments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserDashboardView {
    events?: UserDashboardEvent[] | null;
    payments?: UserDashboardPayment[] | null;
}

export class UserDashboardEvent implements IUserDashboardEvent {
    id?: number | null;
    name?: string | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    registrationCloseDate?: Date | null;
    registrationLimit?: number | null;
    country?: string | null;

    constructor(data?: IUserDashboardEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.eventTypeId = _data["EventTypeId"] !== undefined ? _data["EventTypeId"] : <any>null;
            this.eventCode = _data["EventCode"] !== undefined ? _data["EventCode"] : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.venueAddress = _data["VenueAddress"] !== undefined ? _data["VenueAddress"] : <any>null;
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>null;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>null;
            this.registrationCloseDate = _data["RegistrationCloseDate"] ? new Date(_data["RegistrationCloseDate"].toString()) : <any>null;
            this.registrationLimit = _data["RegistrationLimit"] !== undefined ? _data["RegistrationLimit"] : <any>null;
            this.country = _data["Country"] !== undefined ? _data["Country"] : <any>null;
        }
    }

    static fromJS(data: any): UserDashboardEvent {
        data = typeof data === 'object' ? data : {};
        let result = new UserDashboardEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EventTypeId"] = this.eventTypeId !== undefined ? this.eventTypeId : <any>null;
        data["EventCode"] = this.eventCode !== undefined ? this.eventCode : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["VenueAddress"] = this.venueAddress !== undefined ? this.venueAddress : <any>null;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["RegistrationCloseDate"] = this.registrationCloseDate ? this.registrationCloseDate.toISOString() : <any>null;
        data["RegistrationLimit"] = this.registrationLimit !== undefined ? this.registrationLimit : <any>null;
        data["Country"] = this.country !== undefined ? this.country : <any>null;
        return data;
    }
}

export interface IUserDashboardEvent {
    id?: number | null;
    name?: string | null;
    eventTypeId?: number | null;
    eventCode?: string | null;
    venue?: string | null;
    venueAddress?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    registrationCloseDate?: Date | null;
    registrationLimit?: number | null;
    country?: string | null;
}

export class UserDashboardPayment implements IUserDashboardPayment {
    eventId?: number | null;
    eventName?: string | null;
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    subscriptionFromDate?: Date | null;
    subscriptionToDate?: Date | null;
    eventGroupId?: number | null;
    eventExhibitorId?: number | null;
    isMembership?: boolean | null;
    balanceAmount?: number | null;
    currencySymbol?: string | null;
    membershipType?: string | null;
    paymentTransactionId?: number | null;
    paymentDemandDate?: Date | null;

    constructor(data?: IUserDashboardPayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.eventName = _data["EventName"] !== undefined ? _data["EventName"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.subscriptionFromDate = _data["SubscriptionFromDate"] ? new Date(_data["SubscriptionFromDate"].toString()) : <any>null;
            this.subscriptionToDate = _data["SubscriptionToDate"] ? new Date(_data["SubscriptionToDate"].toString()) : <any>null;
            this.eventGroupId = _data["EventGroupId"] !== undefined ? _data["EventGroupId"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.isMembership = _data["IsMembership"] !== undefined ? _data["IsMembership"] : <any>null;
            this.balanceAmount = _data["BalanceAmount"] !== undefined ? _data["BalanceAmount"] : <any>null;
            this.currencySymbol = _data["CurrencySymbol"] !== undefined ? _data["CurrencySymbol"] : <any>null;
            this.membershipType = _data["MembershipType"] !== undefined ? _data["MembershipType"] : <any>null;
            this.paymentTransactionId = _data["PaymentTransactionId"] !== undefined ? _data["PaymentTransactionId"] : <any>null;
            this.paymentDemandDate = _data["PaymentDemandDate"] ? new Date(_data["PaymentDemandDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UserDashboardPayment {
        data = typeof data === 'object' ? data : {};
        let result = new UserDashboardPayment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["EventName"] = this.eventName !== undefined ? this.eventName : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["SubscriptionFromDate"] = this.subscriptionFromDate ? this.subscriptionFromDate.toISOString() : <any>null;
        data["SubscriptionToDate"] = this.subscriptionToDate ? this.subscriptionToDate.toISOString() : <any>null;
        data["EventGroupId"] = this.eventGroupId !== undefined ? this.eventGroupId : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["IsMembership"] = this.isMembership !== undefined ? this.isMembership : <any>null;
        data["BalanceAmount"] = this.balanceAmount !== undefined ? this.balanceAmount : <any>null;
        data["CurrencySymbol"] = this.currencySymbol !== undefined ? this.currencySymbol : <any>null;
        data["MembershipType"] = this.membershipType !== undefined ? this.membershipType : <any>null;
        data["PaymentTransactionId"] = this.paymentTransactionId !== undefined ? this.paymentTransactionId : <any>null;
        data["PaymentDemandDate"] = this.paymentDemandDate ? this.paymentDemandDate.toISOString() : <any>null;
        return data;
    }
}

export interface IUserDashboardPayment {
    eventId?: number | null;
    eventName?: string | null;
    paymentDemandId?: number | null;
    paymentDemandNumber?: string | null;
    subscriptionFromDate?: Date | null;
    subscriptionToDate?: Date | null;
    eventGroupId?: number | null;
    eventExhibitorId?: number | null;
    isMembership?: boolean | null;
    balanceAmount?: number | null;
    currencySymbol?: string | null;
    membershipType?: string | null;
    paymentTransactionId?: number | null;
    paymentDemandDate?: Date | null;
}

export class UserCompletedPaymentsView implements IUserCompletedPaymentsView {
    payments?: CompletedPaymentDTO[] | null;
    hasmore?: boolean | null;

    constructor(data?: IUserCompletedPaymentsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Payments"])) {
                this.payments = [] as any;
                for (let item of _data["Payments"])
                    this.payments!.push(CompletedPaymentDTO.fromJS(item));
            }
            else {
                this.payments = <any>null;
            }
            this.hasmore = _data["hasmore"] !== undefined ? _data["hasmore"] : <any>null;
        }
    }

    static fromJS(data: any): UserCompletedPaymentsView {
        data = typeof data === 'object' ? data : {};
        let result = new UserCompletedPaymentsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.payments)) {
            data["Payments"] = [];
            for (let item of this.payments)
                data["Payments"].push(item.toJSON());
        }
        data["hasmore"] = this.hasmore !== undefined ? this.hasmore : <any>null;
        return data;
    }
}

export interface IUserCompletedPaymentsView {
    payments?: CompletedPaymentDTO[] | null;
    hasmore?: boolean | null;
}

export class CompletedPaymentDTO implements ICompletedPaymentDTO {
    id?: number | null;
    eventName?: string | null;
    invoiceId?: number | null;
    invoiceNumber?: string | null;
    creditNoteId?: number | null;
    creditNoteNumber?: string | null;
    curencySymbol?: string | null;
    createDate?: Date | null;
    subscriptionFromDate?: Date | null;
    subscriptionToDate?: Date | null;
    eventGroupId?: number | null;
    eventExhibitorId?: number | null;
    isMembership?: boolean | null;
    membershipType?: string | null;
    totalAmount?: number | null;

    constructor(data?: ICompletedPaymentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.eventName = _data["EventName"] !== undefined ? _data["EventName"] : <any>null;
            this.invoiceId = _data["InvoiceId"] !== undefined ? _data["InvoiceId"] : <any>null;
            this.invoiceNumber = _data["InvoiceNumber"] !== undefined ? _data["InvoiceNumber"] : <any>null;
            this.creditNoteId = _data["CreditNoteId"] !== undefined ? _data["CreditNoteId"] : <any>null;
            this.creditNoteNumber = _data["CreditNoteNumber"] !== undefined ? _data["CreditNoteNumber"] : <any>null;
            this.curencySymbol = _data["CurencySymbol"] !== undefined ? _data["CurencySymbol"] : <any>null;
            this.createDate = _data["CreateDate"] ? new Date(_data["CreateDate"].toString()) : <any>null;
            this.subscriptionFromDate = _data["SubscriptionFromDate"] ? new Date(_data["SubscriptionFromDate"].toString()) : <any>null;
            this.subscriptionToDate = _data["SubscriptionToDate"] ? new Date(_data["SubscriptionToDate"].toString()) : <any>null;
            this.eventGroupId = _data["EventGroupId"] !== undefined ? _data["EventGroupId"] : <any>null;
            this.eventExhibitorId = _data["EventExhibitorId"] !== undefined ? _data["EventExhibitorId"] : <any>null;
            this.isMembership = _data["IsMembership"] !== undefined ? _data["IsMembership"] : <any>null;
            this.membershipType = _data["MembershipType"] !== undefined ? _data["MembershipType"] : <any>null;
            this.totalAmount = _data["TotalAmount"] !== undefined ? _data["TotalAmount"] : <any>null;
        }
    }

    static fromJS(data: any): CompletedPaymentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CompletedPaymentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["EventName"] = this.eventName !== undefined ? this.eventName : <any>null;
        data["InvoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["InvoiceNumber"] = this.invoiceNumber !== undefined ? this.invoiceNumber : <any>null;
        data["CreditNoteId"] = this.creditNoteId !== undefined ? this.creditNoteId : <any>null;
        data["CreditNoteNumber"] = this.creditNoteNumber !== undefined ? this.creditNoteNumber : <any>null;
        data["CurencySymbol"] = this.curencySymbol !== undefined ? this.curencySymbol : <any>null;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["SubscriptionFromDate"] = this.subscriptionFromDate ? this.subscriptionFromDate.toISOString() : <any>null;
        data["SubscriptionToDate"] = this.subscriptionToDate ? this.subscriptionToDate.toISOString() : <any>null;
        data["EventGroupId"] = this.eventGroupId !== undefined ? this.eventGroupId : <any>null;
        data["EventExhibitorId"] = this.eventExhibitorId !== undefined ? this.eventExhibitorId : <any>null;
        data["IsMembership"] = this.isMembership !== undefined ? this.isMembership : <any>null;
        data["MembershipType"] = this.membershipType !== undefined ? this.membershipType : <any>null;
        data["TotalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        return data;
    }
}

export interface ICompletedPaymentDTO {
    id?: number | null;
    eventName?: string | null;
    invoiceId?: number | null;
    invoiceNumber?: string | null;
    creditNoteId?: number | null;
    creditNoteNumber?: string | null;
    curencySymbol?: string | null;
    createDate?: Date | null;
    subscriptionFromDate?: Date | null;
    subscriptionToDate?: Date | null;
    eventGroupId?: number | null;
    eventExhibitorId?: number | null;
    isMembership?: boolean | null;
    membershipType?: string | null;
    totalAmount?: number | null;
}

export class PendingPaymentData implements IPendingPaymentData {
    paymentTypes?: PaymentTypeViewModel[] | null;
    paymentDemandNumber?: string | null;
    paymentType?: number | null;
    billingAddress?: UserAddressDTO[] | null;
    membership?: MembershipDTO | null;
    event?: EventVM | null;
    country?: CountryDTO[] | null;
    bankDetail?: BankDetailDTO | null;
    fees?: MemberFeeDTO | null;
    transactionId?: number | null;
    pDAmount?: number | null;
    balanceAmount?: number | null;
    paymentTransaction?: PaymentTransactionData[] | null;

    constructor(data?: IPendingPaymentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["PaymentTypes"])) {
                this.paymentTypes = [] as any;
                for (let item of _data["PaymentTypes"])
                    this.paymentTypes!.push(PaymentTypeViewModel.fromJS(item));
            }
            else {
                this.paymentTypes = <any>null;
            }
            this.paymentDemandNumber = _data["PaymentDemandNumber"] !== undefined ? _data["PaymentDemandNumber"] : <any>null;
            this.paymentType = _data["PaymentType"] !== undefined ? _data["PaymentType"] : <any>null;
            if (Array.isArray(_data["BillingAddress"])) {
                this.billingAddress = [] as any;
                for (let item of _data["BillingAddress"])
                    this.billingAddress!.push(UserAddressDTO.fromJS(item));
            }
            else {
                this.billingAddress = <any>null;
            }
            this.membership = _data["Membership"] ? MembershipDTO.fromJS(_data["Membership"]) : <any>null;
            this.event = _data["Event"] ? EventVM.fromJS(_data["Event"]) : <any>null;
            if (Array.isArray(_data["Country"])) {
                this.country = [] as any;
                for (let item of _data["Country"])
                    this.country!.push(CountryDTO.fromJS(item));
            }
            else {
                this.country = <any>null;
            }
            this.bankDetail = _data["BankDetail"] ? BankDetailDTO.fromJS(_data["BankDetail"]) : <any>null;
            this.fees = _data["fees"] ? MemberFeeDTO.fromJS(_data["fees"]) : <any>null;
            this.transactionId = _data["TransactionId"] !== undefined ? _data["TransactionId"] : <any>null;
            this.pDAmount = _data["PDAmount"] !== undefined ? _data["PDAmount"] : <any>null;
            this.balanceAmount = _data["BalanceAmount"] !== undefined ? _data["BalanceAmount"] : <any>null;
            if (Array.isArray(_data["PaymentTransaction"])) {
                this.paymentTransaction = [] as any;
                for (let item of _data["PaymentTransaction"])
                    this.paymentTransaction!.push(PaymentTransactionData.fromJS(item));
            }
            else {
                this.paymentTransaction = <any>null;
            }
        }
    }

    static fromJS(data: any): PendingPaymentData {
        data = typeof data === 'object' ? data : {};
        let result = new PendingPaymentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.paymentTypes)) {
            data["PaymentTypes"] = [];
            for (let item of this.paymentTypes)
                data["PaymentTypes"].push(item.toJSON());
        }
        data["PaymentDemandNumber"] = this.paymentDemandNumber !== undefined ? this.paymentDemandNumber : <any>null;
        data["PaymentType"] = this.paymentType !== undefined ? this.paymentType : <any>null;
        if (Array.isArray(this.billingAddress)) {
            data["BillingAddress"] = [];
            for (let item of this.billingAddress)
                data["BillingAddress"].push(item.toJSON());
        }
        data["Membership"] = this.membership ? this.membership.toJSON() : <any>null;
        data["Event"] = this.event ? this.event.toJSON() : <any>null;
        if (Array.isArray(this.country)) {
            data["Country"] = [];
            for (let item of this.country)
                data["Country"].push(item.toJSON());
        }
        data["BankDetail"] = this.bankDetail ? this.bankDetail.toJSON() : <any>null;
        data["fees"] = this.fees ? this.fees.toJSON() : <any>null;
        data["TransactionId"] = this.transactionId !== undefined ? this.transactionId : <any>null;
        data["PDAmount"] = this.pDAmount !== undefined ? this.pDAmount : <any>null;
        data["BalanceAmount"] = this.balanceAmount !== undefined ? this.balanceAmount : <any>null;
        if (Array.isArray(this.paymentTransaction)) {
            data["PaymentTransaction"] = [];
            for (let item of this.paymentTransaction)
                data["PaymentTransaction"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPendingPaymentData {
    paymentTypes?: PaymentTypeViewModel[] | null;
    paymentDemandNumber?: string | null;
    paymentType?: number | null;
    billingAddress?: UserAddressDTO[] | null;
    membership?: MembershipDTO | null;
    event?: EventVM | null;
    country?: CountryDTO[] | null;
    bankDetail?: BankDetailDTO | null;
    fees?: MemberFeeDTO | null;
    transactionId?: number | null;
    pDAmount?: number | null;
    balanceAmount?: number | null;
    paymentTransaction?: PaymentTransactionData[] | null;
}

export class MembershipDTO implements IMembershipDTO {
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    trainingCompletionYear?: number | null;
    currencySymbol?: string | null;

    constructor(data?: IMembershipDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberTypeId = _data["MemberTypeId"] !== undefined ? _data["MemberTypeId"] : <any>null;
            this.fromDate = _data["FromDate"] ? new Date(_data["FromDate"].toString()) : <any>null;
            this.toDate = _data["ToDate"] ? new Date(_data["ToDate"].toString()) : <any>null;
            this.trainingCompletionYear = _data["TrainingCompletionYear"] !== undefined ? _data["TrainingCompletionYear"] : <any>null;
            this.currencySymbol = _data["currencySymbol"] !== undefined ? _data["currencySymbol"] : <any>null;
        }
    }

    static fromJS(data: any): MembershipDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MembershipDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberTypeId"] = this.memberTypeId !== undefined ? this.memberTypeId : <any>null;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["TrainingCompletionYear"] = this.trainingCompletionYear !== undefined ? this.trainingCompletionYear : <any>null;
        data["currencySymbol"] = this.currencySymbol !== undefined ? this.currencySymbol : <any>null;
        return data;
    }
}

export interface IMembershipDTO {
    memberTypeId?: number | null;
    fromDate?: Date | null;
    toDate?: Date | null;
    trainingCompletionYear?: number | null;
    currencySymbol?: string | null;
}

export class EventVM implements IEventVM {
    id?: number | null;
    name?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    venue?: string | null;
    countryId?: number | null;
    countryName?: string | null;
    currencySymbol?: string | null;
    currencyId?: number | null;

    constructor(data?: IEventVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>null;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>null;
            this.venue = _data["Venue"] !== undefined ? _data["Venue"] : <any>null;
            this.countryId = _data["CountryId"] !== undefined ? _data["CountryId"] : <any>null;
            this.countryName = _data["CountryName"] !== undefined ? _data["CountryName"] : <any>null;
            this.currencySymbol = _data["CurrencySymbol"] !== undefined ? _data["CurrencySymbol"] : <any>null;
            this.currencyId = _data["CurrencyId"] !== undefined ? _data["CurrencyId"] : <any>null;
        }
    }

    static fromJS(data: any): EventVM {
        data = typeof data === 'object' ? data : {};
        let result = new EventVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["Venue"] = this.venue !== undefined ? this.venue : <any>null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : <any>null;
        data["CurrencySymbol"] = this.currencySymbol !== undefined ? this.currencySymbol : <any>null;
        data["CurrencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        return data;
    }
}

export interface IEventVM {
    id?: number | null;
    name?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    venue?: string | null;
    countryId?: number | null;
    countryName?: string | null;
    currencySymbol?: string | null;
    currencyId?: number | null;
}

export class MemberFeeDTO implements IMemberFeeDTO {
    amount?: number | null;
    membershipTypeId?: number | null;
    membershipType?: string | null;
    feeId?: number | null;
    isExpired?: boolean | null;

    constructor(data?: IMemberFeeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.membershipTypeId = _data["MembershipTypeId"] !== undefined ? _data["MembershipTypeId"] : <any>null;
            this.membershipType = _data["MembershipType"] !== undefined ? _data["MembershipType"] : <any>null;
            this.feeId = _data["FeeId"] !== undefined ? _data["FeeId"] : <any>null;
            this.isExpired = _data["IsExpired"] !== undefined ? _data["IsExpired"] : <any>null;
        }
    }

    static fromJS(data: any): MemberFeeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MemberFeeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["MembershipTypeId"] = this.membershipTypeId !== undefined ? this.membershipTypeId : <any>null;
        data["MembershipType"] = this.membershipType !== undefined ? this.membershipType : <any>null;
        data["FeeId"] = this.feeId !== undefined ? this.feeId : <any>null;
        data["IsExpired"] = this.isExpired !== undefined ? this.isExpired : <any>null;
        return data;
    }
}

export interface IMemberFeeDTO {
    amount?: number | null;
    membershipTypeId?: number | null;
    membershipType?: string | null;
    feeId?: number | null;
    isExpired?: boolean | null;
}

export class PaymentTransactionData implements IPaymentTransactionData {
    id?: number | null;
    paymentTypeId?: number | null;
    paymentMode?: string | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    paymentReference?: string | null;
    status?: number | null;
    actualAmount?: number | null;

    constructor(data?: IPaymentTransactionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.paymentMode = _data["PaymentMode"] !== undefined ? _data["PaymentMode"] : <any>null;
            this.initiatedOn = _data["InitiatedOn"] ? new Date(_data["InitiatedOn"].toString()) : <any>null;
            this.completedOn = _data["CompletedOn"] ? new Date(_data["CompletedOn"].toString()) : <any>null;
            this.amount = _data["Amount"] !== undefined ? _data["Amount"] : <any>null;
            this.paymentReference = _data["PaymentReference"] !== undefined ? _data["PaymentReference"] : <any>null;
            this.status = _data["Status"] !== undefined ? _data["Status"] : <any>null;
            this.actualAmount = _data["ActualAmount"] !== undefined ? _data["ActualAmount"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentTransactionData {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTransactionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["PaymentMode"] = this.paymentMode !== undefined ? this.paymentMode : <any>null;
        data["InitiatedOn"] = this.initiatedOn ? this.initiatedOn.toISOString() : <any>null;
        data["CompletedOn"] = this.completedOn ? this.completedOn.toISOString() : <any>null;
        data["Amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["PaymentReference"] = this.paymentReference !== undefined ? this.paymentReference : <any>null;
        data["Status"] = this.status !== undefined ? this.status : <any>null;
        data["ActualAmount"] = this.actualAmount !== undefined ? this.actualAmount : <any>null;
        return data;
    }
}

export interface IPaymentTransactionData {
    id?: number | null;
    paymentTypeId?: number | null;
    paymentMode?: string | null;
    initiatedOn?: Date | null;
    completedOn?: Date | null;
    amount?: number | null;
    paymentReference?: string | null;
    status?: number | null;
    actualAmount?: number | null;
}

export class PayBalanceViewModel implements IPayBalanceViewModel {
    transferId?: number | null;
    paymentDemandId?: number | null;
    paymentAmount?: number | null;
    paymentTypeId?: number | null;
    cCPaymentDate?: Date | null;
    cCReferenceNumber?: string | null;
    cCInternalReferenceNumber?: string | null;

    constructor(data?: IPayBalanceViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transferId = _data["TransferId"] !== undefined ? _data["TransferId"] : <any>null;
            this.paymentDemandId = _data["PaymentDemandId"] !== undefined ? _data["PaymentDemandId"] : <any>null;
            this.paymentAmount = _data["PaymentAmount"] !== undefined ? _data["PaymentAmount"] : <any>null;
            this.paymentTypeId = _data["PaymentTypeId"] !== undefined ? _data["PaymentTypeId"] : <any>null;
            this.cCPaymentDate = _data["CCPaymentDate"] ? new Date(_data["CCPaymentDate"].toString()) : <any>null;
            this.cCReferenceNumber = _data["CCReferenceNumber"] !== undefined ? _data["CCReferenceNumber"] : <any>null;
            this.cCInternalReferenceNumber = _data["CCInternalReferenceNumber"] !== undefined ? _data["CCInternalReferenceNumber"] : <any>null;
        }
    }

    static fromJS(data: any): PayBalanceViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PayBalanceViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TransferId"] = this.transferId !== undefined ? this.transferId : <any>null;
        data["PaymentDemandId"] = this.paymentDemandId !== undefined ? this.paymentDemandId : <any>null;
        data["PaymentAmount"] = this.paymentAmount !== undefined ? this.paymentAmount : <any>null;
        data["PaymentTypeId"] = this.paymentTypeId !== undefined ? this.paymentTypeId : <any>null;
        data["CCPaymentDate"] = this.cCPaymentDate ? this.cCPaymentDate.toISOString() : <any>null;
        data["CCReferenceNumber"] = this.cCReferenceNumber !== undefined ? this.cCReferenceNumber : <any>null;
        data["CCInternalReferenceNumber"] = this.cCInternalReferenceNumber !== undefined ? this.cCInternalReferenceNumber : <any>null;
        return data;
    }
}

export interface IPayBalanceViewModel {
    transferId?: number | null;
    paymentDemandId?: number | null;
    paymentAmount?: number | null;
    paymentTypeId?: number | null;
    cCPaymentDate?: Date | null;
    cCReferenceNumber?: string | null;
    cCInternalReferenceNumber?: string | null;
}

export class InitialProfileViewModel implements IInitialProfileViewModel {
    addressTypes?: AddressTypeViewModel[] | null;
    personTitles?: PersonTitleViewModel[] | null;
    countries?: CountryViewModel[] | null;
    user?: UserProfileViewModel | null;
    listAccessRights?: AccessRightViewModel[] | null;
    mMCTSRoles?: MMCTSRoleViewModel[] | null;
    professionTypes?: ProfessionTypeViewModel[] | null;
    interestTopics?: InterestTopicViewModel[] | null;

    constructor(data?: IInitialProfileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["AddressTypes"])) {
                this.addressTypes = [] as any;
                for (let item of _data["AddressTypes"])
                    this.addressTypes!.push(AddressTypeViewModel.fromJS(item));
            }
            else {
                this.addressTypes = <any>null;
            }
            if (Array.isArray(_data["PersonTitles"])) {
                this.personTitles = [] as any;
                for (let item of _data["PersonTitles"])
                    this.personTitles!.push(PersonTitleViewModel.fromJS(item));
            }
            else {
                this.personTitles = <any>null;
            }
            if (Array.isArray(_data["Countries"])) {
                this.countries = [] as any;
                for (let item of _data["Countries"])
                    this.countries!.push(CountryViewModel.fromJS(item));
            }
            else {
                this.countries = <any>null;
            }
            this.user = _data["User"] ? UserProfileViewModel.fromJS(_data["User"]) : <any>null;
            if (Array.isArray(_data["ListAccessRights"])) {
                this.listAccessRights = [] as any;
                for (let item of _data["ListAccessRights"])
                    this.listAccessRights!.push(AccessRightViewModel.fromJS(item));
            }
            else {
                this.listAccessRights = <any>null;
            }
            if (Array.isArray(_data["MMCTSRoles"])) {
                this.mMCTSRoles = [] as any;
                for (let item of _data["MMCTSRoles"])
                    this.mMCTSRoles!.push(MMCTSRoleViewModel.fromJS(item));
            }
            else {
                this.mMCTSRoles = <any>null;
            }
            if (Array.isArray(_data["ProfessionTypes"])) {
                this.professionTypes = [] as any;
                for (let item of _data["ProfessionTypes"])
                    this.professionTypes!.push(ProfessionTypeViewModel.fromJS(item));
            }
            else {
                this.professionTypes = <any>null;
            }
            if (Array.isArray(_data["InterestTopics"])) {
                this.interestTopics = [] as any;
                for (let item of _data["InterestTopics"])
                    this.interestTopics!.push(InterestTopicViewModel.fromJS(item));
            }
            else {
                this.interestTopics = <any>null;
            }
        }
    }

    static fromJS(data: any): InitialProfileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InitialProfileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.addressTypes)) {
            data["AddressTypes"] = [];
            for (let item of this.addressTypes)
                data["AddressTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.personTitles)) {
            data["PersonTitles"] = [];
            for (let item of this.personTitles)
                data["PersonTitles"].push(item.toJSON());
        }
        if (Array.isArray(this.countries)) {
            data["Countries"] = [];
            for (let item of this.countries)
                data["Countries"].push(item.toJSON());
        }
        data["User"] = this.user ? this.user.toJSON() : <any>null;
        if (Array.isArray(this.listAccessRights)) {
            data["ListAccessRights"] = [];
            for (let item of this.listAccessRights)
                data["ListAccessRights"].push(item.toJSON());
        }
        if (Array.isArray(this.mMCTSRoles)) {
            data["MMCTSRoles"] = [];
            for (let item of this.mMCTSRoles)
                data["MMCTSRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.professionTypes)) {
            data["ProfessionTypes"] = [];
            for (let item of this.professionTypes)
                data["ProfessionTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.interestTopics)) {
            data["InterestTopics"] = [];
            for (let item of this.interestTopics)
                data["InterestTopics"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInitialProfileViewModel {
    addressTypes?: AddressTypeViewModel[] | null;
    personTitles?: PersonTitleViewModel[] | null;
    countries?: CountryViewModel[] | null;
    user?: UserProfileViewModel | null;
    listAccessRights?: AccessRightViewModel[] | null;
    mMCTSRoles?: MMCTSRoleViewModel[] | null;
    professionTypes?: ProfessionTypeViewModel[] | null;
    interestTopics?: InterestTopicViewModel[] | null;
}

export class AddressTypeViewModel implements IAddressTypeViewModel {
    id?: number | null;
    name?: string | null;

    constructor(data?: IAddressTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
        }
    }

    static fromJS(data: any): AddressTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddressTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IAddressTypeViewModel {
    id?: number | null;
    name?: string | null;
}

export class PersonTitleViewModel implements IPersonTitleViewModel {
    id?: number | null;
    name?: string | null;

    constructor(data?: IPersonTitleViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
        }
    }

    static fromJS(data: any): PersonTitleViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PersonTitleViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IPersonTitleViewModel {
    id?: number | null;
    name?: string | null;
}

export class CountryViewModel implements ICountryViewModel {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    nationality?: string | null;
    isVisibleToPublic?: boolean | null;

    constructor(data?: ICountryViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.countryCode = _data["CountryCode"] !== undefined ? _data["CountryCode"] : <any>null;
            this.iSDCode = _data["ISDCode"] !== undefined ? _data["ISDCode"] : <any>null;
            this.nationality = _data["Nationality"] !== undefined ? _data["Nationality"] : <any>null;
            this.isVisibleToPublic = _data["IsVisibleToPublic"] !== undefined ? _data["IsVisibleToPublic"] : <any>null;
        }
    }

    static fromJS(data: any): CountryViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CountryViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["CountryCode"] = this.countryCode !== undefined ? this.countryCode : <any>null;
        data["ISDCode"] = this.iSDCode !== undefined ? this.iSDCode : <any>null;
        data["Nationality"] = this.nationality !== undefined ? this.nationality : <any>null;
        data["IsVisibleToPublic"] = this.isVisibleToPublic !== undefined ? this.isVisibleToPublic : <any>null;
        return data;
    }
}

export interface ICountryViewModel {
    id?: number | null;
    name?: string | null;
    countryCode?: string | null;
    iSDCode?: number | null;
    nationality?: string | null;
    isVisibleToPublic?: boolean | null;
}

export class UserProfileViewModel implements IUserProfileViewModel {
    fileName?: string | null;
    titleId!: number;
    firstName!: string;
    lastName!: string;
    middleName?: string | null;
    dateOfBirth?: Date | null;
    institution?: string | null;
    department?: string | null;
    phone?: string | null;
    mobile?: string | null;
    email!: string;
    gender!: number;
    nationality?: number | null;
    interestTopic?: number | null;
    professionTypeId?: number | null;
    passportNumber?: string | null;
    passportExpiryDate?: Date | null;
    mMCTS?: number | null;
    comments?: string | null;
    position?: string | null;
    isAdmin?: boolean | null;
    isSendVerification?: boolean | null;
    initiatedByAdmin?: boolean | null;
    listAccessRights?: AccessRightViewModel[] | null;
    interestTopics?: InterestTopicViewModel[] | null;
    id?: string | null;
    isDeceased?: boolean | null;
    accountCreation?: Date | null;
    isMemberStatus?: string | null;
    memberType?: string | null;
    accessRights?: number | null;
    isMember?: boolean | null;
    specialCaseNomination?: boolean | null;
    canChangeToAdmin?: boolean | null;
    attestationId?: number | null;
    expertise1?: string | null;
    expertise2?: string | null;
    isUserValidated?: boolean | null;
    primaryAddress?: UserAddressModel | null;
    secondaryAddress?: UserAddressModel | null;
    isCommentsVisible?: boolean | null;
    cV?: DocumentViewModel | null;
    showValidateUser?: boolean | null;
    isParticipant?: boolean | null;
    defaultAddress?: number | null;
    isEventRegisteredUser?: boolean | null;
    eventId?: number | null;
    accountId?: number | null;
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    isPrivacyPolicyAgreed?: boolean | null;
    hasExpressedPermission?: boolean | null;
    isApplicant?: boolean | null;
    consent?: boolean | null;
    expertise?: string | null;
    biography?: string | null;
    photoId?: number | null;
    photoName?: string | null;
    photoFileName?: string | null;
    cVId?: number | null;
    cVName?: string | null;
    cVFileName?: string | null;

    constructor(data?: IUserProfileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["FileName"] !== undefined ? _data["FileName"] : <any>null;
            this.titleId = _data["TitleId"] !== undefined ? _data["TitleId"] : <any>null;
            this.firstName = _data["FirstName"] !== undefined ? _data["FirstName"] : <any>null;
            this.lastName = _data["LastName"] !== undefined ? _data["LastName"] : <any>null;
            this.middleName = _data["MiddleName"] !== undefined ? _data["MiddleName"] : <any>null;
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>null;
            this.institution = _data["Institution"] !== undefined ? _data["Institution"] : <any>null;
            this.department = _data["Department"] !== undefined ? _data["Department"] : <any>null;
            this.phone = _data["Phone"] !== undefined ? _data["Phone"] : <any>null;
            this.mobile = _data["Mobile"] !== undefined ? _data["Mobile"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.gender = _data["Gender"] !== undefined ? _data["Gender"] : <any>null;
            this.nationality = _data["Nationality"] !== undefined ? _data["Nationality"] : <any>null;
            this.interestTopic = _data["InterestTopic"] !== undefined ? _data["InterestTopic"] : <any>null;
            this.professionTypeId = _data["ProfessionTypeId"] !== undefined ? _data["ProfessionTypeId"] : <any>null;
            this.passportNumber = _data["PassportNumber"] !== undefined ? _data["PassportNumber"] : <any>null;
            this.passportExpiryDate = _data["PassportExpiryDate"] ? new Date(_data["PassportExpiryDate"].toString()) : <any>null;
            this.mMCTS = _data["MMCTS"] !== undefined ? _data["MMCTS"] : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.position = _data["Position"] !== undefined ? _data["Position"] : <any>null;
            this.isAdmin = _data["IsAdmin"] !== undefined ? _data["IsAdmin"] : <any>null;
            this.isSendVerification = _data["IsSendVerification"] !== undefined ? _data["IsSendVerification"] : <any>null;
            this.initiatedByAdmin = _data["InitiatedByAdmin"] !== undefined ? _data["InitiatedByAdmin"] : <any>null;
            if (Array.isArray(_data["ListAccessRights"])) {
                this.listAccessRights = [] as any;
                for (let item of _data["ListAccessRights"])
                    this.listAccessRights!.push(AccessRightViewModel.fromJS(item));
            }
            else {
                this.listAccessRights = <any>null;
            }
            if (Array.isArray(_data["InterestTopics"])) {
                this.interestTopics = [] as any;
                for (let item of _data["InterestTopics"])
                    this.interestTopics!.push(InterestTopicViewModel.fromJS(item));
            }
            else {
                this.interestTopics = <any>null;
            }
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.isDeceased = _data["IsDeceased"] !== undefined ? _data["IsDeceased"] : <any>null;
            this.accountCreation = _data["AccountCreation"] ? new Date(_data["AccountCreation"].toString()) : <any>null;
            this.isMemberStatus = _data["IsMemberStatus"] !== undefined ? _data["IsMemberStatus"] : <any>null;
            this.memberType = _data["MemberType"] !== undefined ? _data["MemberType"] : <any>null;
            this.accessRights = _data["AccessRights"] !== undefined ? _data["AccessRights"] : <any>null;
            this.isMember = _data["IsMember"] !== undefined ? _data["IsMember"] : <any>null;
            this.specialCaseNomination = _data["SpecialCaseNomination"] !== undefined ? _data["SpecialCaseNomination"] : <any>null;
            this.canChangeToAdmin = _data["CanChangeToAdmin"] !== undefined ? _data["CanChangeToAdmin"] : <any>null;
            this.attestationId = _data["AttestationId"] !== undefined ? _data["AttestationId"] : <any>null;
            this.expertise1 = _data["Expertise1"] !== undefined ? _data["Expertise1"] : <any>null;
            this.expertise2 = _data["Expertise2"] !== undefined ? _data["Expertise2"] : <any>null;
            this.isUserValidated = _data["IsUserValidated"] !== undefined ? _data["IsUserValidated"] : <any>null;
            this.primaryAddress = _data["PrimaryAddress"] ? UserAddressModel.fromJS(_data["PrimaryAddress"]) : <any>null;
            this.secondaryAddress = _data["SecondaryAddress"] ? UserAddressModel.fromJS(_data["SecondaryAddress"]) : <any>null;
            this.isCommentsVisible = _data["IsCommentsVisible"] !== undefined ? _data["IsCommentsVisible"] : <any>null;
            this.cV = _data["CV"] ? DocumentViewModel.fromJS(_data["CV"]) : <any>null;
            this.showValidateUser = _data["ShowValidateUser"] !== undefined ? _data["ShowValidateUser"] : <any>null;
            this.isParticipant = _data["IsParticipant"] !== undefined ? _data["IsParticipant"] : <any>null;
            this.defaultAddress = _data["DefaultAddress"] !== undefined ? _data["DefaultAddress"] : <any>null;
            this.isEventRegisteredUser = _data["IsEventRegisteredUser"] !== undefined ? _data["IsEventRegisteredUser"] : <any>null;
            this.eventId = _data["EventId"] !== undefined ? _data["EventId"] : <any>null;
            this.accountId = _data["AccountId"] !== undefined ? _data["AccountId"] : <any>null;
            if (Array.isArray(_data["UserEmailPreferenceList"])) {
                this.userEmailPreferenceList = [] as any;
                for (let item of _data["UserEmailPreferenceList"])
                    this.userEmailPreferenceList!.push(UserEmailPreferenceDTO.fromJS(item));
            }
            else {
                this.userEmailPreferenceList = <any>null;
            }
            this.isPrivacyPolicyAgreed = _data["IsPrivacyPolicyAgreed"] !== undefined ? _data["IsPrivacyPolicyAgreed"] : <any>null;
            this.hasExpressedPermission = _data["HasExpressedPermission"] !== undefined ? _data["HasExpressedPermission"] : <any>null;
            this.isApplicant = _data["IsApplicant"] !== undefined ? _data["IsApplicant"] : <any>null;
            this.consent = _data["Consent"] !== undefined ? _data["Consent"] : <any>null;
            this.expertise = _data["Expertise"] !== undefined ? _data["Expertise"] : <any>null;
            this.biography = _data["Biography"] !== undefined ? _data["Biography"] : <any>null;
            this.photoId = _data["PhotoId"] !== undefined ? _data["PhotoId"] : <any>null;
            this.photoName = _data["PhotoName"] !== undefined ? _data["PhotoName"] : <any>null;
            this.photoFileName = _data["PhotoFileName"] !== undefined ? _data["PhotoFileName"] : <any>null;
            this.cVId = _data["CVId"] !== undefined ? _data["CVId"] : <any>null;
            this.cVName = _data["CVName"] !== undefined ? _data["CVName"] : <any>null;
            this.cVFileName = _data["CVFileName"] !== undefined ? _data["CVFileName"] : <any>null;
        }
    }

    static fromJS(data: any): UserProfileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["TitleId"] = this.titleId !== undefined ? this.titleId : <any>null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["MiddleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["Institution"] = this.institution !== undefined ? this.institution : <any>null;
        data["Department"] = this.department !== undefined ? this.department : <any>null;
        data["Phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["Mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["Gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["Nationality"] = this.nationality !== undefined ? this.nationality : <any>null;
        data["InterestTopic"] = this.interestTopic !== undefined ? this.interestTopic : <any>null;
        data["ProfessionTypeId"] = this.professionTypeId !== undefined ? this.professionTypeId : <any>null;
        data["PassportNumber"] = this.passportNumber !== undefined ? this.passportNumber : <any>null;
        data["PassportExpiryDate"] = this.passportExpiryDate ? this.passportExpiryDate.toISOString() : <any>null;
        data["MMCTS"] = this.mMCTS !== undefined ? this.mMCTS : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["Position"] = this.position !== undefined ? this.position : <any>null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : <any>null;
        data["IsSendVerification"] = this.isSendVerification !== undefined ? this.isSendVerification : <any>null;
        data["InitiatedByAdmin"] = this.initiatedByAdmin !== undefined ? this.initiatedByAdmin : <any>null;
        if (Array.isArray(this.listAccessRights)) {
            data["ListAccessRights"] = [];
            for (let item of this.listAccessRights)
                data["ListAccessRights"].push(item.toJSON());
        }
        if (Array.isArray(this.interestTopics)) {
            data["InterestTopics"] = [];
            for (let item of this.interestTopics)
                data["InterestTopics"].push(item.toJSON());
        }
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["IsDeceased"] = this.isDeceased !== undefined ? this.isDeceased : <any>null;
        data["AccountCreation"] = this.accountCreation ? this.accountCreation.toISOString() : <any>null;
        data["IsMemberStatus"] = this.isMemberStatus !== undefined ? this.isMemberStatus : <any>null;
        data["MemberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["AccessRights"] = this.accessRights !== undefined ? this.accessRights : <any>null;
        data["IsMember"] = this.isMember !== undefined ? this.isMember : <any>null;
        data["SpecialCaseNomination"] = this.specialCaseNomination !== undefined ? this.specialCaseNomination : <any>null;
        data["CanChangeToAdmin"] = this.canChangeToAdmin !== undefined ? this.canChangeToAdmin : <any>null;
        data["AttestationId"] = this.attestationId !== undefined ? this.attestationId : <any>null;
        data["Expertise1"] = this.expertise1 !== undefined ? this.expertise1 : <any>null;
        data["Expertise2"] = this.expertise2 !== undefined ? this.expertise2 : <any>null;
        data["IsUserValidated"] = this.isUserValidated !== undefined ? this.isUserValidated : <any>null;
        data["PrimaryAddress"] = this.primaryAddress ? this.primaryAddress.toJSON() : <any>null;
        data["SecondaryAddress"] = this.secondaryAddress ? this.secondaryAddress.toJSON() : <any>null;
        data["IsCommentsVisible"] = this.isCommentsVisible !== undefined ? this.isCommentsVisible : <any>null;
        data["CV"] = this.cV ? this.cV.toJSON() : <any>null;
        data["ShowValidateUser"] = this.showValidateUser !== undefined ? this.showValidateUser : <any>null;
        data["IsParticipant"] = this.isParticipant !== undefined ? this.isParticipant : <any>null;
        data["DefaultAddress"] = this.defaultAddress !== undefined ? this.defaultAddress : <any>null;
        data["IsEventRegisteredUser"] = this.isEventRegisteredUser !== undefined ? this.isEventRegisteredUser : <any>null;
        data["EventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["AccountId"] = this.accountId !== undefined ? this.accountId : <any>null;
        if (Array.isArray(this.userEmailPreferenceList)) {
            data["UserEmailPreferenceList"] = [];
            for (let item of this.userEmailPreferenceList)
                data["UserEmailPreferenceList"].push(item.toJSON());
        }
        data["IsPrivacyPolicyAgreed"] = this.isPrivacyPolicyAgreed !== undefined ? this.isPrivacyPolicyAgreed : <any>null;
        data["HasExpressedPermission"] = this.hasExpressedPermission !== undefined ? this.hasExpressedPermission : <any>null;
        data["IsApplicant"] = this.isApplicant !== undefined ? this.isApplicant : <any>null;
        data["Consent"] = this.consent !== undefined ? this.consent : <any>null;
        data["Expertise"] = this.expertise !== undefined ? this.expertise : <any>null;
        data["Biography"] = this.biography !== undefined ? this.biography : <any>null;
        data["PhotoId"] = this.photoId !== undefined ? this.photoId : <any>null;
        data["PhotoName"] = this.photoName !== undefined ? this.photoName : <any>null;
        data["PhotoFileName"] = this.photoFileName !== undefined ? this.photoFileName : <any>null;
        data["CVId"] = this.cVId !== undefined ? this.cVId : <any>null;
        data["CVName"] = this.cVName !== undefined ? this.cVName : <any>null;
        data["CVFileName"] = this.cVFileName !== undefined ? this.cVFileName : <any>null;
        return data;
    }
}

export interface IUserProfileViewModel {
    fileName?: string | null;
    titleId: number;
    firstName: string;
    lastName: string;
    middleName?: string | null;
    dateOfBirth?: Date | null;
    institution?: string | null;
    department?: string | null;
    phone?: string | null;
    mobile?: string | null;
    email: string;
    gender: number;
    nationality?: number | null;
    interestTopic?: number | null;
    professionTypeId?: number | null;
    passportNumber?: string | null;
    passportExpiryDate?: Date | null;
    mMCTS?: number | null;
    comments?: string | null;
    position?: string | null;
    isAdmin?: boolean | null;
    isSendVerification?: boolean | null;
    initiatedByAdmin?: boolean | null;
    listAccessRights?: AccessRightViewModel[] | null;
    interestTopics?: InterestTopicViewModel[] | null;
    id?: string | null;
    isDeceased?: boolean | null;
    accountCreation?: Date | null;
    isMemberStatus?: string | null;
    memberType?: string | null;
    accessRights?: number | null;
    isMember?: boolean | null;
    specialCaseNomination?: boolean | null;
    canChangeToAdmin?: boolean | null;
    attestationId?: number | null;
    expertise1?: string | null;
    expertise2?: string | null;
    isUserValidated?: boolean | null;
    primaryAddress?: UserAddressModel | null;
    secondaryAddress?: UserAddressModel | null;
    isCommentsVisible?: boolean | null;
    cV?: DocumentViewModel | null;
    showValidateUser?: boolean | null;
    isParticipant?: boolean | null;
    defaultAddress?: number | null;
    isEventRegisteredUser?: boolean | null;
    eventId?: number | null;
    accountId?: number | null;
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    isPrivacyPolicyAgreed?: boolean | null;
    hasExpressedPermission?: boolean | null;
    isApplicant?: boolean | null;
    consent?: boolean | null;
    expertise?: string | null;
    biography?: string | null;
    photoId?: number | null;
    photoName?: string | null;
    photoFileName?: string | null;
    cVId?: number | null;
    cVName?: string | null;
    cVFileName?: string | null;
}

export class AccessRightViewModel implements IAccessRightViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;

    constructor(data?: IAccessRightViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isAssigned = _data["IsAssigned"] !== undefined ? _data["IsAssigned"] : <any>null;
        }
    }

    static fromJS(data: any): AccessRightViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AccessRightViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsAssigned"] = this.isAssigned !== undefined ? this.isAssigned : <any>null;
        return data;
    }
}

export interface IAccessRightViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;
}

export class MMCTSRoleViewModel implements IMMCTSRoleViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;

    constructor(data?: IMMCTSRoleViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isAssigned = _data["IsAssigned"] !== undefined ? _data["IsAssigned"] : <any>null;
        }
    }

    static fromJS(data: any): MMCTSRoleViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MMCTSRoleViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsAssigned"] = this.isAssigned !== undefined ? this.isAssigned : <any>null;
        return data;
    }
}

export interface IMMCTSRoleViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;
}

export class ProfessionTypeViewModel implements IProfessionTypeViewModel {
    id?: number | null;
    name?: string | null;

    constructor(data?: IProfessionTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
        }
    }

    static fromJS(data: any): ProfessionTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IProfessionTypeViewModel {
    id?: number | null;
    name?: string | null;
}

export class InterestTopicViewModel implements IInterestTopicViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;
    parentId?: number | null;

    constructor(data?: IInterestTopicViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.isAssigned = _data["IsAssigned"] !== undefined ? _data["IsAssigned"] : <any>null;
            this.parentId = _data["ParentId"] !== undefined ? _data["ParentId"] : <any>null;
        }
    }

    static fromJS(data: any): InterestTopicViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InterestTopicViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["IsAssigned"] = this.isAssigned !== undefined ? this.isAssigned : <any>null;
        data["ParentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        return data;
    }
}

export interface IInterestTopicViewModel {
    id?: number | null;
    name?: string | null;
    isAssigned?: boolean | null;
    parentId?: number | null;
}

export class DocumentViewModel implements IDocumentViewModel {
    userId?: string | null;
    id?: number | null;
    name?: string | null;
    uploadedDate?: Date | null;
    comments?: string | null;
    uploadedDateString?: string | null;
    moduleId?: number | null;
    documentType?: string | null;
    isVisableToUser?: boolean | null;
    uploadedBy?: string | null;

    constructor(data?: IDocumentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.name = _data["Name"] !== undefined ? _data["Name"] : <any>null;
            this.uploadedDate = _data["UploadedDate"] ? new Date(_data["UploadedDate"].toString()) : <any>null;
            this.comments = _data["Comments"] !== undefined ? _data["Comments"] : <any>null;
            this.uploadedDateString = _data["UploadedDateString"] !== undefined ? _data["UploadedDateString"] : <any>null;
            this.moduleId = _data["ModuleId"] !== undefined ? _data["ModuleId"] : <any>null;
            this.documentType = _data["DocumentType"] !== undefined ? _data["DocumentType"] : <any>null;
            this.isVisableToUser = _data["IsVisableToUser"] !== undefined ? _data["IsVisableToUser"] : <any>null;
            this.uploadedBy = _data["UploadedBy"] !== undefined ? _data["UploadedBy"] : <any>null;
        }
    }

    static fromJS(data: any): DocumentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["UploadedDate"] = this.uploadedDate ? this.uploadedDate.toISOString() : <any>null;
        data["Comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["UploadedDateString"] = this.uploadedDateString !== undefined ? this.uploadedDateString : <any>null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : <any>null;
        data["DocumentType"] = this.documentType !== undefined ? this.documentType : <any>null;
        data["IsVisableToUser"] = this.isVisableToUser !== undefined ? this.isVisableToUser : <any>null;
        data["UploadedBy"] = this.uploadedBy !== undefined ? this.uploadedBy : <any>null;
        return data;
    }
}

export interface IDocumentViewModel {
    userId?: string | null;
    id?: number | null;
    name?: string | null;
    uploadedDate?: Date | null;
    comments?: string | null;
    uploadedDateString?: string | null;
    moduleId?: number | null;
    documentType?: string | null;
    isVisableToUser?: boolean | null;
    uploadedBy?: string | null;
}

export class UserEmailPreferenceVM implements IUserEmailPreferenceVM {
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    emailPreferencesTitleMessage?: string | null;
    isPrivacyPolicyAgreed?: boolean | null;
    privacyPolicyCheckBoxLabel?: string | null;
    hasExpressedPermission?: boolean | null;
    constantContactUrl?: string | null;

    constructor(data?: IUserEmailPreferenceVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["UserEmailPreferenceList"])) {
                this.userEmailPreferenceList = [] as any;
                for (let item of _data["UserEmailPreferenceList"])
                    this.userEmailPreferenceList!.push(UserEmailPreferenceDTO.fromJS(item));
            }
            else {
                this.userEmailPreferenceList = <any>null;
            }
            this.emailPreferencesTitleMessage = _data["EmailPreferencesTitleMessage"] !== undefined ? _data["EmailPreferencesTitleMessage"] : <any>null;
            this.isPrivacyPolicyAgreed = _data["IsPrivacyPolicyAgreed"] !== undefined ? _data["IsPrivacyPolicyAgreed"] : <any>null;
            this.privacyPolicyCheckBoxLabel = _data["PrivacyPolicyCheckBoxLabel"] !== undefined ? _data["PrivacyPolicyCheckBoxLabel"] : <any>null;
            this.hasExpressedPermission = _data["HasExpressedPermission"] !== undefined ? _data["HasExpressedPermission"] : <any>null;
            this.constantContactUrl = _data["ConstantContactUrl"] !== undefined ? _data["ConstantContactUrl"] : <any>null;
        }
    }

    static fromJS(data: any): UserEmailPreferenceVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserEmailPreferenceVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userEmailPreferenceList)) {
            data["UserEmailPreferenceList"] = [];
            for (let item of this.userEmailPreferenceList)
                data["UserEmailPreferenceList"].push(item.toJSON());
        }
        data["EmailPreferencesTitleMessage"] = this.emailPreferencesTitleMessage !== undefined ? this.emailPreferencesTitleMessage : <any>null;
        data["IsPrivacyPolicyAgreed"] = this.isPrivacyPolicyAgreed !== undefined ? this.isPrivacyPolicyAgreed : <any>null;
        data["PrivacyPolicyCheckBoxLabel"] = this.privacyPolicyCheckBoxLabel !== undefined ? this.privacyPolicyCheckBoxLabel : <any>null;
        data["HasExpressedPermission"] = this.hasExpressedPermission !== undefined ? this.hasExpressedPermission : <any>null;
        data["ConstantContactUrl"] = this.constantContactUrl !== undefined ? this.constantContactUrl : <any>null;
        return data;
    }
}

export interface IUserEmailPreferenceVM {
    userEmailPreferenceList?: UserEmailPreferenceDTO[] | null;
    emailPreferencesTitleMessage?: string | null;
    isPrivacyPolicyAgreed?: boolean | null;
    privacyPolicyCheckBoxLabel?: string | null;
    hasExpressedPermission?: boolean | null;
    constantContactUrl?: string | null;
}

export class ForgotPasswordViewModel implements IForgotPasswordViewModel {
    email?: string | null;
    isIdentityServer?: boolean | null;

    constructor(data?: IForgotPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.isIdentityServer = _data["IsIdentityServer"] !== undefined ? _data["IsIdentityServer"] : <any>null;
        }
    }

    static fromJS(data: any): ForgotPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["IsIdentityServer"] = this.isIdentityServer !== undefined ? this.isIdentityServer : <any>null;
        return data;
    }
}

export interface IForgotPasswordViewModel {
    email?: string | null;
    isIdentityServer?: boolean | null;
}

export enum MembershipYearMobileModelSubscriptionStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}